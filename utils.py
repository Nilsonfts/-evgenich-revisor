# utils.py
import json
import logging
import os
import datetime
import pytz
import random
from telebot import types
from functools import wraps
from collections import Counter

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
from config import BOSS_ID, BREAK_DURATION_MINUTES, EXPECTED_VOICES_PER_SHIFT, soviet_phrases
from state import chat_data, user_history
# –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –ù–ê–®–ò –ù–û–í–´–ï –ú–û–î–ï–õ–ò
from models import UserData, ShiftData
from database import db  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

def load_json_data(filepath, default_value=None):  # noqa: B006
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞.

    –ò—Å–ø–æ–ª—å–∑—É–µ–º None –∫–∞–∫ sentinel, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–ª–∏–ø–∞–Ω–∏—è –∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ
    –æ–±—ä–µ–∫—Ç–∞ –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–∏.
    """
    if default_value is None:
        default_value = {}

    try:
        if os.path.exists(filepath):
            with open(filepath, "r", encoding="utf-8") as f:
                return json.load(f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {filepath}: {e}")
    return default_value

def save_json_data(filename, data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä—å data –≤ JSON-—Ñ–∞–π–ª. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, –∏–Ω–∞—á–µ False."""
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filename}: {e}")
        return False

def is_admin(bot, user_id: int, chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º —á–∞—Ç–∞."""
    if user_id == BOSS_ID:
        return True
    if chat_id > 0:
        return False
    try:
        return user_id in [admin.user.id for admin in bot.get_chat_administrators(chat_id)]
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è user {user_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
        return False

def admin_required(bot):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    def decorator(func):
        @wraps(func)
        def wrapper(message):
            if not is_admin(bot, message.from_user.id, message.chat.id):
                return bot.reply_to(message, "‚õîÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞.")
            return func(message)
        return wrapper
    return decorator

def get_username(user: types.User) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ @."""
    return user.username if user.username else user.first_name

def get_username_with_at(user: types.User) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–∏–º–≤–æ–ª–æ–º @."""
    return f"@{user.username}" if user.username else user.first_name

def get_chat_title(bot, chat_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –ø–æ –µ–≥–æ ID."""
    try:
        return bot.get_chat(chat_id).title or str(chat_id)
    except Exception:
        return str(chat_id)

# –ò–ó–ú–ï–ù–ï–ù–û: –§—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ UserData —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–æ–ª–µ–π
def init_user_data(user_id: int, username: str, role: str = "–∫–∞—Ä–∞–æ–∫–µ_–≤–µ–¥—É—â–∏–π") -> UserData:
    """–°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é."""
    return UserData(user_id=user_id, username=username, role=role)

# –ò–ó–ú–ï–ù–ï–ù–û: –§—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ ShiftData
def init_shift_data(chat_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–º–µ–Ω—ã –≤ —á–∞—Ç–µ."""
    from state import chat_configs
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å, –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º
    last_report_date = None
    if chat_id in chat_data and chat_data[chat_id]:
        last_report_date = chat_data[chat_id].last_report_date

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç ShiftData
    new_shift = ShiftData()
    new_shift.shift_goal = chat_configs.get(str(chat_id), {}).get('default_goal', EXPECTED_VOICES_PER_SHIFT)
    new_shift.last_report_date = last_report_date # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É
    
    chat_data[chat_id] = new_shift
    
    if chat_id in user_history:
        user_history[chat_id].clear()


# –ò–ó–ú–ï–ù–ï–ù–û: –§—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ UserData
def handle_user_return(bot, chat_id: int, user_id: int):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–µ—Ä–µ—Ä—ã–≤–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—Ä–∞–∑—ã –∏–∑ phrases.py."""
    shift = chat_data.get(chat_id)
    if not shift: return
    
    user = shift.users.get(user_id)
    if not user or not user.on_break: return
    
    now = datetime.datetime.now(pytz.timezone('Europe/Moscow'))
    
    if not user.break_start_time: return
    break_start_time = datetime.datetime.fromisoformat(user.break_start_time)
    
    break_duration_minutes = (now - break_start_time).total_seconds() / 60
    user.on_break = False
    
    if break_duration_minutes > BREAK_DURATION_MINUTES:
        user.late_returns += 1
        late_minutes = int(break_duration_minutes - BREAK_DURATION_MINUTES)
        
        phrase_template = random.choice(
            soviet_phrases.get("system_messages", {}).get('return_late', ["‚úÖ {username}, —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã –æ–ø–æ–∑–¥–∞–ª–∏ –Ω–∞ {minutes} –º–∏–Ω."])
        )
        message_text = phrase_template.format(username=f"@{user.username}" if user.username and not user.username.startswith('@') else user.username, minutes=late_minutes)
        bot.send_message(chat_id, message_text)
        
    else:
        phrase_template = random.choice(
            soviet_phrases.get("system_messages", {}).get('return_on_time', ["üëç {username}, —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ú–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤–æ–≤—Ä–µ–º—è."])
        )
        message_text = phrase_template.format(username=f"@{user.username}" if user.username and not user.username.startswith('@') else user.username)
        bot.send_message(chat_id, message_text)
        
    save_history_event(chat_id, user_id, user.username, f"–í–µ—Ä–Ω—É–ª—Å—è —Å –ø–µ—Ä–µ—Ä—ã–≤–∞ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {break_duration_minutes:.1f} –º–∏–Ω)")


def save_history_event(chat_id: int, user_id: int, username: str, event_description: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é (JSON + –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)."""
    timestamp = datetime.datetime.now(pytz.timezone('Europe/Moscow')).isoformat()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    if chat_id not in user_history:
        user_history[chat_id] = []
    
    event = {
        "user_id": user_id,
        "username": username,
        "timestamp": timestamp,
        "event": event_description
    }
    user_history[chat_id].append(event)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        db.save_event(chat_id, user_id, username, "shift_event", event_description)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –ë–î: {e}")

def save_voice_statistics(chat_id: int, user_id: int, username: str, duration: float, recognized_ad: str = ""):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    try:
        db.save_voice_stat(chat_id, user_id, username, duration, recognized_ad)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤ –ë–î: {e}")

def get_user_stats_from_database(user_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        return db.get_user_stats_from_db(user_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î: {e}")
        return {'shifts_count': 0, 'total_voices': 0, 'total_breaks': 0, 'total_lates': 0}

def enhanced_user_stats_report(user_id: int, username: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    db_stats = get_user_stats_from_database(user_id)
    
    report_lines = [
        f"üìä **–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {username}**\n",
        f"üè¢ **–ò–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:**",
        f"üëë –°–º–µ–Ω –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {db_stats['shifts_count']}",
        f"üó£Ô∏è –ì–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞–ø–∏—Å–∞–Ω–æ: {db_stats['total_voices']}",
        f"‚òï –ü–µ—Ä–µ—Ä—ã–≤–æ–≤ –≤–∑—è—Ç–æ: {db_stats['total_breaks']}",
        f"‚è≥ –û–ø–æ–∑–¥–∞–Ω–∏–π —Å –ø–µ—Ä–µ—Ä—ã–≤–∞: {db_stats['total_lates']}"
    ]
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    if db_stats['shifts_count'] > 0:
        avg_voices = db_stats['total_voices'] / db_stats['shifts_count']
        avg_breaks = db_stats['total_breaks'] / db_stats['shifts_count']
        report_lines.extend([
            f"\nüìà **–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**",
            f"üéØ –ì–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞ —Å–º–µ–Ω—É: {avg_voices:.1f}",
            f"‚òï –ü–µ—Ä–µ—Ä—ã–≤–æ–≤ –∑–∞ —Å–º–µ–Ω—É: {avg_breaks:.1f}"
        ])
    
    return "\n".join(report_lines)

# –ò–ó–ú–ï–ù–ï–ù–û: –§—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ ShiftData –∏ UserData
def generate_detailed_report(chat_id: int, data: ShiftData) -> list:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–º–µ–Ω–µ."""
    main_id = data.main_id
    if not main_id: return ["–û—à–∏–±–∫–∞: –≤ —Å–º–µ–Ω–µ –Ω–µ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –≤–µ–¥—É—â–µ–≥–æ."]
        
    user_data = data.users.get(main_id)
    if not user_data: return ["–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–µ–¥—É—â–µ–º."]

    shift_start_dt = datetime.datetime.fromisoformat(data.shift_start)
    report_date = shift_start_dt.strftime('%d.%m.%Y')

    shift_goal = data.shift_goal
    plan_percent = (user_data.count / shift_goal * 100) if shift_goal > 0 else 0
    avg_delta = sum(user_data.voice_deltas) / len(user_data.voice_deltas) if user_data.voice_deltas else 0
    max_pause = max(user_data.voice_deltas or [0])
    avg_duration = sum(user_data.voice_durations) / len(user_data.voice_durations) if user_data.voice_durations else 0

    report_lines = [
        f"üìã **#–û—Ç—á–µ—Ç–í–µ–¥—É—â–µ–≥–æ** ({report_date})",
        f"üé§ **–í–µ–¥—É—â–∏–π:** {user_data.username}",
        "\n---",
        "**üìä –û—Å–Ω–æ–≤–Ω–∞—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**",
        f"**–ì–æ–ª–æ—Å–æ–≤—ã—Ö:** {user_data.count} –∏–∑ {shift_goal} ({plan_percent:.0f}%)",
        f"**–ü–µ—Ä–µ—Ä—ã–≤–æ–≤:** {user_data.breaks_count}",
        f"**–û–ø–æ–∑–¥–∞–Ω–∏–π:** {user_data.late_returns}",
        "\n---",
        "**üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏**",
        f"**–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Ç–º:** {avg_delta:.1f} –º–∏–Ω/–ì–°" if avg_delta else "**–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Ç–º:** –ù/–î",
        f"**–ú–∞–∫—Å. –ø–∞—É–∑–∞:** {max_pause:.1f} –º–∏–Ω." if max_pause else "**–ú–∞–∫—Å. –ø–∞—É–∑–∞:** –ù/–î",
        f"**–°—Ä. –¥–ª–∏–Ω–∞ –ì–°:** {avg_duration:.1f} —Å–µ–∫." if avg_duration else "**–°—Ä. –¥–ª–∏–Ω–∞ –ì–°:** –ù/–î"
    ]
    
    ad_counts = Counter(user_data.recognized_ads)
    if ad_counts:
        report_lines.append("\n---\n**üìù –ê–Ω–∞–ª–∏–∑ –ö–æ–Ω—Ç–µ–Ω—Ç–∞**")
        for ad, count in ad_counts.items():
            report_lines.append(f"‚úîÔ∏è {ad} (x{count})")
            
    return report_lines
