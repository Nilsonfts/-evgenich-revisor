#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
"""

import json
import shutil
import os
import sqlite3
from datetime import datetime

def create_backup():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö."""
    backup_dir = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    os.makedirs(backup_dir, exist_ok=True)
    
    files_to_backup = [
        'chat_configs.json',
        'ad_templates.json',
        'data/bot_database.db'
    ]
    
    backed_up = []
    for file_path in files_to_backup:
        if os.path.exists(file_path):
            backup_path = os.path.join(backup_dir, os.path.basename(file_path))
            shutil.copy2(file_path, backup_path)
            backed_up.append(file_path)
            print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {file_path}")
    
    # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ø–∞–º—è—Ç–∏
    try:
        from state import chat_data
        memory_backup = {}
        for chat_id, shift in chat_data.items():
            memory_backup[str(chat_id)] = {
                'shift_start': shift.shift_start,
                'main_id': shift.main_id,
                'shift_goal': shift.shift_goal,
                'users': {
                    str(user_id): {
                        'username': user.username,
                        'count': user.count,
                        'breaks_count': user.breaks_count,
                        'late_returns': user.late_returns,
                        'on_break': user.on_break,
                        'break_start_time': user.break_start_time,
                        'voice_deltas': user.voice_deltas,
                        'voice_durations': user.voice_durations,
                        'recognized_ads': user.recognized_ads
                    } for user_id, user in shift.users.items()
                }
            }
        
        with open(os.path.join(backup_dir, 'memory_state.json'), 'w', encoding='utf-8') as f:
            json.dump(memory_backup, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ø–∞–º—è—Ç–∏")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ø–∞–º—è—Ç–∏: {e}")
    
    print(f"\nüéØ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–ø–∫–µ: {backup_dir}")
    return backup_dir

def restore_backup(backup_dir):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏."""
    if not os.path.exists(backup_dir):
        print(f"‚ùå –ü–∞–ø–∫–∞ –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {backup_dir}")
        return False
    
    restored = []
    for file_name in os.listdir(backup_dir):
        if file_name == 'memory_state.json':
            continue
            
        backup_path = os.path.join(backup_dir, file_name)
        
        if file_name == 'bot_database.db':
            target_path = 'data/bot_database.db'
            os.makedirs('data', exist_ok=True)
        else:
            target_path = file_name
            
        shutil.copy2(backup_path, target_path)
        restored.append(target_path)
        print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {target_path}")
    
    print(f"\nüéØ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(restored)}")
    return True

def safe_test_wizard():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –º–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
    print("üß™ –ë–ï–ó–û–ü–ê–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
    backup_dir = create_backup()
    
    print(f"\nüîí –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {backup_dir}")
    print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É!")
    print("\n–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
    print(f"python3 safe_test.py restore {backup_dir}")
    
    return backup_dir

def check_current_data():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π."""
    print("üìä –ü–†–û–í–ï–†–ö–ê –¢–ï–ö–£–©–ò–• –î–ê–ù–ù–´–•")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥–∏ —á–∞—Ç–æ–≤
    if os.path.exists('chat_configs.json'):
        with open('chat_configs.json', 'r', encoding='utf-8') as f:
            configs = json.load(f)
        print(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —á–∞—Ç–æ–≤: {len(configs)}")
        for chat_id, config in configs.items():
            brand = config.get('brand', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            city = config.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            goal = config.get('default_goal', '–ù–µ –∑–∞–¥–∞–Ω–∞')
            concept = config.get('concept', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
            print(f"  ‚Ä¢ –ß–∞—Ç {chat_id}: {brand}/{city} (–Ω–æ—Ä–º–∞: {goal}, –∫–æ–Ω—Ü–µ–ø—Ü–∏—è: {concept})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if os.path.exists('data/bot_database.db'):
        conn = sqlite3.connect('data/bot_database.db')
        cursor = conn.cursor()
        
        try:
            cursor.execute("SELECT COUNT(*) FROM voice_stats WHERE date(timestamp) = date('now')")
            today_voices = cursor.fetchone()[0]
            
            cursor.execute("SELECT username, COUNT(*) as count FROM voice_stats WHERE date(timestamp) = date('now') GROUP BY username ORDER BY count DESC")
            users_today = cursor.fetchall()
            
            print(f"\nüó£Ô∏è –ì–æ–ª–æ—Å–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {today_voices}")
            if users_today:
                print("üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –≤–µ–¥—É—â–∏–µ —Å–µ–≥–æ–¥–Ω—è:")
                for username, count in users_today:
                    print(f"  ‚Ä¢ {username}: {count} –ì–°")
                    
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ë–î: {e}")
        finally:
            conn.close()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏
    try:
        from state import chat_data
        if chat_data:
            print(f"\nüíæ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω –≤ –ø–∞–º—è—Ç–∏: {len(chat_data)}")
            for chat_id, shift in chat_data.items():
                print(f"  ‚Ä¢ –ß–∞—Ç {chat_id}: {len(shift.users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                if shift.main_id:
                    main_user = shift.users.get(shift.main_id)
                    if main_user:
                        print(f"    –ì–ª–∞–≤–Ω—ã–π: {main_user.username} ({main_user.count} –ì–°)")
        else:
            print("\nüíæ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω –≤ –ø–∞–º—è—Ç–∏ –Ω–µ—Ç")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–º—è—Ç–∏: {e}")

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        if sys.argv[1] == "restore" and len(sys.argv) > 2:
            restore_backup(sys.argv[2])
        elif sys.argv[1] == "check":
            check_current_data()
        elif sys.argv[1] == "backup":
            safe_test_wizard()
    else:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python3 safe_test.py check     - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ")
        print("  python3 safe_test.py backup    - —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø")
        print("  python3 safe_test.py restore <–ø–∞–ø–∫–∞> - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—ç–∫–∞–ø")
