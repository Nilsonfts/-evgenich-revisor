# -*- coding: utf-8 -*-
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.
- –ê–¥–º–∏–Ω—ã –ø–æ–ª—É—á–∞—é—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ inline-–º–µ–Ω—é.
- –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã.
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /—Å–≤–æ–¥–∫–∞ –¥–ª—è –ª–∏—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /analyze –¥–ª—è –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.
"""

import logging
import os
import telebot
import datetime
import pytz
import time
import schedule
import threading
import random
import csv
from telebot import types
from functools import wraps
from typing import Dict

# –ò–º–ø–æ—Ä—Ç —Ñ—Ä–∞–∑
try:
    from phrases import (
        soviet_phrases,
        BREAK_KEYWORDS, RETURN_CONFIRM_WORDS, ACHIEVEMENTS
    )
except ImportError:
    logging.warning("–§–∞–π–ª 'phrases.py' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
    BREAK_KEYWORDS = ["–ø–µ—Ä–µ—Ä—ã–≤", "–æ—Ç–¥—ã—Ö"]
    RETURN_CONFIRM_WORDS = ["–≤–µ—Ä–Ω—É–ª—Å—è", "–Ω–∞ –º–µ—Å—Ç–µ"]
    soviet_phrases = {"too_short": ["–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ!"], "accept": ["–ü—Ä–∏–Ω—è—Ç–æ."], "not_your_menu": ["–ù–µ –¥–ª—è –≤–∞—Å."]}

# ========================================
#           –ù–ê–°–¢–†–û–ô–ö–ò –ò –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
# ========================================
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s", handlers=[logging.FileHandler("bot.log", encoding="utf-8"), logging.StreamHandler()])

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

BOSS_ID = 196614680
STATS_FILE = 'user_stats.csv'

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–º–µ–Ω—ã
VOICE_TIMEOUT_MINUTES = 40
EXPECTED_VOICES_PER_SHIFT = 15
MIN_VOICE_SECONDS = 7
VOICE_COOLDOWN_SECONDS = 120
BREAK_DURATION_MINUTES = 15
BREAK_DELAY_MINUTES = 60

moscow_tz = pytz.timezone("Europe/Moscow")
bot = telebot.TeleBot(BOT_TOKEN, threaded=False, parse_mode="Markdown")
chat_data: Dict[int, dict] = {}

# ========================================
#      –†–ê–ë–û–¢–ê –° –§–ê–ô–õ–û–ú –°–¢–ê–¢–ò–°–¢–ò–ö–ò
# ========================================

def load_user_stats() -> Dict[int, Dict]:
    stats = {}
    if not os.path.exists(STATS_FILE):
        with open(STATS_FILE, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['user_id', 'username', 'total_shifts', 'total_voices', 'total_breaks', 'total_lates'])
        return stats
    try:
        with open(STATS_FILE, mode='r', newline='', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            for row in reader:
                stats[int(row['user_id'])] = {
                    'username': row['username'],
                    'total_shifts': int(row['total_shifts']),
                    'total_voices': int(row['total_voices']),
                    'total_breaks': int(row['total_breaks']),
                    'total_lates': int(row['total_lates'])
                }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    return stats

def save_user_stats(all_stats: Dict[int, Dict]):
    try:
        with open(STATS_FILE, mode='w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['user_id', 'username', 'total_shifts', 'total_voices', 'total_breaks', 'total_lates'])
            for user_id, stats in all_stats.items():
                writer.writerow([user_id, stats.get('username', 'N/A'), stats.get('total_shifts', 0), stats.get('total_voices', 0), stats.get('total_breaks', 0), stats.get('total_lates', 0)])
    except IOError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def update_historical_stats(user_id: int, username: str, shift_data: dict):
    all_stats = load_user_stats()
    if user_id not in all_stats:
        all_stats[user_id] = {'username': username, 'total_shifts': 0, 'total_voices': 0, 'total_breaks': 0, 'total_lates': 0}

    all_stats[user_id]['username'] = username
    all_stats[user_id]['total_shifts'] += 1
    all_stats[user_id]['total_voices'] += shift_data.get('count', 0)
    all_stats[user_id]['total_breaks'] += shift_data.get('breaks_count', 0)
    all_stats[user_id]['total_lates'] += shift_data.get('late_returns', 0)
    
    save_user_stats(all_stats)

# ========================================
#           –î–ï–ö–û–†–ê–¢–û–†–´ –ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ========================================

def is_admin(user_id, chat_id):
    if user_id == BOSS_ID: return True
    try:
        return user_id in [admin.user.id for admin in bot.get_chat_administrators(chat_id)]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ {chat_id}: {e}")
        return False

def admin_required(func):
    @wraps(func)
    def wrapper(message):
        if not is_admin(message.from_user.id, message.chat.id):
            bot.reply_to(message, "‚õî –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞.")
            return
        return func(message)
    return wrapper

def get_username(user) -> str:
    return f"@{user.username}" if user.username else user.first_name

def init_user_data(user_id, username):
    return {
        'username': username, 'count': 0, 'on_break': False, 'breaks_count': 0,
        'late_returns': 0, 'last_voice_time': None, 'last_break_time': None,
        'reminder_sent_at': None, 'voice_deltas': [], 'voice_durations': [],
        'break_start_time': None, 'menu_message_id': None
    }

def handle_user_return(chat_id, user_id):
    user = chat_data.get(chat_id, {}).get('users', {}).get(user_id)
    if not user or not user.get('on_break'): return

    now = datetime.datetime.now(moscow_tz)
    break_duration_minutes = (now - user['break_start_time']).total_seconds() / 60

    user['on_break'] = False
    
    if break_duration_minutes > BREAK_DURATION_MINUTES:
        user['late_returns'] += 1
        bot.send_message(chat_id, f"‚úÖ {user['username']}, —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã –æ–ø–æ–∑–¥–∞–ª–∏ –Ω–∞ {int(break_duration_minutes - BREAK_DURATION_MINUTES)} –º–∏–Ω.")
    else:
        bot.send_message(chat_id, f"üëç {user['username']}, —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ú–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤–æ–≤—Ä–µ–º—è.")

    if is_admin(user_id, chat_id):
        send_or_update_menu(chat_id, user_id)

# ========================================
#           –õ–û–ì–ò–ö–ê INLINE –ú–ï–ù–Æ (–¢–û–õ–¨–ö–û –î–õ–Ø –ê–î–ú–ò–ù–û–í)
# ========================================

def get_menu_text(user_data: dict) -> str:
    if user_data.get('on_break'):
        break_end_time = user_data['break_start_time'] + datetime.timedelta(minutes=BREAK_DURATION_MINUTES)
        return f"‚òïÔ∏è *–ù–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ.* –í–µ–¥—É—â–∏–π: {user_data['username']}\n–í–µ—Ä–Ω—É—Ç—å—Å—è –≤: {break_end_time.strftime('%H:%M:%S')}"
    else:
        return f"üé§ *–ù–∞ —Å–º–µ–Ω–µ.* –í–µ–¥—É—â–∏–π: {user_data['username']}\n–ì–°: {user_data['count']} | –ü–µ—Ä–µ—Ä—ã–≤—ã: {user_data['breaks_count']}"

def create_main_inline_keyboard() -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("‚òïÔ∏è –£–π—Ç–∏/–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="toggle_break"),
        types.InlineKeyboardButton("üìä –°–≤–æ–¥–∫–∞ —Å–º–µ–Ω—ã", callback_data="shift_summary")
    )
    return markup

def send_or_update_menu(chat_id: int, user_id: int):
    if not is_admin(user_id, chat_id): return

    data = chat_data.get(chat_id, {})
    user_data = data.get('users', {}).get(user_id)
    if not user_data: return

    menu_text = get_menu_text(user_data)
    keyboard = create_main_inline_keyboard()
    menu_message_id = user_data.get('menu_message_id')

    try:
        if menu_message_id:
            bot.edit_message_text(chat_id=chat_id, message_id=menu_message_id, text=menu_text, reply_markup=keyboard)
        else:
            msg = bot.send_message(chat_id, menu_text, reply_markup=keyboard)
            user_data['menu_message_id'] = msg.message_id
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –≤ —á–∞—Ç–µ {chat_id}: {e}")
        if 'message to edit not found' in str(e).lower() or 'message not found' in str(e).lower():
             msg = bot.send_message(chat_id, menu_text, reply_markup=keyboard)
             user_data['menu_message_id'] = msg.message_id

# ========================================
#           –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
# ========================================

@bot.message_handler(commands=['start', '—Å—Ç–∞—Ä—Ç'])
def handle_start(message):
    chat_id = message.chat.id
    from_user = message.from_user
    username = get_username(from_user)

    if chat_id not in chat_data:
        chat_data[chat_id] = {'main_id': None, 'users': {}, 'shift_start': datetime.datetime.now(moscow_tz)}

    if from_user.id not in chat_data[chat_id]['users']:
        chat_data[chat_id]['users'][from_user.id] = init_user_data(from_user.id, username)

    if chat_data[chat_id].get('main_id') is not None:
        main_username = chat_data[chat_id].get('main_username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        bot.reply_to(message, f"–°–º–µ–Ω–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞. –¢–µ–∫—É—â–∏–π –≥–ª–∞–≤–Ω—ã–π: {main_username}.")
        return

    chat_data[chat_id]['main_id'] = from_user.id
    chat_data[chat_id]['main_username'] = username
    
    if is_admin(from_user.id, chat_id):
        bot.send_message(chat_id, f"üëë {username}, –≤—ã –∑–∞—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ —Å–º–µ–Ω—É! –ù–∏–∂–µ –≤–∞—à –∞–¥–º–∏–Ω-–ø—É–ª—å—Ç.")
        send_or_update_menu(chat_id, from_user.id)
    else:
        bot.send_message(chat_id, f"üëë {username}, –≤—ã –∑–∞—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ —Å–º–µ–Ω—É! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (`–ø–µ—Ä–µ—Ä—ã–≤`, `–Ω–∞ –º–µ—Å—Ç–µ`).")

@bot.message_handler(commands=['check', '–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π'])
@admin_required
def admin_check_shift(message):
    chat_id = message.chat.id
    data = chat_data.get(chat_id)

    if not data or not data.get('main_id'):
        bot.reply_to(message, "–°–º–µ–Ω–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    report_lines = get_report_lines(chat_id, data)
    bot.send_message(chat_id, "\n".join(report_lines))

@bot.message_handler(commands=['—Å–≤–æ–¥–∫–∞'])
def my_total_stats(message):
    user_id = message.from_user.id
    username = get_username(message.from_user)
    all_stats = load_user_stats()
    user_stats = all_stats.get(user_id)

    if not user_stats:
        bot.reply_to(message, f"{username}, —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Å–º–µ–Ω.")
        return

    report_text = (
        f"‚≠êÔ∏è **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {username}** ‚≠êÔ∏è\n\n"
        f"üëë **–í—Å–µ–≥–æ —Å–º–µ–Ω –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ:** {user_stats.get('total_shifts', 0)}\n"
        f"üó£Ô∏è **–í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞–ø–∏—Å–∞–Ω–æ:** {user_stats.get('total_voices', 0)}\n"
        f"‚òïÔ∏è **–í—Å–µ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤:** {user_stats.get('total_breaks', 0)}\n"
        f"‚è≥ **–í—Å–µ–≥–æ –æ–ø–æ–∑–¥–∞–Ω–∏–π —Å –ø–µ—Ä–µ—Ä—ã–≤–∞:** {user_stats.get('total_lates', 0)}"
    )
    bot.reply_to(message, report_text)
    
@bot.message_handler(commands=['analyze'])
@admin_required
def admin_analyze_all_users(message):
    """(–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤) –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å–≤–æ–¥–∫—É-—Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º."""
    all_stats = load_user_stats()

    if not all_stats:
        bot.reply_to(message, "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—É—Å—Ç–∞. –ü–æ–∫–∞ –Ω–µ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å.")
        return

    processed_users = []
    for user_id, stats in all_stats.items():
        total_shifts = stats.get('total_shifts', 0)
        if total_shifts == 0: continue

        total_voices = stats.get('total_voices', 0)
        total_lates = stats.get('total_lates', 0)
        
        avg_voices_per_shift = total_voices / total_shifts
        lateness_ratio = (total_lates / total_shifts) * 100

        processed_users.append({
            'username': stats.get('username', f'ID: {user_id}'),
            'avg_voices': avg_voices_per_shift,
            'lateness_percent': lateness_ratio,
            'shifts': total_shifts
        })

    processed_users.sort(key=lambda x: x['avg_voices'], reverse=True)

    report_lines = ["üìä **–û–±—â–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º**", "_(–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ —Å—Ä. –∫–æ–ª-–≤—É –ì–° –∑–∞ —Å–º–µ–Ω—É)_\n"]
    medals = {0: "ü•á", 1: "ü•à", 2: "ü•â"}

    for i, user in enumerate(processed_users):
        rank_icon = medals.get(i, f"{i+1}.")
        report_lines.append(
            f"*{rank_icon}* {user['username']} ‚Äî *–°—Ä. –ì–°:* `{user['avg_voices']:.1f}` | *–û–ø–æ–∑–¥–∞–Ω–∏—è:* `{user['lateness_percent']:.0f}%` | *–°–º–µ–Ω:* `{user['shifts']}`"
        )

    if not processed_users:
         report_lines.append("–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ —Å–º–µ–Ω–∞–º–∏.")

    bot.send_message(message.chat.id, "\n".join(report_lines))

# ========================================
#           –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô
# ========================================

@bot.message_handler(content_types=['voice'])
def handle_voice_message(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    username = get_username(message.from_user)
    now = datetime.datetime.now(moscow_tz)

    if chat_id not in chat_data:
        chat_data[chat_id] = {'main_id': None, 'users': {}, 'shift_start': now}
    if user_id not in chat_data[chat_id]['users']:
        chat_data[chat_id]['users'][user_id] = init_user_data(user_id, username)
    user = chat_data[chat_id]['users'][user_id]

    if user.get('on_break'):
        handle_user_return(chat_id, user_id)

    voice_duration = message.voice.duration
    if voice_duration < MIN_VOICE_SECONDS:
        bot.reply_to(message, random.choice(soviet_phrases.get("too_short", ["–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ."])))
        return

    last_voice = user.get('last_voice_time')
    if last_voice and (now - last_voice).total_seconds() < VOICE_COOLDOWN_SECONDS:
        bot.reply_to(message, f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ! –°–ª–µ–¥—É—é—â–µ–µ –ì–° –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ {int(VOICE_COOLDOWN_SECONDS - (now - last_voice).total_seconds())} —Å–µ–∫.")
        return

    user['voice_durations'].append(voice_duration)
    if last_voice: user['voice_deltas'].append((now - last_voice).total_seconds() / 60)
    else: user['first_voice_time'] = now

    user['count'] += 1
    user['last_voice_time'] = now
    
    if "accept" in soviet_phrases:
        bot.reply_to(message, random.choice(soviet_phrases["accept"]))

    main_id = chat_data[chat_id].get('main_id')
    if main_id is None:
        chat_data[chat_id]['main_id'] = user_id
        chat_data[chat_id]['main_username'] = username
        if is_admin(user_id, chat_id):
            bot.send_message(chat_id, f"üëë {username} —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≥–ª–∞–≤–Ω—ã–º, –∑–∞–ø–∏—Å–∞–≤ –ø–µ—Ä–≤–æ–µ –ì–°! –ù–∏–∂–µ –≤–∞—à –∞–¥–º–∏–Ω-–ø—É–ª—å—Ç.")
            send_or_update_menu(chat_id, user_id)
        else:
            bot.send_message(chat_id, f"üëë {username} —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≥–ª–∞–≤–Ω—ã–º, –∑–∞–ø–∏—Å–∞–≤ –ø–µ—Ä–≤–æ–µ –ì–°!")
    
    if main_id == user_id and is_admin(user_id, chat_id):
        send_or_update_menu(chat_id, user_id)

@bot.message_handler(func=lambda m: m.text and any(word in m.text.lower() for word in BREAK_KEYWORDS))
def handle_break_request(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    if chat_data.get(chat_id, {}).get('main_id') != user_id: return
        
    user = chat_data.get(chat_id, {}).get('users', {}).get(user_id, {})
    if user.get('on_break'):
        bot.reply_to(message, "–í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ.")
        return

    last_break = user.get('last_break_time')
    if last_break and (datetime.datetime.now(moscow_tz) - last_break).total_seconds() / 60 < BREAK_DELAY_MINUTES:
        remaining_time = int(BREAK_DELAY_MINUTES - (datetime.datetime.now(moscow_tz) - last_break).total_seconds() / 60)
        bot.reply_to(message, f"–°–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–µ—Ä—ã–≤ –º–æ–∂–Ω–æ –≤–∑—è—Ç—å —á–µ—Ä–µ–∑ {remaining_time} –º–∏–Ω.")
        return

    user.update({
        'on_break': True, 'break_start_time': datetime.datetime.now(moscow_tz),
        'last_break_time': datetime.datetime.now(moscow_tz),
        'breaks_count': user.get('breaks_count', 0) + 1,
    })
    bot.reply_to(message, f"‚úÖ –ü–µ—Ä–µ—Ä—ã–≤ –Ω–∞ {BREAK_DURATION_MINUTES} –º–∏–Ω—É—Ç –Ω–∞—á–∞—Ç.")
    
    if is_admin(user_id, chat_id):
        send_or_update_menu(chat_id, user_id)

@bot.message_handler(func=lambda m: m.text and any(word in m.text.lower() for word in RETURN_CONFIRM_WORDS))
def handle_return_message(message):
    user_id = message.from_user.id
    if chat_data.get(message.chat.id, {}).get('main_id') == user_id:
        handle_user_return(message.chat.id, user_id)

# ========================================
#           –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö (–î–õ–Ø –ê–î–ú–ò–ù–û–í)
# ========================================

@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    data = chat_data.get(chat_id, {})
    main_id = data.get('main_id')

    if user_id != main_id:
        bot.answer_callback_query(call.id, text=random.choice(soviet_phrases.get("not_your_menu", ["–ù–µ –¥–ª—è –≤–∞—Å."])), show_alert=True)
        return
    
    user_data = data.get('users', {}).get(user_id)
    if not user_data:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    if call.data == 'toggle_break':
        if user_data.get('on_break'):
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è —Å –ø–µ—Ä–µ—Ä—ã–≤–∞
            handle_user_return(chat_id, user_id)
            bot.answer_callback_query(call.id, "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!")
            return
        else:
            # –£—Ö–æ–¥–∏–º –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤
            last_break = user_data.get('last_break_time')
            if last_break and (datetime.datetime.now(moscow_tz) - last_break).total_seconds() / 60 < BREAK_DELAY_MINUTES:
                remaining = int(BREAK_DELAY_MINUTES - (datetime.datetime.now(moscow_tz) - last_break).total_seconds() / 60)
                bot.answer_callback_query(call.id, f"–ï—â–µ —Ä–∞–Ω–æ! –ü–µ—Ä–µ—Ä—ã–≤ —á–µ—Ä–µ–∑ {remaining} –º–∏–Ω.", show_alert=True)
                return
            user_data.update({'on_break': True, 'break_start_time': datetime.datetime.now(moscow_tz), 'last_break_time': datetime.datetime.now(moscow_tz), 'breaks_count': user_data.get('breaks_count', 0) + 1})
            bot.answer_callback_query(call.id, f"–ü–µ—Ä–µ—Ä—ã–≤ –Ω–∞ {BREAK_DURATION_MINUTES} –º–∏–Ω—É—Ç –Ω–∞—á–∞—Ç.")

    elif call.data == 'shift_summary':
        report_lines = get_report_lines(chat_id, data)
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, "\n".join(report_lines), reply_to_message_id=call.message.message_id)

    send_or_update_menu(chat_id, user_id)

# ========================================
#           –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ò –û–¢–ß–ï–¢–´
# ========================================

def check_users_activity():
    now = datetime.datetime.now(moscow_tz)
    for chat_id, data in list(chat_data.items()):
        main_id = data.get('main_id')
        if not main_id: continue
        
        user = data.get('users', {}).get(main_id)
        if not user: continue
        
        if user.get('on_break') and not user.get('pre_return_warning_sent', False):
            if user.get('break_start_time') and (now - user['break_start_time']).total_seconds() / 60 > BREAK_DURATION_MINUTES:
                bot.send_message(chat_id, random.choice(soviet_phrases.get("return_demand", ["–ü–æ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è."])))
                user['pre_return_warning_sent'] = True
        
        last_voice = user.get('last_voice_time')
        if not user.get('on_break') and last_voice and not user.get('reminder_sent_at'):
            if (now - last_voice).total_seconds() / 60 > VOICE_TIMEOUT_MINUTES:
                bot.send_message(chat_id, random.choice(soviet_phrases.get("voice_reminder", [f"üö® {user['username']}, –≤—ã –¥–∞–≤–Ω–æ –Ω–µ –≤—ã—Ö–æ–¥–∏–ª–∏ –≤ —ç—Ñ–∏—Ä."])))
                user['reminder_sent_at'] = now

def get_report_lines(chat_id, data):
    main_id = data.get('main_id')
    if not main_id or main_id not in data.get('users', {}): return ["–ì–ª–∞–≤–Ω—ã–π –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω."]
    
    user = data['users'][main_id]
    now = datetime.datetime.now(moscow_tz)
    plan_percent = (user['count'] / EXPECTED_VOICES_PER_SHIFT * 100) if EXPECTED_VOICES_PER_SHIFT > 0 else 0
    return [
        f"üìã #–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π_–æ—Ç—á–µ—Ç ({now.strftime('%d.%m.%Y')})",
        f"üè¢ –ß–∞—Ç: {get_chat_title(chat_id)}",
        f"üé§ –í–µ–¥—É—â–∏–π: {user['username']}",
        f"üó£Ô∏è –ì–æ–ª–æ—Å–æ–≤—ã—Ö: {user['count']} –∏–∑ {EXPECTED_VOICES_PER_SHIFT} ({plan_percent:.0f}%)",
        f"‚òï –ü–µ—Ä–µ—Ä—ã–≤–æ–≤: {user['breaks_count']}",
        f"‚è≥ –ó–∞–¥–µ—Ä–∂–µ–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞: {user['late_returns']}"
    ]

def send_end_of_shift_reports():
    logging.info("–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤...")
    for chat_id, data in list(chat_data.items()):
        main_id = data.get('main_id')
        if not main_id or main_id not in data.get('users', {}): continue
        
        main_user_data = data['users'][main_id]
        update_historical_stats(main_id, main_user_data['username'], main_user_data)
        
        report_lines = get_report_lines(chat_id, data)
        report_lines[0] = f"üìã #–ò—Ç–æ–≥–æ–≤—ã–π_–û—Ç—á–µ—Ç_–°–º–µ–Ω—ã ({data.get('shift_start', datetime.datetime.now(moscow_tz)).strftime('%d.%m.%Y')})"
        
        try:
            bot.send_message(chat_id, "\n".join(report_lines))
            if main_user_data.get('menu_message_id'):
                bot.delete_message(chat_id, main_user_data['menu_message_id'])
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id}: {e}")
            
    chat_data.clear()
    logging.info("–î–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã –æ—á–∏—â–µ–Ω—ã.")

def run_scheduler():
    schedule.every(1).minutes.do(check_users_activity)
    schedule.every().day.at("23:50", "Europe/Moscow").do(send_end_of_shift_reports)
    
    while True:
        schedule.run_pending()
        time.sleep(1)

# ========================================
#           –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ========================================
if __name__ == '__main__':
    logging.info("ü§ñ –ë–æ—Ç —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω...")
    threading.Thread(target=run_scheduler, daemon=True).start()
    while True:
        try:
            bot.polling(none_stop=True, interval=0)
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ polling: {e}")
            time.sleep(15)
