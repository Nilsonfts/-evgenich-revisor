import logging
import os
import telebot
import datetime
import pytz
import time
import schedule
import threading
import random

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
logging.basicConfig(level=logging.INFO)
BOT_TOKEN = os.getenv("BOT_TOKEN")

SHIFT_START_HOUR = 19
SHIFT_END_HOUR = 4
VOICE_TIMEOUT_MINUTES = 35
BREAK_DURATION_MINUTES = 15

moscow_tz = pytz.timezone("Europe/Moscow")
bot = telebot.TeleBot(BOT_TOKEN)

soviet_phrases = {
    "voice_reminder": [
        "üîî –¢–æ–≤–∞—Ä–∏—â, –ø–æ—Ä–∞ –±—ã —É–∂–µ –ø—Ä–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç!",
        "üì¢ –≠—Ñ–∏—Ä –∂–¥—ë—Ç, –º–∏–∫—Ä–æ—Ñ–æ–Ω —Å–∫—É—á–∞–µ—Ç!",
        "üéôÔ∏è –ë–µ–∑ –≥–æ–ª–æ—Å–∞ ‚Äî –∫–∞–∫ –±–µ–∑ —Ö–ª–µ–±–∞!",
        "‚è∞ –ù–∞–ø–æ–º–Ω—é –Ω–µ–∂–Ω–æ ‚Äî —Ç–µ–∫—Å—Ç –≤ —Å—Ç—É–¥–∏—é!",
    ],
    "break_acknowledgement": [
        "–•–æ—Ä–æ—à–æ, –¥–∞—é –ø–µ—Ä–µ—Ä—ã–≤. –ñ–¥—É –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ—é!",
        "–ü—Ä–∏–Ω—è—Ç–æ, –æ—Ç–¥—ã—Ö–∞–π. –ù–æ –Ω–µ –∑–∞—Ç—è–≥–∏–≤–∞–π!",
        "–ö–æ–Ω–µ—á–Ω–æ, —Ç–æ–≤–∞—Ä–∏—â. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!",
        "–î–∞–≤–∞–π, –Ω–æ —á—Ç–æ–± —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç –±—ã–ª –∫–∞–∫ —à—Ç—ã–∫!",
    ],
    "break_over_reminder": [
        "–¢–∞–∫, –ø–µ—Ä–µ—Ä—ã–≤ –æ–∫–æ–Ω—á–µ–Ω! –ì–¥–µ —Ç—ã, –≥–µ—Ä–æ–π —ç—Ñ–∏—Ä–∞?",
        "–¢–æ–≤–∞—Ä–∏—â, –ø–æ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ!",
        "–≠–π, 15 –º–∏–Ω—É—Ç –¥–∞–≤–Ω–æ –ø—Ä–æ—à–ª–∏! –ñ–¥—É –≤ —ç—Ñ–∏—Ä–µ!",
        "–ö–æ–º–∞–Ω–¥–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è, –Ω–µ –∑–∞—Ç—è–Ω—É–ª—Å—è –ª–∏ —Ç–≤–æ–π –æ—Ç–¥—ã—Ö?",
    ],
}

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö ---
# { chat_id: { main_id: user_id, main_username: username, users: {user_id: {username:..., ...}} } }
chat_data = {}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def is_shift_active():
    now = datetime.datetime.now(moscow_tz)
    if SHIFT_START_HOUR > SHIFT_END_HOUR:
        return now.hour >= SHIFT_START_HOUR or now.hour < SHIFT_END_HOUR
    return SHIFT_START_HOUR <= now.hour < SHIFT_END_HOUR

def get_username(message):
    if message.from_user.username:
        return f"@{message.from_user.username}"
    return message.from_user.first_name

def get_user_by_username(users_dict, username):
    for uid, info in users_dict.items():
        if info['username'].lower() == username.lower():
            return uid, info
    return None, None

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö ---
@bot.message_handler(content_types=['voice'])
def handle_voice_message(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    username = get_username(message)

    if chat_id not in chat_data:
        chat_data[chat_id] = {'main_id': None, 'main_username': None, 'users': {}}

    users = chat_data[chat_id]['users']
    if user_id not in users:
        users[user_id] = {'username': username, 'count': 0, 'reminded': False, 'on_break': False}

    users[user_id]['count'] += 1
    users[user_id]['last_voice_time'] = datetime.datetime.now(moscow_tz)
    users[user_id]['reminded'] = False

    # –ï—Å–ª–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –Ω–µ—Ç, –Ω–∞–∑–Ω–∞—á–∞–µ–º, –∏–Ω–∞—á–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if chat_data[chat_id]['main_id'] is None:
        chat_data[chat_id]['main_id'] = user_id
        chat_data[chat_id]['main_username'] = username
        bot.send_message(chat_id, f"üéôÔ∏è –¢–æ–≤–∞—Ä–∏—â {username} –ø—Ä–∏–Ω—è—Ç –∫–∞–∫ –≥–ª–∞–≤–Ω—ã–π –Ω–∞ —Å–º–µ–Ω–µ! –¢–µ–ø–µ—Ä—å –∫–æ–Ω—Ç—Ä–æ–ª—å –∑–∞ —ç—Ñ–∏—Ä–æ–º ‚Äî —Ç–≤–æ–π –¥–æ–ª–≥.")

    logging.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ –æ—Ç {username} –≤ —á–∞—Ç–µ {chat_id}. –í—Å–µ–≥–æ: {users[user_id]['count']}")

    # –ï—Å–ª–∏ –≤–µ–¥—É—â–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å –ø–µ—Ä–µ—Ä—ã–≤–∞
    if users[user_id].get('on_break'):
        users[user_id]['on_break'] = False
        bot.send_message(chat_id, f"–¢–æ–≤–∞—Ä–∏—â {username}, —Ä–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞ –Ω–∞ –ø–æ—Å—Ç—É!")

# --- –ü–µ—Ä–µ—Ä—ã–≤ ---
@bot.message_handler(func=lambda m: m.text and any(word in m.text.lower() for word in ["–∫—É—Ä–∏—Ç—å", "–ø–µ—Ä–µ—Ä—ã–≤", "–µ—Å—Ç—å", "–ø–∏—Ç—å", "–æ—Ç–æ–π–¥—É"]))
def handle_break_request(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    username = get_username(message)

    if chat_id not in chat_data or chat_data[chat_id].get('main_id') != user_id:
        bot.reply_to(message, "–ü–µ—Ä–µ—Ä—ã–≤ –º–æ–∂–Ω–æ –±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –Ω–∞ —Å–º–µ–Ω–µ!")
        return

    user = chat_data[chat_id]['users'][user_id]
    user['on_break'] = True
    user['break_start_time'] = datetime.datetime.now(moscow_tz)
    ack = random.choice(soviet_phrases["break_acknowledgement"])
    bot.reply_to(message, ack)

# --- –°–±—Ä–æ—Å —Å–º–µ–Ω—ã ---
@bot.message_handler(commands=["restart"])
def restart_main(message):
    chat_id = message.chat.id
    if chat_id in chat_data:
        chat_data[chat_id]['main_id'] = None
        chat_data[chat_id]['main_username'] = None
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ
        bot.send_message(chat_id, "–°–º–µ–Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞. –ñ–¥—É –Ω–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ!")

# --- –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ /karaoke @username ---
@bot.message_handler(commands=["karaoke"])
def karaoke_assign(message):
    chat_id = message.chat.id
    if not message.text:
        bot.reply_to(message, "–§–æ—Ä–º–∞—Ç: /karaoke @username")
        return
    try:
        cmd, username_tag = message.text.strip().split()
        username = username_tag.strip().lstrip('@')
    except Exception:
        bot.reply_to(message, "–§–æ—Ä–º–∞—Ç: /karaoke @username")
        return
    if chat_id not in chat_data or not chat_data[chat_id]['users']:
        bot.reply_to(message, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return
    users = chat_data[chat_id]['users']
    uid, userinfo = get_user_by_username(users, f"@{username}")
    if not uid:
        bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –ø—Ä–∏—Å–ª–∞–≤—à–∏—Ö –≥–æ–ª–æ—Å–æ–≤–æ–µ.")
        return
    chat_data[chat_id]['main_id'] = uid
    chat_data[chat_id]['main_username'] = userinfo['username']
    bot.send_message(chat_id, f"–¢–µ–ø–µ—Ä—å —Ç–æ–≤–∞—Ä–∏—â {userinfo['username']} ‚Äî –≥–ª–∞–≤–Ω—ã–π –Ω–∞ —Å–º–µ–Ω–µ!")

# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ---
def check_users_activity():
    for chat_id, data in chat_data.items():
        main_id = data.get('main_id')
        if not main_id:
            continue
        user = data['users'].get(main_id)
        if not user:
            continue

        now = datetime.datetime.now(moscow_tz)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞
        if user.get('on_break'):
            minutes_on_break = (now - user['break_start_time']).total_seconds() / 60
            if minutes_on_break > BREAK_DURATION_MINUTES:
                try:
                    phrase = random.choice(soviet_phrases["break_over_reminder"])
                    bot.send_message(main_id, phrase)
                    user['on_break'] = False
                    user['last_voice_time'] = now
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ–Ω—Ü–µ –ø–µ—Ä–µ—Ä—ã–≤–∞: {e}")
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
        if 'last_voice_time' in user:
            minutes_passed = (now - user['last_voice_time']).total_seconds() / 60
            if minutes_passed > VOICE_TIMEOUT_MINUTES and not user.get('reminded'):
                try:
                    phrase = random.choice(soviet_phrases["voice_reminder"])
                    bot.send_message(main_id, f"{phrase}\n(–≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –Ω–∞ —Å–º–µ–Ω–µ ‚Äî {user['username']})")
                    user['reminded'] = True
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {e}")

def run_scheduler():
    schedule.every(1).minutes.do(check_users_activity)
    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == '__main__':
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –Ω–∞ —Å–º–µ–Ω–µ...")
    scheduler_thread = threading.Thread(target=run_scheduler)
    scheduler_thread.daemon = True
    scheduler_thread.start()
    bot.polling(none_stop=True)
