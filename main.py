import logging
import os
import telebot
import datetime
import pytz
import time
import schedule
import threading
import random

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
logging.basicConfig(level=logging.INFO)
BOT_TOKEN = os.getenv("BOT_TOKEN")

SHIFT_START_HOUR = 19
SHIFT_END_HOUR = 4
VOICE_TIMEOUT_MINUTES = 35
BREAK_DURATION_MINUTES = 15
EXPECTED_VOICES_PER_SHIFT = 15

ADMIN_CHAT_ID = -1002645821302  # <-- id —á–∞—Ç–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞!
shift_reports = []

moscow_tz = pytz.timezone("Europe/Moscow")
bot = telebot.TeleBot(BOT_TOKEN)

# --- –§—Ä–∞–∑—ã —Å–æ —Å–º–∞–π–ª–∏–∫–∞–º–∏ (–ø–æ 10 –≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ) ---
soviet_phrases = {
    "voice_reminder": [
        "üîî –¢–æ–≤–∞—Ä–∏—â, –ø–æ—Ä–∞ –±—ã —É–∂–µ –ø—Ä–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç! üé§",
        "üì¢ –≠—Ñ–∏—Ä –∂–¥—ë—Ç, –º–∏–∫—Ä–æ—Ñ–æ–Ω —Å–∫—É—á–∞–µ—Ç! üò¥",
        "üéôÔ∏è –ë–µ–∑ –≥–æ–ª–æ—Å–∞ ‚Äî –∫–∞–∫ –±–µ–∑ —Ö–ª–µ–±–∞! üçû",
        "‚è∞ –ù–∞–ø–æ–º–Ω—é –Ω–µ–∂–Ω–æ ‚Äî —Ç–µ–∫—Å—Ç –≤ —Å—Ç—É–¥–∏—é! üé¨",
        "üìª –ú–æ–ª—á–∞–Ω–∏–µ ‚Äî –Ω–µ –∑–æ–ª–æ—Ç–æ, –∞ —à—Ç—Ä–∞—Ñ! ü™ô",
        "üîä –í—Ä–µ–º—è –∑–≤—É—á–∞—Ç—å, –∞ –Ω–µ –º–æ–ª—á–∞—Ç—å! üó£Ô∏è",
        "üí¨ –≠–π, —Ç—ã —Ç–∞–º? –≠—Ñ–∏—Ä –ø—É—Å—Ç—É–µ—Ç! üëª",
        "üì° –ü–µ—Ä–µ–¥–∞–π —Å–ª–æ–≤–æ –≤ —ç—Ñ–∏—Ä! üì°",
        "üé§ –ì–¥–µ —Ç–≤–æ–π –≥–æ–ª–æ—Å, –≤–µ–¥—É—â–∏–π?! ü§î",
        "üõéÔ∏è –ì–æ–ª–æ—Å ‚Äî —ç—Ç–æ —Å–∏–≥–Ω–∞–ª. –ü–æ–¥–∞–π –µ–≥–æ! üõéÔ∏è",
    ],
    "scary_reminder": [
        "üòà –Ø –∑–Ω–∞—é, –≥–¥–µ —Ç—ã –∂–∏–≤—ë—à—å... –ù–µ –∑–∞—Å—Ç–∞–≤–ª—è–π –º–µ–Ω—è –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ª–∏—á–Ω–æ! üëÄ",
        "üëπ –ö—É-–∫—É! –¢—ã –µ—â—ë –∂–∏–≤? –≠—Ñ–∏—Ä –∂–¥—ë—Ç! –ù–µ –ø—Ä—è—á—å—Å—è!",
        "üï∑Ô∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ, –ø–∞—É—Ç–∏–Ω–∞ —Ç–∏—à–∏–Ω—ã –∑–∞—Ç—è–≥–∏–≤–∞–µ—Ç —ç—Ñ–∏—Ä... –°—Ä–æ—á–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ!",
        "üßü‚Äç‚ôÇÔ∏è –¢–∞–∫, –µ—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏—à—å—Å—è, –Ω–æ—á—å—é —Ç–µ–±–µ –ø—Ä–∏—Å–Ω–∏—Ç—Å—è —ç—Ñ–∏—Ä!",
        "üëæ –Ø —É–∂–µ —Ä—è–¥–æ–º... –∏ –∑–Ω–∞—é, —á—Ç–æ —Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—à—å!",
        "ü¶â –Ø —Å–ª–µ–∂—É –∑–∞ —Ç–æ–±–æ–π! –û–¥–∏–Ω —à–∞–≥ ‚Äî –∏ —ç—Ñ–∏—Ä –æ–∂–∏–≤—ë—Ç!",
        "üíÄ –ï—Å–ª–∏ –Ω–µ –∑–∞–ø–∏—à–µ—à—å –≥–æ–ª–æ—Å–æ–≤–æ–µ, —è —Ä–∞—Å—Å–∫–∞–∂—É –Ω–∞—á–∞–ª—å—Å—Ç–≤—É —Ç–≤–æ–π —Å–µ–∫—Ä–µ—Ç!",
        "üëª –ë—É—É—É! –ò—Å—á–µ–∑–Ω—É–≤—à–∏—Ö –≤–µ–¥—É—â–∏—Ö –º—ã –Ω–∞—Ö–æ–¥–∏–º –±—ã—Å—Ç—Ä–æ. –≠—Ñ–∏—Ä –∂–¥–µ—Ç —Ç–µ–±—è!",
        "üî™ –ù–µ –¥–æ–≤–æ–¥–∏ –¥–æ –∫—Ä–∞–π–Ω–æ—Å—Ç–µ–π! –ì–æ–ª–æ—Å–æ–≤–æ–µ ‚Äî –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!",
        "üßô‚Äç‚ôÇÔ∏è –ü—Ä–æ–∫–ª—è—Ç–∏–µ –º–æ–ª—á–∞–ª–∏–≤–æ–≥–æ –≤–µ–¥—É—â–µ–≥–æ —É–∂–µ –Ω–∞–≤–∏—Å–ª–æ! –°–ø–∞—Å–∏ —ç—Ñ–∏—Ä!",
    ],
    "break_acknowledgement": [
        "‚òï –•–æ—Ä–æ—à–æ, {username}, –ø–µ—Ä–µ—Ä—ã–≤ –∑–∞—Å—á–∏—Ç–∞–Ω! –ñ–¥—É –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ—é!",
        "üòé –ü—Ä–∏–Ω—è—Ç–æ, {username}, –æ—Ç–¥—ã—Ö–∞–π. –ù–æ –Ω–µ –∑–∞—Ç—è–≥–∏–≤–∞–π!",
        "üçî –ö–æ–Ω–µ—á–Ω–æ, {username}, –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!",
        "üï∞Ô∏è –î–∞–≤–∞–π, {username}, –Ω–æ —á—Ç–æ–±—ã —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç –±—ã–ª –∫–∞–∫ —à—Ç—ã–∫!",
        "ü•ó –ü–µ—Ä–µ—Ä—ã–≤ –æ–¥–æ–±—Ä–µ–Ω, {username}! –ì–ª–∞–≤–Ω–æ–µ ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è!",
        "üçµ {username}, —á–∞–π –ø–æ–ø–µ–π, –Ω–æ –ø—Ä–æ —ç—Ñ–∏—Ä –Ω–µ –∑–∞–±—É–¥—å!",
        "üßÅ –ü–µ—Ä–µ—Ä—ã–≤ ‚Äî –¥–µ–ª–æ —Å–≤—è—Ç–æ–µ, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –±–æ–¥—Ä—ã–º, {username}!",
        "ü•® –ö–æ—Ñ–µ-–ø–∞—É–∑–∞ –≤–∫–ª—é—á–µ–Ω–∞, {username}, –Ω–µ —Ä–∞—Å—Å–ª–∞–±–ª—è–π—Å—è!",
        "üç´ –°–ª–∞–¥–∫–∏–π –º–æ–º–µ–Ω—Ç, –Ω–æ –Ω–µ –∑–∞–¥–µ—Ä–∂–∏–≤–∞–π—Å—è, {username}!",
        "üçâ –û—Ç–¥—ã—Ö–∞–π, {username}, –Ω–æ —ç—Ñ–∏—Ä –≤—Å–µ–≥–¥–∞ –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ!",
    ],
    "break_over_reminder": [
        "‚è∞ –¢–∞–∫, –ø–µ—Ä–µ—Ä—ã–≤ –æ–∫–æ–Ω—á–µ–Ω! –ì–¥–µ —Ç—ã, –≥–µ—Ä–æ–π —ç—Ñ–∏—Ä–∞? ü¶∏‚Äç‚ôÇÔ∏è",
        "üö® –¢–æ–≤–∞—Ä–∏—â, –ø–æ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ! üéöÔ∏è",
        "ü§® –≠–π, 15 –º–∏–Ω—É—Ç –¥–∞–≤–Ω–æ –ø—Ä–æ—à–ª–∏! –ñ–¥—É –≤ —ç—Ñ–∏—Ä–µ! üìª",
        "üßê –ö–æ–º–∞–Ω–¥–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è, –Ω–µ –∑–∞—Ç—è–Ω—É–ª—Å—è –ª–∏ —Ç–≤–æ–π –æ—Ç–¥—ã—Ö? üëÄ",
        "‚è≥ –ü–µ—Ä–µ—Ä—ã–≤ ‚Äî —ç—Ç–æ –Ω–µ –æ—Ç–ø—É—Å–∫! –í–µ—Ä–Ω–∏—Å—å! üèÉ‚Äç‚ôÇÔ∏è",
        "üìû –ñ–¥—ë–º —Ç–µ–±—è –Ω–∞ —Å–≤—è–∑–∏! –ù–µ –æ–ø–∞–∑–¥—ã–≤–∞–π! ‚è∞",
        "üõë –í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å ‚Äî —ç—Ñ–∏—Ä –∂–¥—ë—Ç! üó£Ô∏è",
        "üìã –ü–ª–∞–Ω –Ω–µ –∂–¥–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è! üèÅ",
        "üö¶ –í—Ä–µ–º—è –±—ã—Ç—å –Ω–∞ –ø–æ—Å—Ç—É! –í —ç—Ñ–∏—Ä! üö¶",
        "üîî –ë–µ–∑ –≤–µ–¥—É—â–µ–≥–æ —ç—Ñ–∏—Ä —Å–∫—É—á–∞–µ—Ç! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è! ü•≤",
    ],
    "scolding": [
        "‚ö†Ô∏è –ù—É–∂–Ω–æ –ø–æ–¥–Ω–∞–∂–∞—Ç—å, —Ç–æ–≤–∞—Ä–∏—â! üìà",
        "üö© –ü–ª–∞–Ω –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, —É—Å–∏–ª—å—Ç–µ —Ä–∞–±–æ—Ç—É! üèÉ‚Äç‚ôÇÔ∏è",
        "‚è±Ô∏è –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —Ö—Ä–æ–º–∞–µ—Ç, –Ω–∞–≤–µ—Ä—Å—Ç–∞–π—Ç–µ —É–ø—É—â–µ–Ω–Ω–æ–µ! üî®",
        "üíº –ü—Ä–æ—à—É –±–æ–ª–µ–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç—å –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π! üìù",
        "‚õî –¢–∞–∫–∏–º–∏ —Ç–µ–º–ø–∞–º–∏ –º—ã –ø—è—Ç–∏–ª–µ—Ç–∫—É –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–º! üõ†Ô∏è",
        "üëÄ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ —É–∂–µ –Ω–∞—Å—Ç–æ—Ä–æ–∂–∏–ª–æ—Å—å! üò≥",
        "ü¶• –ù–µ —Ç–æ—Ä–º–æ–∑–∏, —ç—Ñ–∏—Ä –Ω–µ –∂–¥–µ—Ç! üèéÔ∏è",
        "üß± –ü–ª–∞–Ω —Ç—Ä–µ–±—É–µ—Ç –∫—Ä–µ–ø–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π! ü™ì",
        "ü•∂ –•–æ–ª–æ–¥–Ω–æ –±–µ–∑ —Ç–≤–æ–µ–≥–æ –≥–æ–ª–æ—Å–∞, —Å–æ–≥—Ä–µ–π —ç—Ñ–∏—Ä! üî•",
        "üéØ –¶–µ–ª—å ‚Äî —ç—Ñ–∏—Ä, –Ω–µ —Ç–µ—Ä—è–π—Å—è! üß≠",
    ],
    "praise": [
        "ü•≥ –ú–æ–ª–æ–¥–µ—Ü! –¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è –Ω–∞ –æ—Ç–ª–∏—á–Ω–æ! üëè",
        "üöÄ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω! üèÖ",
        "üî• –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! –¢—ã –Ω–∞ –≤—ã—Å–æ—Ç–µ! üèÜ",
        "üåü –ü—Ä–∏–º–µ—Ä –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí°",
        "üéâ –¢—ã –≥–µ—Ä–æ–π —ç—Ñ–∏—Ä–∞! –ë—Ä–∞–≤–æ! üé∫",
        "üí™ –õ–µ–≥–µ–Ω–¥–∞ —Å–º–µ–Ω—ã! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üèÜ",
        "üçÄ –£–¥–∞—á–∞ –≤—Å–µ–≥–¥–∞ —Å —Ç–æ–±–æ–π! üëç",
        "üòâ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–æ–≤–æ–ª—å–Ω–æ! ü•Ç",
        "ü¶∏‚Äç‚ôÇÔ∏è –¢—ã —Å—É–ø–µ—Ä–≤–µ–¥—É—â–∏–π! –ü—Ä–æ–¥–æ–ª–∂–∞–π! üí™",
        "üï∫ –¢–≤–æ–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ ‚Äî –ø—Ä–∞–∑–¥–Ω–∏–∫ –¥–ª—è —ç—Ñ–∏—Ä–∞! üéà",
    ],
    "return_success": [
        "‚úÖ –¢–æ–≤–∞—Ä–∏—â {username}, —Ä–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞ –Ω–∞ –ø–æ—Å—Ç—É! üëã",
        "üëç –û—Ç–ª–∏—á–Ω–æ, {username}! –¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤–æ–≤—Ä–µ–º—è! üïí",
        "üëè –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {username}! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º! üéß",
        "üé© –ù—É –≤–æ—Ç –∏ —Å–Ω–æ–≤–∞ –≤ —ç—Ñ–∏—Ä–µ, {username}! ü™Ñ",
        "üîô –í–µ–¥—É—â–∏–π {username} —Å–Ω–æ–≤–∞ –≤ –∏–≥—Ä–µ! üèÖ",
        "ü•Å {username} —Å–Ω–æ–≤–∞ —Å –Ω–∞–º–∏ ‚Äî –æ—Ç–ª–∏—á–Ω–æ! ü•≥",
        "üåû –†–∞–±–æ—á–∏–π –¥–µ–Ω—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, {username}! üíº",
        "üéüÔ∏è –í–∞—à–∞ —Å–º–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! {username}, –≤–ø–µ—Ä—ë–¥! üö¶",
        "üé¨ {username}, –∫–∞–º–µ—Ä–∞, –º–æ—Ç–æ—Ä ‚Äî —ç—Ñ–∏—Ä –∂–¥—ë—Ç! üé•",
        "üï∂Ô∏è {username}, —Ç—ã –∫–∞–∫ –≤—Å–µ–≥–¥–∞ –≤–æ–≤—Ä–µ–º—è! ‚è∞",
    ],
    "pain_joke": [
        "‚è∞ –¢–æ–≤–∞—Ä–∏—â, –µ—Å–ª–∏ –Ω–µ –≤–µ—Ä–Ω—ë—à—å—Å—è ‚Äî –±—É–¥–µ—Ç –æ—á–µ–Ω—å –∏ –æ—á–µ–Ω—å –±–æ–ª—å–Ω–æ! (—à—É—Ç–∫–∞ üòú) –ò–ª–∏ –¥–µ–Ω–µ–≥ –Ω–µ –ø–æ–ª—É—á–∏—à—å! üí∏",
        "‚ö° –ù–µ –∑–∞—Ç—è–≥–∏–≤–∞–π, –∏–Ω–∞—á–µ –ø—Ä–∏–¥—ë—Ç—Å—è —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å –Ω–∞ —Å—Ç–æ–ª–µ! (—à—É—Ç–∫–∞ üòÜ)",
        "üíÄ –ï—Å–ª–∏ –Ω–µ –ø—Ä–∏–¥—ë—à—å –≤–æ–≤—Ä–µ–º—è ‚Äî —à—Ç—Ä–∞—Ñ–Ω–æ–π –º–∞—Ä—à! (—à—É—Ç–∫–∞ üòÇ)",
        "ü•µ –≠—Ñ–∏—Ä –±–µ–∑ —Ç–µ–±—è —Å—Ç—Ä–∞–¥–∞–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –±—ã—Å—Ç—Ä–µ–µ! üòÑ",
        "ü©π –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –≥–æ—Ç–æ–≤–∏—Ç –≥–∏–ø—Å! –í–µ—Ä–Ω–∏—Å—å! (—à—É—Ç–∫–∞) ü¶¥",
        "üí∏ –ü—Ä–µ–º–∏—è –º–æ–∂–µ—Ç —É–ø–ª—ã—Ç—å! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è! üèä‚Äç‚ôÇÔ∏è",
        "üé≤ –ù–µ –∏—Å–ø—ã—Ç—ã–≤–∞–π —É–¥–∞—á—É ‚Äî —ç—Ñ–∏—Ä –∂–¥—ë—Ç! üé≤",
        "üéª –ë–µ–∑ —Ç–µ–±—è ‚Äî —Ç–æ–ª—å–∫–æ —Ç–∏—à–∏–Ω–∞! –í–µ—Ä–Ω–∏—Å—å! ü•≤",
        "üéØ –ï—Å–ª–∏ –Ω–µ –ø—Ä–∏–¥—ë—à—å ‚Äî –±—É–¥–µ—à—å —á–∏—Ç–∞—Ç—å —Ä–µ–∫–ª–∞–º—É –≤–µ—Å—å –¥–µ–Ω—å! (—à—É—Ç–∫–∞) üì¢",
        "üß® –ù–µ –¥–æ–≤–æ–¥–∏ –¥–æ –≤–∑—Ä—ã–≤–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è! üí£",
    ],
    "main_accepted": [
        "üéôÔ∏è –¢–æ–≤–∞—Ä–∏—â {username} –ø—Ä–∏–Ω—è—Ç –∫–∞–∫ –≥–ª–∞–≤–Ω—ã–π –Ω–∞ —Å–º–µ–Ω–µ! –¢–µ–ø–µ—Ä—å –∫–æ–Ω—Ç—Ä–æ–ª—å –∑–∞ —ç—Ñ–∏—Ä–æ–º ‚Äî —Ç–≤–æ–π –¥–æ–ª–≥. ü´°",
        "üéß –í–Ω–∏–º–∞–Ω–∏–µ, {username} ‚Äî —Ç–µ–ø–µ—Ä—å –≥–ª–∞–≤–Ω—ã–π –ø–æ —ç—Ñ–∏—Ä—É! –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –æ–≥—Ä–æ–º–Ω–∞! üö¶",
        "ü™ñ {username}, —Ç—ã –ø—Ä–∏–Ω—è—Ç –≤ —Å–º–µ–Ω—É! –ü–æ–∫–∞–∂–∏ –≤—Å–µ–º –∫–ª–∞—Å—Å! üéº",
        "üì° –ù–æ–≤—ã–π –≤–µ–¥—É—â–∏–π –≤ —ç—Ñ–∏—Ä–µ: {username}! –£–¥–∞—á–∏ –Ω–∞ –ø–æ—Å—Ç—É! üèÅ",
        "üåÖ –°–º–µ–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ç–µ–±—è, {username}! –í–ø–µ—Ä—ë–¥ –∫ —Å–≤–µ—Ä—à–µ–Ω–∏—è–º! üèÜ",
        "üèÖ –ê–ø–ª–æ–¥–∏—Å–º–µ–Ω—Ç—ã! {username} ‚Äî –≥–ª–∞–≤–Ω—ã–π –Ω–∞ –ø–æ—Å—Ç—É! üëè",
        "üõ°Ô∏è –≠—Ñ–∏—Ä –ø–æ–¥ —Ç–≤–æ–µ–π –∑–∞—â–∏—Ç–æ–π, {username} ‚Äî –Ω–µ –ø–æ–¥–≤–µ–¥–∏! üîî",
        "üë®‚Äç‚úàÔ∏è –í–µ–¥—É—â–∏–π {username} –∑–∞—Å—Ç—É–ø–∏–ª –Ω–∞ –¥–µ–∂—É—Ä—Å—Ç–≤–æ! üö®",
        "üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω —Ç–≤–æ–π, {username}! –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å! ‚è∞",
        "üïπÔ∏è {username} —Ç–µ–ø–µ—Ä—å —Ä—É–ª–∏—Ç —ç—Ñ–∏—Ä–æ–º! –í–ø–µ—Ä—ë–¥! üèéÔ∏è",
    ],
    "voice_praise": [
        "ü¶æ –ê–π, –º–∞–ª–∞–¥—Ü–∞! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üëç",
        "ü•∞ –û–π, –∫–∞–∫–æ–π —Ö–æ—Ä–æ—à–∏–π! –≠—Ñ–∏—Ä –¥–æ–≤–æ–ª–µ–Ω! üòÅ",
        "üëè –í–æ—Ç —ç—Ç–æ —Ä–∞–±–æ—Ç–∞! –ë—Ä–∞–≤–æ! üëè",
        "ü§© –¢—ã —Å–Ω–æ–≤–∞ —Å –Ω–∞–º–∏, —Å—É–ø–µ—Ä! üöÄ",
        "ü•≥ –ï—â–µ –æ–¥–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ! –ü—Ä–∞–∑–¥–Ω–∏–∫ –Ω–∞ —ç—Ñ–∏—Ä–µ! üéâ",
        "üòé –ö—Ä–∞—Å–∞–≤—á–∏–∫! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üé§",
        "üí™ –£–≤–∞–∂–∞—é —Å—Ç–∞—Ä–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å! –ú–æ–ª–æ–¥–µ—Ü! üèÖ",
        "üï∫ –í–æ—Ç —ç—Ç–æ —ç–Ω–µ—Ä–≥–∏—è! –≠—Ñ–∏—Ä –æ–∂–∏–≤–∞–µ—Ç! üíÉ",
        "üß≤ –ü—Ä–∏—Ç—è–≥–∏–≤–∞–µ—à—å —ç—Ñ–∏—Ä –∫ —Å–µ–±–µ! –°—É–ø–µ—Ä! üåü",
        "üçÄ –ö–∞–∂–¥—ã–π –≥–æ–ª–æ—Å ‚Äî —à–∞–≥ –∫ —É—Å–ø–µ—Ö—É! –ü—Ä–æ–¥–æ–ª–∂–∞–π! üèÜ",
    ],
    "too_short": [
        "‚è≤Ô∏è –û–π-–æ–π, {username}, —ç—Ç–æ –¥–∞–∂–µ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ, –∞ —à—ë–ø–æ—Ç! –ú–∏–Ω–∏–º—É–º 7 —Å–µ–∫—É–Ω–¥! ‚è∞",
        "üòÖ {username}, —Ç–∞–∫–æ–π –∫–æ—Ä–æ—Ç–∫–∏–π —ç—Ñ–∏—Ä –Ω–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è! –ü—Ä–æ–¥–ª–∏ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ!",
        "ü¶ó {username}, –Ω—É —á—Ç–æ –∑–∞ –∂–∞–¥–Ω–æ—Å—Ç—å –Ω–∞ —Å–ª–æ–≤–∞? –î–∞–≤–∞–π —Ö–æ—Ç—è –±—ã 7 —Å–µ–∫—É–Ω–¥!",
        "üîá {username}, —ç—Ñ–∏—Ä –Ω–µ —É—Å–ª—ã—à–∞–ª —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú–∞–ª–æ–≤–∞—Ç–æ –±—É–¥–µ—Ç!",
        "ü§è {username}, –º–∞–ª–æ, –µ—â—ë, –µ—â—ë! –ì–æ–ª–æ—Å–æ–≤–æ–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ–ª—å—à–µ 7 —Å–µ–∫—É–Ω–¥!",
        "üòú {username}, –Ω–µ —Ö–∞–ª—Ç—É—Ä—å, —ç—Ñ–∏—Ä –ª—é–±–∏—Ç –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã!",
        "‚è≥ {username}, –Ω–µ —É—Å–ø–µ–ª –¥–∞–∂–µ —á–∞—é –Ω–∞–ª–∏—Ç—å –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è! –î–∞–≤–∞–π –¥–ª–∏–Ω–Ω–µ–µ!",
        "ü´† {username}, —ç—Ñ–∏—Ä –Ω–µ –∑–∞—Å—á–∏—Ç–∞–ª! –ú–∏–Ω–∏–º—É–º 7 —Å–µ–∫—É–Ω–¥!",
        "ü¶â {username}, —Å–æ–≤–∞ –Ω–µ —É—Å–ø–µ–ª–∞ –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è –æ—Ç —Ç–∞–∫–æ–≥–æ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!",
        "üì¢ {username}, –≥–æ–ª–æ—Å–æ–≤–æ–π ‚Äî —ç—Ç–æ –Ω–µ –ø–∏–∫–∞–Ω—å–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞! –î–∞–≤–∞–π –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É!",
    ],
}

welcome_phrases = [
    "üëã –°–∞–ª–∞–º, –≤–µ–¥—É—â–∏–π! –Ø –±—É–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—á–∏—Ç–∞—Ç—å —Ç–≤–æ–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –í –∫–æ–Ω—Ü–µ —Å–º–µ–Ω—ã –æ—Ç—á—ë—Ç –ø—Ä–∏–¥—ë—Ç —Å—é–¥–∞ –∂–µ. üìä",
    "üõ∞Ô∏è –ù–∞ —Å–≤—è–∑–∏, —Ç–æ–≤–∞—Ä–∏—â! –û—Ç–ø—Ä–∞–≤–ª—è–π –≥–æ–ª–æ—Å–æ–≤—ã–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç, –∏ —è –∑–∞ –≤—Å–µ–º –ø—Ä–æ—Å–ª–µ–∂—É. –û—Ç—á—ë—Ç –±—É–¥–µ—Ç –∑–¥–µ—Å—å –∂–µ, –≤ –∫–æ–Ω—Ü–µ —Å–º–µ–Ω—ã. üìë",
    "üö¶ –ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Ä–∞–±–æ—Ç–µ! –í —ç—Ç–æ–º —á–∞—Ç–µ —è —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–≤–∏–∑–æ—Ä: —Å—á–∏—Ç–∞—é –≥–æ–ª–æ—Å–æ–≤—ã–µ –∏ —Å–ª–µ–∂—É –∑–∞ —ç—Ñ–∏—Ä–æ–º. üïµÔ∏è‚Äç‚ôÇÔ∏è",
    "üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ ‚Äî —Ç–≤–æ—è —Å–∏–ª–∞, –∞ –æ—Ç—á—ë—Ç—ã –º–æ–∏! –î–µ—Ä–∑–∞–π! üí™",
    "üìª –°–ª—É—à–∞—é —ç—Ñ–∏—Ä, –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞—é —É—Å–ø–µ—Ö–∏! –î–∞–≤–∞–π –≥–æ–ª–æ—Å–æ–≤—ã–µ! üéôÔ∏è",
    "üìù –í–µ–¥—É –¥–Ω–µ–≤–Ω–∏–∫ —ç—Ñ–∏—Ä–∞! –í—Å—ë –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º! üîé",
    "üéõÔ∏è –í—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∂–∞—Ç—ã ‚Äî –ø–æ–µ—Ö–∞–ª–∏! –ñ–¥—É —Ç–≤–æ–∏—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö! üö¶",
    "üß∞ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∞–∫—Ç–∏–≤–µ–Ω! –†–∞–±–æ—Ç–∞–π –Ω–∞ —ç—Ñ–∏—Ä! üõ†Ô∏è",
    "üíº –û—Ç—á—ë—Ç–Ω–æ—Å—Ç—å ‚Äî –º–æ—ë –≤—Å—ë! –¢—ã –≥–ª–∞–≤–Ω–æ–µ ‚Äî –≥–æ–≤–æ—Ä–∏! üó£Ô∏è",
    "üë®‚Äçüîß –í–µ–¥—É—â–∏–π, —è –Ω–∞ —Å—Ç—Ä–∞–∂–µ! –°—á–∏—Ç–∞—é —Ç–≤–æ–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ! üìà",
]

# --- –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–µ—Ä–µ—Ä—ã–≤–∞ ---
BREAK_KEYWORDS = [
    "–ø–µ—Ä–µ—Ä—ã–≤", "–ø–µ—Ä–µ–∫—É—Ä", "–ø–æ–∫—É—Ä–∏—Ç—å", "—è –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤", "—è –Ω–∞ –æ–±–µ–¥", "–æ–±–µ–¥", "—è –∫—É—à–∞—Ç—å",
    "–∫—É—à–∞—Ç—å", "–µ–º", "–µ—Å—Ç—å", "–æ—Ç–¥–æ—Ö–Ω—É—Ç—å", "–ø–∏—Ç—å", "–∫–æ—Ñ–µ", "—á–∞–π", "–æ—Ç–æ–π—Ç–∏", "–æ—Ç–æ–π–¥—É"
]

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö ---
chat_data = {}

def is_shift_active():
    now = datetime.datetime.now(moscow_tz)
    if SHIFT_START_HOUR > SHIFT_END_HOUR:
        return now.hour >= SHIFT_START_HOUR or now.hour < SHIFT_END_HOUR
    return SHIFT_START_HOUR <= now.hour < SHIFT_END_HOUR

def get_username(message):
    if message.from_user.username:
        return f"@{message.from_user.username}"
    return message.from_user.first_name

def get_user_by_username(users_dict, username):
    for uid, info in users_dict.items():
        if info['username'].lower() == username.lower():
            return uid, info
    return None, None

@bot.message_handler(content_types=['voice'])
def handle_voice_message(message):
    if message.chat.id == ADMIN_CHAT_ID:
        return
    chat_id = message.chat.id
    user_id = message.from_user.id
    username = get_username(message)
    voice_duration = message.voice.duration

    now = datetime.datetime.now(moscow_tz)
    if chat_id not in chat_data:
        chat_data[chat_id] = {'main_id': None, 'main_username': None, 'users': {}, 'shift_start': now}

    users = chat_data[chat_id]['users']
    if user_id not in users:
        users[user_id] = {'username': username, 'count': 0, 'reminded': False, 'on_break': False, 'breaks_count': 0, 'late_returns': 0}

    user = users[user_id]

    # --- –ù–ï –ó–ê–°–ß–ò–¢–´–í–ê–ï–ú –ö–û–†–û–¢–ö–ò–ï –ì–û–õ–û–°–û–í–´–ï (<7 —Å–µ–∫) ---
    if voice_duration < 7:
        if chat_data[chat_id]['main_id'] == user_id:
            phrase = random.choice(soviet_phrases["too_short"]).format(username=username, seconds=voice_duration)
            bot.send_message(chat_id, phrase)
        return

    user['count'] += 1
    user['last_voice_time'] = now
    user['reminded'] = False

    # –ï—Å–ª–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –Ω–µ—Ç, –Ω–∞–∑–Ω–∞—á–∞–µ–º
    if chat_data[chat_id]['main_id'] is None:
        chat_data[chat_id]['main_id'] = user_id
        chat_data[chat_id]['main_username'] = username
        chat_data[chat_id]['shift_start'] = now
        users[user_id]['last_voice_time'] = now  # –§–∏–∫—Å: —Å—Ç–∞–≤–∏–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç—Å—á—ë—Ç–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è —Å—Ä–∞–∑—É –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏!
        text = random.choice(soviet_phrases["main_accepted"]).format(username=username)
        bot.send_message(chat_id, text)
    elif chat_data[chat_id]['main_id'] == user_id and user['count'] > 1:
        # –°–æ –≤—Ç–æ—Ä–æ–≥–æ –∏ –¥–∞–ª–µ–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ ‚Äî —à—É—Ç–ª–∏–≤–∞—è –ø–æ—Ö–≤–∞–ª–∞
        praise = random.choice(soviet_phrases["voice_praise"])
        bot.send_message(chat_id, praise)

    # –ï—Å–ª–∏ –≤–µ–¥—É—â–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å –ø–µ—Ä–µ—Ä—ã–≤–∞
    if user.get('on_break'):
        break_start = user.get('break_start_time')
        if break_start:
            minutes_on_break = (user['last_voice_time'] - break_start).total_seconds() / 60
            if minutes_on_break > BREAK_DURATION_MINUTES:
                user['late_returns'] += 1
        user['on_break'] = False
        bot.send_message(chat_id, random.choice(soviet_phrases["return_success"]).format(username=username))

    logging.info(f"üéß –ì–æ–ª–æ—Å–æ–≤–æ–µ –æ—Ç {username} –≤ —á–∞—Ç–µ {chat_id}. –í—Å–µ–≥–æ: {users[user_id]['count']}")

def break_requested(text):
    lowered = text.lower()
    return any(word in lowered for word in BREAK_KEYWORDS)

@bot.message_handler(func=lambda m: m.text and break_requested(m.text))
def handle_break_request(message):
    if message.chat.id == ADMIN_CHAT_ID:
        return
    # –ù–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!
    if getattr(message, "forward_from", None) or getattr(message, "forward_from_chat", None):
        return

    chat_id = message.chat.id
    user_id = message.from_user.id
    username = get_username(message)

    if chat_id not in chat_data or chat_data[chat_id].get('main_id') != user_id:
        bot.reply_to(message, "‚õî –ü–µ—Ä–µ—Ä—ã–≤ –º–æ–∂–Ω–æ –±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –Ω–∞ —Å–º–µ–Ω–µ! ü¶ª")
        return

    user = chat_data[chat_id]['users'][user_id]
    user['breaks_count'] += 1
    user['on_break'] = True
    user['break_start_time'] = datetime.datetime.now(moscow_tz)
    ack = random.choice(soviet_phrases["break_acknowledgement"]).format(username=username)
    bot.reply_to(message, ack)

@bot.message_handler(commands=["obed"])
def obed_command(message):
    if message.chat.id == ADMIN_CHAT_ID:
        return
    handle_break_request(message)

@bot.message_handler(commands=["restart"])
def restart_main(message):
    if message.chat.id == ADMIN_CHAT_ID:
        return
    chat_id = message.chat.id
    if chat_id in chat_data:
        chat_data[chat_id]['main_id'] = None
        chat_data[chat_id]['main_username'] = None
        chat_data[chat_id]['shift_start'] = datetime.datetime.now(moscow_tz)
        bot.send_message(chat_id, "üîÑ –°–º–µ–Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞. –ñ–¥—É –Ω–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ! üï∞Ô∏è")

@bot.message_handler(commands=["karaoke"])
def karaoke_assign(message):
    if message.chat.id == ADMIN_CHAT_ID:
        return
    chat_id = message.chat.id
    if not message.text:
        bot.reply_to(message, "üìù –§–æ—Ä–º–∞—Ç: /karaoke @username")
        return
    try:
        cmd, username_tag = message.text.strip().split()
        username = username_tag.strip().lstrip('@')
    except Exception:
        bot.reply_to(message, "üìù –§–æ—Ä–º–∞—Ç: /karaoke @username")
        return
    if chat_id not in chat_data or not chat_data[chat_id]['users']:
        bot.reply_to(message, "ü§∑‚Äç‚ôÇÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return
    users = chat_data[chat_id]['users']
    uid, userinfo = get_user_by_username(users, f"@{username}")
    if not uid:
        bot.reply_to(message, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –ø—Ä–∏—Å–ª–∞–≤—à–∏—Ö –≥–æ–ª–æ—Å–æ–≤–æ–µ.")
        return
    chat_data[chat_id]['main_id'] = uid
    chat_data[chat_id]['main_username'] = userinfo['username']
    users[uid]['last_voice_time'] = datetime.datetime.now(moscow_tz)  # –§–∏–∫—Å: —Å–±—Ä–æ—Å –æ—Ç—Å—á—ë—Ç–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –≥–ª–∞–≤–Ω–æ–≥–æ!
    bot.send_message(chat_id, f"üé§ –¢–µ–ø–µ—Ä—å —Ç–æ–≤–∞—Ä–∏—â {userinfo['username']} ‚Äî –≥–ª–∞–≤–Ω—ã–π –Ω–∞ —Å–º–µ–Ω–µ! ü´°")

def get_reminder_phrase():
    # 80% –æ–±—ã—á–Ω—ã–µ, 20% —É—Å—Ç—Ä–∞—à–∞—é—â–∏–µ
    if random.random() < 0.2:
        return random.choice(soviet_phrases["scary_reminder"])
    else:
        return random.choice(soviet_phrases["voice_reminder"])

def check_users_activity():
    for chat_id, data in chat_data.items():
        main_id = data.get('main_id')
        if not main_id:
            continue
        user = data['users'].get(main_id)
        if not user:
            continue

        now = datetime.datetime.now(moscow_tz)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞
        if user.get('on_break'):
            minutes_on_break = (now - user['break_start_time']).total_seconds() / 60
            if minutes_on_break > BREAK_DURATION_MINUTES and not user.get('reminded'):
                try:
                    phrase = random.choice(soviet_phrases["pain_joke"])
                    bot.send_message(chat_id, phrase)
                    user['reminded'] = True
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ–Ω—Ü–µ –ø–µ—Ä–µ—Ä—ã–≤–∞: {e}")
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
        if 'last_voice_time' in user:
            minutes_passed = (now - user['last_voice_time']).total_seconds() / 60
            if minutes_passed > VOICE_TIMEOUT_MINUTES and not user.get('reminded'):
                try:
                    phrase = get_reminder_phrase()
                    bot.send_message(chat_id, phrase)
                    user['reminded'] = True
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {e}")

@bot.message_handler(commands=["start", "help"])
def send_welcome(message):
    if message.chat.id == ADMIN_CHAT_ID:
        return
    welcome_message = random.choice(welcome_phrases)
    bot.reply_to(message, welcome_message)

@bot.message_handler(commands=["–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π", "promezhut"])
def send_interim_report(message):
    if message.chat.id == ADMIN_CHAT_ID:
        return
    chat_id = message.chat.id
    if chat_id not in chat_data:
        bot.send_message(chat_id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–º–µ–Ω–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return

    data = chat_data[chat_id]
    main_id = data.get('main_id')
    users = data.get('users', {})
    main_user = users.get(main_id)

    if not main_user:
        bot.send_message(chat_id, "–ì–ª–∞–≤–Ω—ã–π –≤–µ–¥—É—â–∏–π –µ—â—ë –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.")
        return

    breaks_count = main_user.get('breaks_count', 0)
    late_returns = main_user.get('late_returns', 0)
    said_count = main_user.get('count', 0)
    perc = round(said_count / EXPECTED_VOICES_PER_SHIFT * 100)
    username = main_user.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

    report_lines = [
        f"üìã #–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π_–æ—Ç—á–µ—Ç ({data['shift_start'].strftime('%d.%m.%Y')})",
        f"üé§ –í–µ–¥—É—â–∏–π: {username}",
        f"üó£Ô∏è –ì–æ–ª–æ—Å–æ–≤—ã—Ö: {said_count} –∏–∑ {EXPECTED_VOICES_PER_SHIFT} ({perc}%)",
        f"‚òï –ü–µ—Ä–µ—Ä—ã–≤–æ–≤: {breaks_count}",
        f"‚è≥ –ó–∞–¥–µ—Ä–∂–µ–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞: {late_returns}",
    ]

    bot.send_message(chat_id, "\n".join(report_lines))

def send_end_of_shift_reports():
    now = datetime.datetime.now(moscow_tz)
    report_date = chat_data[list(chat_data)[0]]['shift_start'].strftime("%d.%m.%Y") if chat_data else now.strftime("%d.%m.%Y")

    for chat_id, data in chat_data.items():
        users = data.get('users')
        main_id = data.get('main_id')
        main_user = users.get(main_id)
        if not main_user:
            continue

        breaks_count = main_user.get('breaks_count', 0)
        late_returns = main_user.get('late_returns', 0)
        said_count = main_user.get('count', 0)
        perc = round(said_count / EXPECTED_VOICES_PER_SHIFT * 100)
        praise = ""
        if perc >= 80:
            praise = "\n\n" + random.choice(soviet_phrases["praise"])
        elif perc >= 50:
            praise = "\n\n" + random.choice(soviet_phrases["scolding"])
        elif perc < 50:
            praise = "\n\n‚ö†Ô∏è –°–º–µ–Ω–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞, —ç—Ñ–∏—Ä –±—ã–ª —Å–ª–∏—à–∫–æ–º —Ç–∏—Ö–∏–º!"

        report_lines = [
            f"üìã #–û—Ç—á–µ—Ç_–¢–µ–∫—Å—Ç_–í–µ–¥—É—â–µ–≥–æ ({data['shift_start'].strftime('%d.%m.%Y')})",
            f"üè¢ –ß–∞—Ç: {bot.get_chat(chat_id).title if hasattr(bot.get_chat(chat_id), 'title') else chat_id}",
            f"üé§ –í–µ–¥—É—â–∏–π: {main_user['username']}",
            f"üó£Ô∏è –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö: {said_count} –∏–∑ {EXPECTED_VOICES_PER_SHIFT}",
            f"‚òï –ü–µ—Ä–µ—Ä—ã–≤–æ–≤: {breaks_count}",
            f"‚è≥ –ó–∞–¥–µ—Ä–∂–µ–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞: {late_returns}",
            praise
        ]
        final_report = "\n".join([line for line in report_lines if line.strip()])
        try:
            bot.send_message(chat_id, final_report)
        except Exception as e:
            logging.error(str(e))

        try:
            chat_title = bot.get_chat(chat_id).title if hasattr(bot.get_chat(chat_id), 'title') else str(chat_id)
        except:
            chat_title = str(chat_id)
        shift_reports.append({
            "chat_id": chat_id,
            "chat_title": chat_title,
            "date": data['shift_start'].strftime("%d.%m.%Y"),
            "report": final_report
        })
    chat_data.clear()

def get_official_conclusion(perc, late_returns):
    if perc >= 100:
        return "–ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é."
    elif perc >= 80:
        return "–ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω —á–∞—Å—Ç–∏—á–Ω–æ, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–æ—è–≤–∏–ª –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É."
    elif perc >= 50:
        return "–ü–ª–∞–Ω –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
    else:
        return "–ü–ª–∞–Ω –ø—Ä–æ–≤–∞–ª–µ–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∏ —Å—Ç—Ä–æ–≥–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å."

def send_admin_summary():
    if not shift_reports:
        return
    admin_report_phrases = [
        "@nilfts –Ø –≤—Å–µ –ø—Ä–æ –Ω–∏—Ö –∑–Ω–∞—é! üïµÔ∏è‚Äç‚ôÇÔ∏è –í–æ—Ç –∫–∞–∫ –æ–Ω–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏:",
        "@nilfts –í—Å—ë –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º! –í–æ—Ç —Å–≤–µ–∂–∏–π –æ—Ç—á—ë—Ç –ø–æ —Å–º–µ–Ω–µ:",
        "@nilfts –î–æ–∫–ª–∞–¥—ã–≤–∞—é –æ —Ä–∞–±–æ—Ç–µ –∫–æ–º–∞–Ω–¥—ã! –°–º–æ—Ç—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:",
        "@nilfts –ü—Ä–æ–≤–µ—Ä–∏–ª –≤—Å–µ—Ö –∫–∞–∫ –Ω–∞–¥–æ ‚Äî –¥–µ—Ä–∂—É –æ—Ç—á—ë—Ç:",
        "@nilfts –í–Ω–∏–º–∞–Ω–∏–µ! –°–≤–æ–¥–∫–∞ –ø–æ —Å–º–µ–Ω–µ –≥–æ—Ç–æ–≤–∞:",
        "@nilfts –û—Ç—á—ë—Ç –ø–æ —Å–º–µ–Ω–µ –∫–∞–∫ –Ω–∞ –ª–∞–¥–æ–Ω–∏! –í–æ—Ç –¥–µ—Ç–∞–ª–∏:",
        "@nilfts –í—Å—ë –∑–∞–ø–∏—Å–∞–ª ‚Äî –≤–æ—Ç –∫–∞–∫ —Ç—Ä—É–¥–∏–ª–∏—Å—å:",
        "@nilfts –í–æ—Ç –∏—Ö –ø–æ–¥–≤–∏–≥–∏ –∑–∞ —Å–º–µ–Ω—É! –°–º–æ—Ç—Ä–∏–º:",
        "@nilfts –û—Ç—á—ë—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –º–µ—Å—Ç–µ:",
        "@nilfts –í—Å—ë –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º, –≤–æ—Ç –∫–∞–∫ –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞–ª–∏:",
    ]
    intro = random.choice(admin_report_phrases)
    report_lines = [intro, ""]
    for item in shift_reports:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        lines = item["report"].splitlines()
        said_count = 0
        expected = EXPECTED_VOICES_PER_SHIFT
        late_returns = 0
        for line in lines:
            if "–í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö" in line:
                try:
                    said_count = int(line.split(":")[1].split("–∏–∑")[0].strip())
                    expected = int(line.split("–∏–∑")[1].strip())
                except Exception:
                    pass
            if "–ó–∞–¥–µ—Ä–∂–µ–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞" in line:
                try:
                    late_returns = int(line.split(":")[1].strip())
                except Exception:
                    pass
        perc = round(said_count / expected * 100) if expected else 0
        conclusion = get_official_conclusion(perc, late_returns)
        report_lines.append(item["report"])
        report_lines.append(conclusion)
        report_lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏
    summary = "\n".join(report_lines)
    try:
        bot.send_message(ADMIN_CHAT_ID, summary, parse_mode="HTML")
    except Exception as e:
        logging.error(f"Admin summary error: {e}")
    shift_reports.clear()

@bot.message_handler(commands=["–æ—Ç—á–µ—Ç", "otchet"])
def send_manual_admin_report(message):
    # –ú–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –≤ –ª—é–±–æ–º —á–∞—Ç–µ: –æ—Ç—á—ë—Ç —É–π–¥—ë—Ç –∏ –≤ —á–∞—Ç, –∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É
    if message.chat.id == ADMIN_CHAT_ID:
        send_admin_summary()
        bot.reply_to(message, "–û—Ç—á—ë—Ç –ø–æ —Å–º–µ–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É.")
    else:
        send_end_of_shift_reports()
        send_admin_summary()
        bot.reply_to(message, "–û—Ç—á—ë—Ç –ø–æ —Å–º–µ–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç —á–∞—Ç –∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É.")

def run_scheduler():
    schedule.every(1).minutes.do(check_users_activity)
    schedule.every().day.at("01:01").do(send_end_of_shift_reports)
    schedule.every().day.at("09:00").do(send_admin_summary)
    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == '__main__':
    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –Ω–∞ —Å–º–µ–Ω–µ... üéôÔ∏è")
    scheduler_thread = threading.Thread(target=run_scheduler)
    scheduler_thread.daemon = True
    scheduler_thread.start()
    while True:
        try:
            bot.polling(none_stop=True, timeout=60, long_polling_timeout=60)
        except Exception as e:
            logging.error(f"Polling exception: {e}")
            time.sleep(10)
