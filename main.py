# main.py
import telebot
import threading
import logging
import json
import os
from dataclasses import asdict
from flask import Flask
from datetime import datetime

# === –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –º–æ–¥—É–ª–µ–π ===
from config import BOT_TOKEN, CHAT_CONFIG_FILE, AD_TEMPLATES_FILE
from state import chat_configs, ad_templates, chat_data, user_history, data_lock
from utils import load_json_data
import handlers
from admin_panel import register_admin_panel_handlers
from scheduler import run_scheduler
from state_manager import load_state
from models import ShiftData, UserData
from database_manager import db  # –ù–æ–≤—ã–π database manager

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
# –ò–ó–ú–ï–ù–ï–ù–û: –£–±—Ä–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç json_encoder, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–æ–∫–µ–Ω–∞ ===
if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE" or not BOT_TOKEN:
    logging.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env")
    exit(1)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞
if ":" not in BOT_TOKEN:
    logging.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞! –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å ':'")
    exit(1)

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="Markdown")

# Health check –¥–ª—è Railway
health_app = Flask(__name__)

@health_app.route('/health')
def health_check():
    """Health check endpoint –¥–ª—è Railway."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_status = "connected"
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î
            if hasattr(db, 'test_connection'):
                db.test_connection()
            else:
                # Fallback —Ç–µ—Å—Ç
                db.get_user_stats(123456)  # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∑–∞–ø—Ä–æ—Å
        except Exception as db_error:
            logging.warning(f"Database test failed: {db_error}")
            db_status = "disconnected"
        
        return {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "bot_running": True,
            "database": db_status
        }
    except Exception as e:
        logging.error(f"Health check failed: {e}")
        return {
            "status": "unhealthy",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }, 503

@health_app.route('/')
def root_check():
    """Root endpoint –¥–ª—è Railway (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ Railway –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä–µ–Ω—å)."""
    return health_check()

def run_health_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç health check —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    try:
        port = int(os.environ.get('PORT', 8000))  # –ò–∑–º–µ–Ω—è–µ–º –Ω–∞ 8000
        logging.info(f"üåê –ó–∞–ø—É—Å–∫ health —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        health_app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ health —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        raise

# === –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ===
def load_all_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    global chat_data, user_history
    
    raw_configs = load_json_data(CHAT_CONFIG_FILE, {})
    chat_configs.update({int(k): v for k, v in raw_configs.items()})
    
    ad_templates.update(load_json_data(AD_TEMPLATES_FILE, {}))
    logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(chat_configs)} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —á–∞—Ç–æ–≤.")

    loaded_chat_data_raw, loaded_user_history_raw = load_state()
    
    temp_chat_data = {}
    for chat_id, shift_dict in loaded_chat_data_raw.items():
        try:
            users_in_shift = {int(uid): UserData(**udict) for uid, udict in shift_dict.get('users', {}).items()}
            shift_dict['users'] = users_in_shift
            temp_chat_data[int(chat_id)] = ShiftData(**shift_dict)
        except (TypeError, KeyError) as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...")
            continue
    
    with data_lock:
        chat_data.clear()
        chat_data.update(temp_chat_data)
        user_history.clear()
        user_history.update(loaded_user_history_raw)

    if chat_data:
        logging.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(chat_data)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞.")


# === –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ===
def start_background_tasks():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    threading.Thread(target=run_scheduler, args=(bot,), daemon=True).start()

# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == "__main__":
    try:
        logging.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ï–í–ì–ï–ù–ò–ß...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        load_all_data()
        logging.info("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            db.test_connection()
            logging.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        except Exception as db_error:
            logging.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {db_error}")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        handlers.register_handlers(bot)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–æ–¥—É–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–≤–∫–ª—é—á–∞—è wizards)
        register_admin_panel_handlers(bot)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        logging.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        start_background_tasks()
        logging.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º health check —Å–µ—Ä–≤–µ—Ä (–í–ê–ñ–ù–û: –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–º –¥–ª—è Railway)
        health_thread = threading.Thread(target=run_health_server, daemon=True)
        health_thread.start()
        logging.info("‚úÖ Health check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        
        # –î–∞–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä—É –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        import time
        time.sleep(2)
        
        logging.info("üéØ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling –±–æ—Ç–∞
        bot.polling(none_stop=True)
        
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        raise
