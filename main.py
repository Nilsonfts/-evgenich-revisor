# -*- coding: utf-8 -*-
"""
–ö–∞–Ω–æ–Ω–∏—á–Ω–∞—è —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞, –≤–∫–ª—é—á–∞—é—â–∞—è –≤—Å–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏:
- –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å
- HR-—Ñ—É–Ω–∫—Ü–∏–∏ (—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞, –∞–Ω–∞–ª–∏–∑)
- –£–º–Ω–æ–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π
- –°–∏—Å—Ç–µ–º–∞ "–ë–û–°–°–ê" –∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
"""

import logging
import os
import telebot
import datetime
import pytz
import time
import schedule
import threading
import random
import re
import csv
from typing import Dict, Optional, List, Tuple
from telebot import types
from functools import wraps

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—Ä–∞–∑—ã –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from phrases import (
    welcome_phrases, soviet_phrases, duty_call_phrases, duty_late_phrases,
    BREAK_KEYWORDS, RETURN_CONFIRM_WORDS, ACHIEVEMENTS
)

# ========================================
#           –ù–ê–°–¢–†–û–ô–ö–ò –ò –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
# ========================================
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s", handlers=[logging.FileHandler("bot.log", encoding="utf-8"), logging.StreamHandler()])
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN: raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

BOSS_ID = 196614680
ADMIN_REPORT_CHAT_ID = -1002645821302

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–º–µ–Ω—ã
VOICE_TIMEOUT_MINUTES = 40
EXPECTED_VOICES_PER_SHIFT = 15
MIN_VOICE_SECONDS = 7
VOICE_COOLDOWN_SECONDS = 120
BREAK_DURATION_MINUTES = 15
BREAK_DELAY_MINUTES = 60

moscow_tz = pytz.timezone("Europe/Moscow")
bot = telebot.TeleBot(BOT_TOKEN, threaded=False)
chat_data: Dict[int, dict] = {}
user_history: Dict[int, List[str]] = {}

# ========================================
#           –î–ï–ö–û–†–ê–¢–û–†–´ –ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ========================================
def is_admin(user_id, chat_id):
    if user_id == BOSS_ID: return True
    try:
        return user_id in [admin.user.id for admin in bot.get_chat_administrators(chat_id)]
    except:
        return False

def admin_required(func):
    @wraps(func)
    def wrapper(message):
        if not is_admin(message.from_user.id, message.chat.id):
            bot.reply_to(message, "‚õî –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞.")
            return
        return func(message)
    return wrapper

def get_username(user) -> str:
    return f"@{user.username}" if user.username else user.first_name

def init_user_data(user_id, username):
    return {
        'username': username, 'count': 0, 'on_break': False, 'breaks_count': 0,
        'late_returns': 0, 'last_voice_time': None, 'last_break_time': None,
        'pre_return_warning_sent': False, 'reminder_sent_at': None, 'response_times': [],
        'achievements': set(), 'voice_deltas': [], 'voice_durations': [], 'kudos': 0,
        'in_training': False, 'first_voice_time': None
    }

def handle_user_return(chat_id, user_id):
    user = chat_data.get(chat_id, {}).get('users', {}).get(user_id)
    if not user or not user.get('on_break'): return

    now = datetime.datetime.now(moscow_tz)
    break_duration_minutes = (now - user['break_start_time']).total_seconds() / 60
    
    user['on_break'] = False
    user['waiting_return_confirm'] = False
    
    if break_duration_minutes > BREAK_DURATION_MINUTES:
        user['late_returns'] += 1
        bot.send_message(chat_id, f"‚úÖ {user['username']}, —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã –æ–ø–æ–∑–¥–∞–ª–∏ –Ω–∞ {int(break_duration_minutes - BREAK_DURATION_MINUTES)} –º–∏–Ω.")
    else:
        bot.send_message(chat_id, f"üëç {user['username']}, —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ú–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤–æ–≤—Ä–µ–º—è.")

    save_history_event(chat_id, user_id, user['username'], f"–í–µ—Ä–Ω—É–ª—Å—è —Å –ø–µ—Ä–µ—Ä—ã–≤–∞ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {break_duration_minutes:.1f} –º–∏–Ω)")
    fake_message = types.SimpleNamespace(chat=types.SimpleNamespace(id=chat_id), from_user=types.SimpleNamespace(id=user_id))
    show_menu(fake_message)


def get_chat_title(chat_id: int) -> str:
    try:
        title = bot.get_chat(chat_id).title
        return title if title else str(chat_id)
    except: return str(chat_id)

def save_history_event(chat_id, user_id, username, event_description):
    if chat_id not in user_history: user_history[chat_id] = []
    now_str = datetime.datetime.now(moscow_tz).strftime('%Y-%m-%d %H:%M:%S')
    user_history[chat_id].append(f"{now_str} | {username} ({user_id}) | {event_description}")
    logging.info(f"HISTORY [{get_chat_title(chat_id)}]: {username} - {event_description}")

def generate_progress_bar(current, goal, length=10):
    if goal == 0: return "[----------] 0%"
    percent = int((current / goal) * 100)
    filled_length = int(length * current // goal)
    bar = '‚ñà' * filled_length + '‚îÄ' * (length - filled_length)
    return f"[{bar}] {percent}%"

# ========================================
#           –ö–õ–ê–í–ò–ê–¢–£–†–´ –ò –ù–ê–í–ò–ì–ê–¶–ò–Ø
# ========================================
def create_contextual_keyboard(chat_id, user_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False, row_width=2)
    current_main_id = chat_data.get(chat_id, {}).get('main_id')
    user_data = chat_data.get(chat_id, {}).get('users', {}).get(user_id, {})
    
    if current_main_id is None:
        markup.add(types.KeyboardButton("üöÄ –í—Å—Ç–∞—Ç—å –≤ —Å–º–µ–Ω—É"))

    if current_main_id == user_id:
        if user_data.get('on_break'):
            markup.add(types.KeyboardButton("‚úÖ –Ø –≤–µ—Ä–Ω—É–ª—Å—è"))
        else:
            markup.add(types.KeyboardButton("‚òïÔ∏è –£–π—Ç–∏ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤"))

    markup.add(types.KeyboardButton("‚ÑπÔ∏è –°–≤–æ–¥–∫–∞ –ø–æ —Å–º–µ–Ω–µ"), types.KeyboardButton("‚≠êÔ∏è –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    
    if is_admin(user_id, chat_id):
        markup.add(types.KeyboardButton("üö® –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–≥—É–ª—å—â–∏–∫–∞–º"), types.KeyboardButton("üïµÔ∏è –ê—É–¥–∏—Ç —Å–º–µ–Ω—ã"))
    
    markup.add(types.KeyboardButton("üÜò –ü–æ–º–æ—â—å"), types.KeyboardButton("–°–∫—Ä—ã—Ç—å –º–µ–Ω—é"))
    return markup


# ========================================
#           –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# ========================================
@bot.message_handler(commands=['start'])
def handle_start(message):
    chat_id = message.chat.id
    from_user = message.from_user
    username = get_username(from_user)

    if chat_id not in chat_data:
        chat_data[chat_id] = {'main_id': None, 'users': {}, 'shift_start': datetime.datetime.now(moscow_tz)}
    
    if chat_data[chat_id].get('main_id') is not None:
        bot.reply_to(message, f"–°–º–µ–Ω–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞. –¢–µ–∫—É—â–∏–π –≥–ª–∞–≤–Ω—ã–π: {chat_data[chat_id]['main_username']}.")
        return

    users = chat_data[chat_id]['users']
    if from_user.id not in users:
        users[from_user.id] = init_user_data(from_user.id, username)

    chat_data[chat_id]['main_id'] = from_user.id
    chat_data[chat_id]['main_username'] = username
    
    bot.send_message(chat_id, f"üëë {username}, –≤—ã –∑–∞—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ —Å–º–µ–Ω—É! –£–¥–∞—á–∏!")
    show_menu(message)


@bot.message_handler(commands=['menu'])
def show_menu(message):
    keyboard = create_contextual_keyboard(message.chat.id, message.from_user.id)
    bot.send_message(message.chat.id, "–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)

@bot.message_handler(func=lambda m: m.text == "–°–∫—Ä—ã—Ç—å –º–µ–Ω—é")
def hide_menu(message):
    bot.send_message(message.chat.id, "–ú–µ–Ω—é —Å–∫—Ä—ã—Ç–æ. –í—ã–∑–æ–≤–∏—Ç–µ /menu, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞.", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(func=lambda m: m.text == "üöÄ –í—Å—Ç–∞—Ç—å –≤ —Å–º–µ–Ω—É")
def menu_take_shift(message):
    handle_start(message)

@bot.message_handler(func=lambda m: m.text == "‚òïÔ∏è –£–π—Ç–∏ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤")
def menu_take_break(message):
    handle_break_request(message)

@bot.message_handler(func=lambda m: m.text == "‚úÖ –Ø –≤–µ—Ä–Ω—É–ª—Å—è")
def menu_return_from_break(message):
    handle_user_return(message.chat.id, message.from_user.id)

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é)

@bot.message_handler(content_types=['voice'])
def handle_voice_message(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    username = get_username(message.from_user)
    now = datetime.datetime.now(moscow_tz)

    if chat_id not in chat_data:
        chat_data[chat_id] = {'main_id': None, 'users': {}, 'shift_start': now, 'chat_title': get_chat_title(chat_id)}
    if user_id not in chat_data[chat_id]['users']:
        chat_data[chat_id]['users'][user_id] = init_user_data(user_id, username)
    user = chat_data[chat_id]['users'][user_id]
    
    if user['in_training']:
        bot.reply_to(message, f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: –ø–æ–ª—É—á–µ–Ω–æ –ì–°, –¥–ª–∏–Ω–∞ {message.voice.duration} —Å–µ–∫.")
        return

    if user.get('on_break'):
        handle_user_return(chat_id, user_id)

    # ... (–≤—Å—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ì–°)

def handle_break_request(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    user = chat_data.get(chat_id, {}).get('users', {}).get(user_id, {})
    
    if chat_data.get(chat_id, {}).get('main_id') != user_id: return
    if user.get('on_break'): return

    user.update({
        'on_break': True, 'break_start_time': datetime.datetime.now(moscow_tz),
        'last_break_time': datetime.datetime.now(moscow_tz),
        'breaks_count': user.get('breaks_count', 0) + 1,
        'pre_return_warning_sent': False
    })
    bot.reply_to(message, f"‚úÖ –ü–µ—Ä–µ—Ä—ã–≤ –Ω–∞ {BREAK_DURATION_MINUTES} –º–∏–Ω—É—Ç –Ω–∞—á–∞—Ç.")
    show_menu(message)


# ========================================
#           –ü–õ–ê–ù–ò–†–û–í–©–ò–ö, –û–¢–ß–ï–¢–´ –ò –ó–ê–ü–£–°–ö
# ========================================
def get_report_lines(chat_id, data):
    # ... (–ø–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞)
    pass

def run_scheduler():
    # ... (–ø–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞)
    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == '__main__':
    logging.info("ü§ñ –ë–æ—Ç (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è) –∑–∞–ø—É—â–µ–Ω...")
    threading.Thread(target=run_scheduler, daemon=True).start()
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ polling: {e}")
            time.sleep(15)
