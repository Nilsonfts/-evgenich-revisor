# -*- coding: utf-8 -*-
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏ –∏ HR-—Ñ—É–Ω–∫—Ü–∏—è–º–∏ (—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π —Ä–µ–∂–∏–º, –∞–Ω–∞–ª–∏–∑).
"""

import logging
import os
import telebot
import datetime
import pytz
import time
import schedule
import threading
import random
import re
import csv
from typing import Dict, Optional, List, Tuple
from telebot import types
from functools import wraps

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—Ä–∞–∑—ã –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from phrases import (
    welcome_phrases, soviet_phrases, duty_call_phrases, duty_late_phrases,
    BREAK_KEYWORDS, RETURN_CONFIRM_WORDS, ACHIEVEMENTS
)

# ========================================
#           –ù–ê–°–¢–†–û–ô–ö–ò –ò –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
# ========================================

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
VOICE_TIMEOUT_MINUTES = 40
EXPECTED_VOICES_PER_SHIFT = 15
MIN_VOICE_SECONDS = 7
VOICE_COOLDOWN_SECONDS = 120
BREAK_DURATION_MINUTES = 15
BREAK_DELAY_MINUTES = 60

ADMIN_CHAT_ID = -1002645821302
shift_reports = []
user_history: Dict[int, List[str]] = {}

moscow_tz = pytz.timezone("Europe/Moscow")
bot = telebot.TeleBot(BOT_TOKEN, threaded=False)

chat_data: Dict[int, dict] = {}

# ========================================
#           –î–ï–ö–û–†–ê–¢–û–†–´ –ò –§–£–ù–ö–¶–ò–ò
# ========================================

def admin_required(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑–≤–∞–ª –∞–¥–º–∏–Ω —á–∞—Ç–∞."""
    @wraps(func)
    def wrapper(message):
        try:
            user_id = message.from_user.id
            if user_id == ADMIN_CHAT_ID: # –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω
                return func(message)
            admins = [admin.user.id for admin in bot.get_chat_administrators(message.chat.id)]
            if user_id in admins:
                return func(message)
            else:
                bot.reply_to(message, "‚õî –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    return wrapper

def get_username(user) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å username –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return f"@{user.username}" if user.username else user.first_name

def init_user_data(user_id, username):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return {
        'username': username, 'count': 0, 'on_break': False,
        'breaks_count': 0, 'late_returns': 0, 'last_voice_time': None,
        'last_break_time': None, 'last_remind_time': None,
        'reminder_sent_at': None, 'response_times': [],
        'waiting_return_confirm': False, 'achievements': set(),
        'voice_deltas': [], 'voice_durations': [], 'kudos': 0,
        'in_training': False, 'first_voice_time': None
    }

def handle_user_return(chat_id, user_id):
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å –ø–µ—Ä–µ—Ä—ã–≤–∞."""
    user = chat_data.get(chat_id, {}).get('users', {}).get(user_id)
    if not user or not user.get('on_break'): return

    now = datetime.datetime.now(moscow_tz)
    break_duration_minutes = (now - user['break_start_time']).total_seconds() / 60
    
    user['on_break'] = False
    user['waiting_return_confirm'] = False
    
    if break_duration_minutes > BREAK_DURATION_MINUTES:
        user['late_returns'] += 1
        bot.send_message(chat_id, f"‚úÖ {user['username']}, —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –¢—ã –æ–ø–æ–∑–¥–∞–ª –Ω–∞ {int(break_duration_minutes - BREAK_DURATION_MINUTES)} –º–∏–Ω.")
    else:
        bot.send_message(chat_id, f"üëç {user['username']}, —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ú–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –≤–µ—Ä–Ω—É–ª—Å—è –≤–æ–≤—Ä–µ–º—è.")
    
    save_history_event(chat_id, user_id, user['username'], f"–í–µ—Ä–Ω—É–ª—Å—è —Å –ø–µ—Ä–µ—Ä—ã–≤–∞ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {break_duration_minutes:.1f} –º–∏–Ω)")

# ... –∏ –¥—Ä—É–≥–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ...

# ========================================
#           –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# ========================================
@bot.message_handler(commands=['training_start'])
def training_start(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    username = get_username(message.from_user)
    
    if chat_id not in chat_data:
        chat_data[chat_id] = {'users': {}}
    if user_id not in chat_data[chat_id]['users']:
        chat_data[chat_id]['users'][user_id] = init_user_data(user_id, username)
        
    chat_data[chat_id]['users'][user_id]['in_training'] = True
    bot.reply_to(message, "‚úÖ –†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –±—É–¥—É—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –≤ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ. –ë–æ—Ç –±—É–¥–µ—Ç –¥–∞–≤–∞—Ç—å –≤–∞–º –ø–æ–¥—Å–∫–∞–∑–∫–∏. –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /training_stop.")

@bot.message_handler(commands=['training_stop'])
def training_stop(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    if chat_data.get(chat_id, {}).get('users', {}).get(user_id):
        chat_data[chat_id]['users'][user_id]['in_training'] = False
    bot.reply_to(message, "‚òëÔ∏è –†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –æ–±—ã—á–Ω–æ–π —Ä–∞–±–æ—Ç–µ.")

@bot.message_handler(content_types=['voice'])
def handle_voice_message(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    username = get_username(message.from_user)
    now = datetime.datetime.now(moscow_tz)

    if chat_id not in chat_data:
        chat_data[chat_id] = {'main_id': None, 'users': {}, 'shift_start': now, 'chat_title': get_chat_title(chat_id)}
    if user_id not in chat_data[chat_id]['users']:
        chat_data[chat_id]['users'][user_id] = init_user_data(user_id, username)
    user = chat_data[chat_id]['users'][user_id]
    
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if user['in_training']:
        bot.reply_to(message, f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: –ø–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ, –¥–ª–∏–Ω–∞ {message.voice.duration} —Å–µ–∫. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞: {MIN_VOICE_SECONDS} —Å–µ–∫. –û—Ç–ª–∏—á–Ω–æ!")
        return

    # –ï—Å–ª–∏ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    if user.get('on_break'):
        handle_user_return(chat_id, user_id)
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    if user.get('reminder_sent_at'):
        response_time = (now - user['reminder_sent_at']).total_seconds() / 60
        user['response_times'].append(response_time)
        user['reminder_sent_at'] = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º

    voice_duration = message.voice.duration
    save_history_event(chat_id, user_id, username, f"–ü—Ä–∏—Å–ª–∞–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ ({voice_duration} —Å–µ–∫)")
    user['voice_durations'].append(voice_duration)

    if voice_duration < MIN_VOICE_SECONDS:
        bot.send_message(chat_id, random.choice(soviet_phrases["too_short"]))
        return

    last_voice = user.get('last_voice_time')
    if last_voice and (now - last_voice).total_seconds() < VOICE_COOLDOWN_SECONDS:
        bot.reply_to(message, f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ! –°–ª–µ–¥—É—é—â–µ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω–æ —á–µ—Ä–µ–∑ {int(VOICE_COOLDOWN_SECONDS - (now - last_voice).total_seconds())} —Å–µ–∫.")
        return

    if last_voice:
        user['voice_deltas'].append((now - last_voice).total_seconds() / 60)
    else: # –ü–µ—Ä–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ
        user['first_voice_time'] = now

    user['count'] += 1
    user['last_voice_time'] = now
    
    if chat_data[chat_id]['main_id'] is None:
        chat_data[chat_id]['main_id'] = user_id
        bot.send_message(chat_id, f"üëë {username} —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≥–ª–∞–≤–Ω—ã–º, –∑–∞–ø–∏—Å–∞–≤ –ø–µ—Ä–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ!", reply_markup=create_main_keyboard())

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –∫–æ–º–∞–Ω–¥—ã –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫) ...

# ========================================
#           –û–¢–ß–ï–¢–´ –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê
# ========================================

def get_report_lines(chat_id, data, full_report=False):
    main_id = data.get('main_id')
    if not main_id: return ["–ì–ª–∞–≤–Ω—ã–π –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω."]
    user = data['users'][main_id]
    
    # –†–∞—Å—á–µ—Ç –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫
    avg_delta = sum(user['voice_deltas']) / len(user['voice_deltas']) if user['voice_deltas'] else 0
    avg_duration = sum(user['voice_durations']) / len(user['voice_durations']) if user['voice_durations'] else 0
    short_voices_perc = (sum(1 for d in user['voice_durations'] if d < 10) / len(user['voice_durations']) * 100) if user['voice_durations'] else 0
    avg_response_time = sum(user['response_times']) / len(user['response_times']) if user['response_times'] else 0
    max_pause = max(user['voice_deltas']) if user['voice_deltas'] else 0
    first_voice_str = user.get('first_voice_time', now).strftime('%H:%M')
    last_voice_str = user.get('last_voice_time', now).strftime('%H:%M')

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    tag = "#–û—Ç—á–µ—Ç_–°–º–µ–Ω—ã" if full_report else "#–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π_–û—Ç—á–µ—Ç"
    report = [
        f"üìã {tag} ({data['shift_start'].strftime('%d.%m.%Y')})",
        f"üè¢ –ß–∞—Ç: {get_chat_title(chat_id)}",
        f"üé§ –í–µ–¥—É—â–∏–π: {user['username']}",
        "---",
        "üìä **–ö–û–õ–ò–ß–ï–°–¢–í–û:**",
        f"üó£Ô∏è –ì–æ–ª–æ—Å–æ–≤—ã—Ö: {user['count']} –∏–∑ {EXPECTED_VOICES_PER_SHIFT} ({user['count'] / EXPECTED_VOICES_PER_SHIFT:.0%})",
        f"üëç –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π: {user['kudos']}",
        "---",
        "‚è≥ **–î–ò–°–¶–ò–ü–õ–ò–ù–ê:**",
        f"‚òï –ü–µ—Ä–µ—Ä—ã–≤–æ–≤: {user['breaks_count']}",
        f"‚è≥ –û–ø–æ–∑–¥–∞–Ω–∏–π —Å –ø–µ—Ä–µ—Ä—ã–≤–∞: {user['late_returns']}",
        f"‚ö°Ô∏è –†–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–∞–ø–æ–º.: {avg_response_time:.1f} –º–∏–Ω." if avg_response_time else "‚ö°Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ –±—ã–ª–æ",
        "---",
        "üìà **–ê–ö–¢–ò–í–ù–û–°–¢–¨:**",
        f"üï∞Ô∏è –í —ç—Ñ–∏—Ä–µ: —Å {first_voice_str} –ø–æ {last_voice_str}",
        f"üìà –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Ç–º: {avg_delta:.1f} –º–∏–Ω/—Å–æ–æ–±—â–µ–Ω–∏–µ",
        f"üîá –ú–∞–∫—Å. –ø–∞—É–∑–∞: {max_pause:.1f} –º–∏–Ω.",
        "---",
        "üéôÔ∏è **–ö–ê–ß–ï–°–¢–í–û (–∫–æ—Å–≤–µ–Ω–Ω–æ):**",
        f"üìè –°—Ä. –¥–ª–∏–Ω–∞ –ì–°: {avg_duration:.1f} —Å–µ–∫.",
        f"ü§è –ö–æ—Ä–æ—Ç–∫–∏—Ö –ì–° (<10—Å): {short_voices_perc:.0f}%"
    ]
    return report

def generate_analytical_summary(user_data):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã –≤–µ–¥—É—â–µ–≥–æ."""
    summary = ["\n---", "üß† **–ê–Ω–∞–ª–∏–∑ —Å–º–µ–Ω—ã:**"]
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–∏—Ç–º–∞
    if user_data['voice_deltas']:
        max_pause = max(user_data['voice_deltas'])
        if max_pause > VOICE_TIMEOUT_MINUTES * 1.5:
            summary.append("‚Ä¢  –∑–æ–Ω–∞ —Ä–æ—Å—Ç–∞: –±—ã–ª–∏ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ –ø–∞—É–∑—ã –≤ —ç—Ñ–∏—Ä–µ. –°—Ç–æ–∏—Ç –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å—é.")
        else:
            summary.append("‚Ä¢ —Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞: —Ö–æ—Ä–æ—à–∏–π, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–º–µ–Ω—ã.")

    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–∫—Ü–∏–∏
    if user_data['response_times']:
        avg_response = sum(user_data['response_times']) / len(user_data['response_times'])
        if avg_response < 3:
            summary.append("‚Ä¢ —Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞: –æ—Ç–ª–∏—á–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –≤—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏.")
        else:
            summary.append("‚Ä¢ –∑–æ–Ω–∞ —Ä–æ—Å—Ç–∞: —Å—Ç–æ–∏—Ç –±—ã—Å—Ç—Ä–µ–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Å—Ç–æ–µ.")
            
    # –ê–Ω–∞–ª–∏–∑ –æ–ø–æ–∑–¥–∞–Ω–∏–π
    if user_data['late_returns'] > 0:
        summary.append(f"‚Ä¢ –∑–æ–Ω–∞ —Ä–æ—Å—Ç–∞: –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ {user_data['late_returns']} –æ–ø–æ–∑–¥–∞–Ω–∏–µ(–π) —Å –ø–µ—Ä–µ—Ä—ã–≤–∞. –í–∞–∂–Ω–æ —Å–æ–±–ª—é–¥–∞—Ç—å —Ç–∞–π–º–∏–Ω–≥.")
    
    if len(summary) == 1: # –ï—Å–ª–∏ –Ω–µ—á–µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å
        return "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –∑–∞–º–µ—á–∞–Ω–∏–π –Ω–µ—Ç!"
        
    return "\n".join(summary)


def send_end_of_shift_reports():
    global shift_reports
    shift_reports = []
    
    for chat_id, data in chat_data.items():
        main_id = data.get('main_id')
        if not main_id: continue
        
        main_user_data = data['users'][main_id]
        
        report_lines = get_report_lines(chat_id, data, full_report=True)
        analytical_summary = generate_analytical_summary(main_user_data)
        
        final_report = "\n".join(report_lines) + "\n" + analytical_summary
        
        try:
            bot.send_message(chat_id, final_report, parse_mode="Markdown")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —á–∞—Ç {chat_id}: {e}")
            
        shift_reports.append({"chat_id": chat_id, "report": final_report})
    
    chat_data.clear()
    user_history.clear()

# ========================================
#                –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ========================================

def run_scheduler():
    # ... (–∫–æ–¥ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞)
    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == '__main__':
    logging.info("ü§ñ –ë–æ—Ç (–≤–µ—Ä—Å–∏—è —Å HR-—Ñ—É–Ω–∫—Ü–∏—è–º–∏) –∑–∞–ø—É—â–µ–Ω...")
    threading.Thread(target=run_scheduler, daemon=True).start()
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ polling: {e}")
            time.sleep(15)
