# -*- coding: utf-8 -*-
"""
–ö–∞–Ω–æ–Ω–∏—á–Ω–∞—è —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞, –≤–∫–ª—é—á–∞—é—â–∞—è –≤—Å–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏:
- –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å
- HR-—Ñ—É–Ω–∫—Ü–∏–∏ (—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞, –∞–Ω–∞–ª–∏–∑)
- –£–º–Ω–æ–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π
- –°–∏—Å—Ç–µ–º–∞ "–ë–û–°–°–ê" –∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
- –ü–µ—Ä–µ–¥–∞—á–∞ —Å–º–µ–Ω—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–π
"""

import logging
import os
import telebot
import datetime
import pytz
import time
import schedule
import threading
import random
import re
from telebot import types
from functools import wraps
from typing import Dict, List, Optional
# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–∞–∑—ã, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∏
try:
    from phrases import (
        welcome_phrases, soviet_phrases,
        BREAK_KEYWORDS, RETURN_CONFIRM_WORDS, ACHIEVEMENTS
    )
except ImportError:
    logging.warning("–§–∞–π–ª 'phrases.py' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
    BREAK_KEYWORDS = ["–ø–µ—Ä–µ—Ä—ã–≤", "–æ—Ç–¥—ã—Ö"]
    RETURN_CONFIRM_WORDS = ["–≤–µ—Ä–Ω—É–ª—Å—è", "–Ω–∞ –º–µ—Å—Ç–µ"]
    soviet_phrases = {"too_short": ["–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ!"], "accept": ["–ü—Ä–∏–Ω—è—Ç–æ."]}


# ========================================
#           –ù–ê–°–¢–†–û–ô–ö–ò –ò –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
# ========================================
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s", handlers=[logging.FileHandler("bot.log", encoding="utf-8"), logging.StreamHandler()])

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ BOT_TOKEN –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ó–∞–¥–∞–π—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")

# ID —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ë–û–°–°) –∏ —á–∞—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤
BOSS_ID = 196614680
ADMIN_REPORT_CHAT_ID = -1002645821302 # –ü—Ä–∏–º–µ—Ä ID, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–º–µ–Ω—ã
VOICE_TIMEOUT_MINUTES = 40
EXPECTED_VOICES_PER_SHIFT = 15
MIN_VOICE_SECONDS = 7
VOICE_COOLDOWN_SECONDS = 120
BREAK_DURATION_MINUTES = 15
BREAK_DELAY_MINUTES = 60

moscow_tz = pytz.timezone("Europe/Moscow")
bot = telebot.TeleBot(BOT_TOKEN, threaded=False)
chat_data: Dict[int, dict] = {}
user_history: Dict[int, list] = {}

# ========================================
#           –î–ï–ö–û–†–ê–¢–û–†–´ –ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ========================================
def is_admin(user_id, chat_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –ë–û–°–°–û–ú."""
    if user_id == BOSS_ID: return True
    try:
        admin_ids = [admin.user.id for admin in bot.get_chat_administrators(chat_id)]
        return user_id in admin_ids
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ {chat_id}: {e}")
        return False

def admin_required(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."""
    @wraps(func)
    def wrapper(message):
        if not is_admin(message.from_user.id, message.chat.id):
            bot.reply_to(message, "‚õî –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞.")
            return
        return func(message)
    return wrapper

def get_username(user) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç @username –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return f"@{user.username}" if user.username else user.first_name

def init_user_data(user_id, username):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return {
        'username': username, 'count': 0, 'on_break': False, 'breaks_count': 0,
        'late_returns': 0, 'last_voice_time': None, 'last_break_time': None,
        'pre_return_warning_sent': False, 'reminder_sent_at': None, 'response_times': [],
        'achievements': set(), 'voice_deltas': [], 'voice_durations': [], 'kudos': 0,
        'in_training': False, 'first_voice_time': None, 'waiting_return_confirm': False,
        'break_start_time': None
    }

def handle_user_return(chat_id, user_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–µ—Ä–µ—Ä—ã–≤–∞."""
    user = chat_data.get(chat_id, {}).get('users', {}).get(user_id)
    if not user or not user.get('on_break'): return

    now = datetime.datetime.now(moscow_tz)
    break_duration_minutes = (now - user['break_start_time']).total_seconds() / 60

    user['on_break'] = False
    user['waiting_return_confirm'] = False

    if break_duration_minutes > BREAK_DURATION_MINUTES:
        user['late_returns'] += 1
        bot.send_message(chat_id, f"‚úÖ {user['username']}, —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã –æ–ø–æ–∑–¥–∞–ª–∏ –Ω–∞ {int(break_duration_minutes - BREAK_DURATION_MINUTES)} –º–∏–Ω.")
    else:
        bot.send_message(chat_id, f"üëç {user['username']}, —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ú–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤–æ–≤—Ä–µ–º—è.")

    save_history_event(chat_id, user_id, user['username'], f"–í–µ—Ä–Ω—É–ª—Å—è —Å –ø–µ—Ä–µ—Ä—ã–≤–∞ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {break_duration_minutes:.1f} –º–∏–Ω)")
    fake_message = types.SimpleNamespace(chat=types.SimpleNamespace(id=chat_id), from_user=types.SimpleNamespace(id=user_id))
    show_menu(fake_message)

def get_chat_title(chat_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –ø–æ –µ–≥–æ ID."""
    try:
        title = bot.get_chat(chat_id).title
        return title if title else str(chat_id)
    except Exception:
        return str(chat_id)

def save_history_event(chat_id, user_id, username, event_description):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞—É–¥–∏—Ç–∞."""
    if chat_id not in user_history: user_history[chat_id] = []
    now_str = datetime.datetime.now(moscow_tz).strftime('%Y-%m-%d %H:%M:%S')
    user_history[chat_id].append(f"{now_str} | {username} ({user_id}) | {event_description}")
    logging.info(f"HISTORY [{get_chat_title(chat_id)}]: {username} - {event_description}")


# ========================================
#           –ö–õ–ê–í–ò–ê–¢–£–†–´ –ò –ù–ê–í–ò–ì–ê–¶–ò–Ø
# ========================================
def create_contextual_keyboard(chat_id, user_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False, row_width=2)
    current_main_id = chat_data.get(chat_id, {}).get('main_id')
    user_data = chat_data.get(chat_id, {}).get('users', {}).get(user_id, {})

    if current_main_id is None:
        markup.add(types.KeyboardButton("üöÄ –í—Å—Ç–∞—Ç—å –≤ —Å–º–µ–Ω—É"))

    if current_main_id == user_id:
        if user_data.get('on_break'):
            markup.add(types.KeyboardButton("‚úÖ –Ø –≤–µ—Ä–Ω—É–ª—Å—è"))
        else:
            markup.add(types.KeyboardButton("‚òïÔ∏è –£–π—Ç–∏ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤"))

    markup.add(types.KeyboardButton("‚ÑπÔ∏è –°–≤–æ–¥–∫–∞ –ø–æ —Å–º–µ–Ω–µ"), types.KeyboardButton("‚≠êÔ∏è –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))

    if is_admin(user_id, chat_id):
        markup.add(types.KeyboardButton("üö® –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–≥—É–ª—å—â–∏–∫–∞–º"), types.KeyboardButton("üïµÔ∏è –ê—É–¥–∏—Ç —Å–º–µ–Ω—ã"))

    markup.add(types.KeyboardButton("üÜò –ü–æ–º–æ—â—å"), types.KeyboardButton("–°–∫—Ä—ã—Ç—å –º–µ–Ω—é"))
    return markup

# ========================================
#           –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# ========================================
@bot.message_handler(commands=['start', '—Å—Ç–∞—Ä—Ç'])
def handle_start(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–∞ —Å–º–µ–Ω—É."""
    chat_id = message.chat.id
    from_user = message.from_user
    username = get_username(from_user)

    if chat_id not in chat_data:
        chat_data[chat_id] = {'main_id': None, 'users': {}, 'shift_start': datetime.datetime.now(moscow_tz), 'chat_title': get_chat_title(chat_id)}

    users = chat_data[chat_id]['users']
    if from_user.id not in users:
        users[from_user.id] = init_user_data(from_user.id, username)

    if chat_data[chat_id].get('main_id') is not None:
        main_username = chat_data[chat_id].get('main_username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        bot.reply_to(message, f"–°–º–µ–Ω–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞. –¢–µ–∫—É—â–∏–π –≥–ª–∞–≤–Ω—ã–π: {main_username}.")
        return

    chat_data[chat_id]['main_id'] = from_user.id
    chat_data[chat_id]['main_username'] = username
    bot.send_message(chat_id, f"üëë {username}, –≤—ã –∑–∞—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ —Å–º–µ–Ω—É! –£–¥–∞—á–∏!")
    save_history_event(chat_id, from_user.id, username, "–°—Ç–∞–ª –≥–ª–∞–≤–Ω—ã–º –Ω–∞ —Å–º–µ–Ω–µ")
    show_menu(message)


@bot.message_handler(commands=['menu'])
def show_menu(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é."""
    keyboard = create_contextual_keyboard(message.chat.id, message.from_user.id)
    bot.send_message(message.chat.id, "–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)


@bot.message_handler(commands=['training_start'])
def training_start(message):
    """–í–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    chat_id = message.chat.id
    username = get_username(message.from_user)

    if chat_id not in chat_data: chat_data[chat_id] = {'users': {}}
    if user_id not in chat_data[chat_id]['users']:
        chat_data[chat_id]['users'][user_id] = init_user_data(user_id, username)

    chat_data[chat_id]['users'][user_id]['in_training'] = True
    bot.reply_to(message, "‚úÖ –†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –±—É–¥—É—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è. –î–ª—è –≤—ã—Ö–æ–¥–∞: /training_stop.")


@bot.message_handler(commands=['training_stop'])
def training_stop(message):
    """–û—Ç–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏."""
    user_id = message.from_user.id
    chat_id = message.chat.id
    if chat_data.get(chat_id, {}).get('users', {}).get(user_id):
        chat_data[chat_id]['users'][user_id]['in_training'] = False
    bot.reply_to(message, "‚òëÔ∏è –†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω.")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é ---
@bot.message_handler(func=lambda m: m.text == "–°–∫—Ä—ã—Ç—å –º–µ–Ω—é")
def hide_menu(message):
    bot.send_message(message.chat.id, "–ú–µ–Ω—é —Å–∫—Ä—ã—Ç–æ. –í—ã–∑–æ–≤–∏—Ç–µ /menu, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞.", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(func=lambda m: m.text == "üöÄ –í—Å—Ç–∞—Ç—å –≤ —Å–º–µ–Ω—É")
def menu_take_shift(message):
    handle_start(message)

@bot.message_handler(func=lambda m: m.text == "‚òïÔ∏è –£–π—Ç–∏ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤")
def menu_take_break(message):
    handle_break_request(message)

@bot.message_handler(func=lambda m: m.text == "‚úÖ –Ø –≤–µ—Ä–Ω—É–ª—Å—è")
def menu_return_from_break(message):
    handle_user_return(message.chat.id, message.from_user.id)

@bot.message_handler(func=lambda m: m.text in ["‚≠êÔ∏è –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚ÑπÔ∏è –°–≤–æ–¥–∫–∞ –ø–æ —Å–º–µ–Ω–µ"])
def menu_get_stats(message):
    chat_id = message.chat.id
    data = chat_data.get(chat_id)

    if not data or not data.get('main_id'):
        bot.reply_to(message, "–°–º–µ–Ω–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    report_lines = get_report_lines(chat_id, data, full_report=False)
    final_report = "\n".join(report_lines)
    bot.send_message(chat_id, final_report, parse_mode="Markdown")


@bot.message_handler(func=lambda m: m.text == "üö® –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–≥—É–ª—å—â–∏–∫–∞–º")
@admin_required
def menu_get_truants(message):
    chat_id = message.chat.id
    users = chat_data.get(chat_id, {}).get('users', {})
    now = datetime.datetime.now(moscow_tz)
    
    if not users:
        bot.reply_to(message, "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    truants = [f"‚ùóÔ∏è {user_data['username']} - –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω {int((now - user_data['last_voice_time']).total_seconds() / 60)} –º–∏–Ω."
               for user_id, user_data in users.items() if user_data.get('last_voice_time') and (now - user_data['last_voice_time']).total_seconds() / 60 > VOICE_TIMEOUT_MINUTES]
    
    report = "üö® **–û—Ç—á–µ—Ç –ø–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º:**\n\n" + "\n".join(truants) if truants else "‚úÖ –í—Å–µ –Ω–µ–¥–∞–≤–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã."
    bot.send_message(chat_id, report, parse_mode="Markdown")


@bot.message_handler(func=lambda m: m.text == "üÜò –ü–æ–º–æ—â—å")
def menu_get_help(message):
    help_text = """
üÜò **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É** üÜò
–Ø –±–æ—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–µ–¥—É—â–∏—Ö.
- **–°—Ç–∞—Ä—Ç**: –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ì–° –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É `/start`.
- **–ü–µ—Ä–µ—Ä—ã–≤**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 15 –º–∏–Ω.
- **–ì–°**: >7 —Å–µ–∫, –ø–∞—É–∑–∞ >2 –º–∏–Ω.
**–ö–æ–º–∞–Ω–¥—ã**:
`/menu` - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é.
`/training_start` - –í–æ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.
`/training_stop` - –í—ã–π—Ç–∏ –∏–∑ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.
"""
    bot.reply_to(message, help_text, parse_mode="Markdown")
    

@bot.message_handler(func=lambda m: m.text and any(word in m.text.lower() for word in BREAK_KEYWORDS))
def handle_break_request(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    if chat_data.get(chat_id, {}).get('main_id') != user_id: return
        
    user = chat_data.get(chat_id, {}).get('users', {}).get(user_id, {})
    if user.get('on_break'):
        bot.reply_to(message, "–í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ.")
        return

    last_break = user.get('last_break_time')
    if last_break and (datetime.datetime.now(moscow_tz) - last_break).total_seconds() / 60 < BREAK_DELAY_MINUTES:
        remaining_time = int(BREAK_DELAY_MINUTES - (datetime.datetime.now(moscow_tz) - last_break).total_seconds() / 60)
        bot.reply_to(message, f"–°–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–µ—Ä—ã–≤ –º–æ–∂–Ω–æ –≤–∑—è—Ç—å —á–µ—Ä–µ–∑ {remaining_time} –º–∏–Ω.")
        return

    user.update({
        'on_break': True, 'break_start_time': datetime.datetime.now(moscow_tz),
        'last_break_time': datetime.datetime.now(moscow_tz),
        'breaks_count': user.get('breaks_count', 0) + 1,
        'pre_return_warning_sent': False
    })
    bot.reply_to(message, f"‚úÖ –ü–µ—Ä–µ—Ä—ã–≤ –Ω–∞ {BREAK_DURATION_MINUTES} –º–∏–Ω—É—Ç –Ω–∞—á–∞—Ç.")
    save_history_event(chat_id, user_id, user['username'], f"–£—à–µ–ª –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤ ({user['breaks_count']}-–π —Ä–∞–∑)")
    show_menu(message)


@bot.message_handler(content_types=['voice'])
def handle_voice_message(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    username = get_username(message.from_user)
    now = datetime.datetime.now(moscow_tz)

    if chat_id not in chat_data:
        chat_data[chat_id] = {'main_id': None, 'users': {}, 'shift_start': now, 'chat_title': get_chat_title(chat_id)}
    if user_id not in chat_data[chat_id]['users']:
        chat_data[chat_id]['users'][user_id] = init_user_data(user_id, username)
    user = chat_data[chat_id]['users'][user_id]

    if user['in_training']:
        bot.reply_to(message, f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: –ø–æ–ª—É—á–µ–Ω–æ –ì–°, –¥–ª–∏–Ω–∞ {message.voice.duration} —Å–µ–∫.")
        return

    if user.get('on_break'): handle_user_return(chat_id, user_id)

    if user.get('reminder_sent_at'):
        user['response_times'].append((now - user['reminder_sent_at']).total_seconds() / 60)
        user['reminder_sent_at'] = None

    voice_duration = message.voice.duration
    save_history_event(chat_id, user_id, username, f"–ü—Ä–∏—Å–ª–∞–ª –ì–° ({voice_duration} —Å–µ–∫)")
    user['voice_durations'].append(voice_duration)

    if voice_duration < MIN_VOICE_SECONDS:
        bot.send_message(chat_id, random.choice(soviet_phrases["too_short"]))
        return

    last_voice = user.get('last_voice_time')
    if last_voice and (now - last_voice).total_seconds() < VOICE_COOLDOWN_SECONDS:
        remaining_cooldown = int(VOICE_COOLDOWN_SECONDS - (now - last_voice).total_seconds())
        bot.reply_to(message, f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ! –°–ª–µ–¥—É—é—â–µ–µ –ì–° –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ {remaining_cooldown} —Å–µ–∫.")
        save_history_event(chat_id, user_id, username, "–ü—Ä–∏—Å–ª–∞–ª –ì–° (—Ñ–ª—É–¥)")
        return

    if last_voice: user['voice_deltas'].append((now - last_voice).total_seconds() / 60)
    else: user['first_voice_time'] = now

    user['count'] += 1
    user['last_voice_time'] = now
    
    if "accept" in soviet_phrases:
        bot.reply_to(message, random.choice(soviet_phrases["accept"]))

    if chat_data[chat_id]['main_id'] is None:
        chat_data[chat_id]['main_id'] = user_id
        chat_data[chat_id]['main_username'] = username
        bot.send_message(chat_id, f"üëë {username} —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≥–ª–∞–≤–Ω—ã–º, –∑–∞–ø–∏—Å–∞–≤ –ø–µ—Ä–≤–æ–µ –ì–°!")
        show_menu(message)


@bot.message_handler(func=lambda m: m.text)
def handle_text_message(message):
    user_id = message.from_user.id
    user_on_break = chat_data.get(message.chat.id, {}).get('users', {}).get(user_id, {}).get('on_break')
    
    if any(word in message.text.lower() for word in RETURN_CONFIRM_WORDS) and user_on_break:
        handle_user_return(message.chat.id, user_id)

# ========================================
#           –û–¢–ß–ï–¢–´, –ê–ù–ê–õ–ò–¢–ò–ö–ê –ò –ü–õ–ê–ù–ò–†–û–í–©–ò–ö
# ========================================
def check_users_activity():
    now = datetime.datetime.now(moscow_tz)
    for chat_id, data in list(chat_data.items()):
        main_id = data.get('main_id')
        if not main_id: continue
        
        user = data['users'][main_id]
        
        if user.get('on_break') and not user.get('pre_return_warning_sent'):
            if (now - user['break_start_time']).total_seconds() / 60 > BREAK_DURATION_MINUTES:
                bot.send_message(chat_id, f"‚è∞ {user['username']}, —Ç–≤–æ–π {BREAK_DURATION_MINUTES}-–º–∏–Ω—É—Ç–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –ü–æ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è!")
                user['pre_return_warning_sent'] = True
        
        last_voice = user.get('last_voice_time')
        if not user.get('on_break') and last_voice and not user.get('reminder_sent_at'):
            if (now - last_voice).total_seconds() / 60 > VOICE_TIMEOUT_MINUTES:
                bot.send_message(chat_id, f"üö® {user['username']}, –≤—ã –¥–∞–≤–Ω–æ –Ω–µ –≤—ã—Ö–æ–¥–∏–ª–∏ –≤ —ç—Ñ–∏—Ä. –ö–∞–∫ –¥–µ–ª–∞?")
                user['reminder_sent_at'] = now
                save_history_event(chat_id, main_id, user['username'], "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ—Å—Ç–æ–µ")


def get_report_lines(chat_id, data, full_report=False):
    main_id = data.get('main_id')
    if not main_id or main_id not in data.get('users', {}): return ["–ì–ª–∞–≤–Ω—ã–π –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö."]
    
    user = data['users'][main_id]
    now = datetime.datetime.now(moscow_tz)

    avg_delta = sum(user['voice_deltas']) / len(user['voice_deltas']) if user['voice_deltas'] else 0
    avg_duration = sum(user['voice_durations']) / len(user['voice_durations']) if user['voice_durations'] else 0
    short_voices_perc = (sum(1 for d in user['voice_durations'] if d < 10) / len(user['voice_durations']) * 100) if user['voice_durations'] else 0
    avg_response_time = sum(user['response_times']) / len(user['response_times']) if user['response_times'] else 0
    max_pause = max(user['voice_deltas']) if user['voice_deltas'] else 0
    first_voice_str = user.get('first_voice_time').strftime('%H:%M') if user.get('first_voice_time') else "N/A"
    last_voice_str = user.get('last_voice_time').strftime('%H:%M') if user.get('last_voice_time') else "N/A"

    tag = "#–û—Ç—á–µ—Ç_–°–º–µ–Ω—ã" if full_report else "#–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π_–û—Ç—á–µ—Ç"
    report = [
        f"üìã {tag} ({data.get('shift_start', now).strftime('%d.%m.%Y')})",
        f"üè¢ –ß–∞—Ç: {get_chat_title(chat_id)}",
        f"üé§ –í–µ–¥—É—â–∏–π: {user['username']}",
        "---",
        f"üó£Ô∏è **–ì–æ–ª–æ—Å–æ–≤—ã—Ö:** {user['count']} –∏–∑ {EXPECTED_VOICES_PER_SHIFT} ({user['count'] / EXPECTED_VOICES_PER_SHIFT:.0%})",
        f"‚òï **–ü–µ—Ä–µ—Ä—ã–≤–æ–≤:** {user['breaks_count']}",
        f"‚è≥ **–û–ø–æ–∑–¥–∞–Ω–∏–π —Å –ø–µ—Ä–µ—Ä—ã–≤–∞:** {user['late_returns']}",
        "---",
        "**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:**",
        f"üìà –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Ç–º: {avg_delta:.1f} –º–∏–Ω/–ì–°",
        f"üîá –ú–∞–∫—Å. –ø–∞—É–∑–∞: {max_pause:.1f} –º–∏–Ω.",
        f"‚ö°Ô∏è –†–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–∞–ø–æ–º.: {avg_response_time:.1f} –º–∏–Ω." if avg_response_time else "‚ö°Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ –±—ã–ª–æ",
        "---",
        "**–ö–∞—á–µ—Å—Ç–≤–æ (–∫–æ—Å–≤–µ–Ω–Ω–æ):**",
        f"üìè –°—Ä. –¥–ª–∏–Ω–∞ –ì–°: {avg_duration:.1f} —Å–µ–∫.",
        f"ü§è –ö–æ—Ä–æ—Ç–∫–∏—Ö –ì–° (<10—Å): {short_voices_perc:.0f}%"
    ]
    return report

def generate_analytical_summary(user_data):
    summary = ["\n---", "üß† **–ê–Ω–∞–ª–∏–∑ —Å–º–µ–Ω—ã:**"]
    
    if user_data.get('voice_deltas'):
        if max(user_data['voice_deltas']) > VOICE_TIMEOUT_MINUTES * 1.5:
            summary.append("‚Ä¢  –∑–æ–Ω–∞ —Ä–æ—Å—Ç–∞: –±—ã–ª–∏ –¥–ª–∏–Ω–Ω—ã–µ –ø–∞—É–∑—ã –≤ —ç—Ñ–∏—Ä–µ.")
        else:
            summary.append("‚Ä¢ —Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞: —Ö–æ—Ä–æ—à–∏–π, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–∏—Ç–º.")

    if user_data.get('response_times'):
        if sum(user_data['response_times']) / len(user_data['response_times']) < 3:
            summary.append("‚Ä¢ —Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞: –æ—Ç–ª–∏—á–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        else:
            summary.append("‚Ä¢ –∑–æ–Ω–∞ —Ä–æ—Å—Ç–∞: —Å—Ç–æ–∏—Ç –±—ã—Å—Ç—Ä–µ–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
            
    if user_data.get('late_returns', 0) > 0:
        summary.append(f"‚Ä¢ –∑–æ–Ω–∞ —Ä–æ—Å—Ç–∞: –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ {user_data['late_returns']} –æ–ø–æ–∑–¥–∞–Ω–∏–µ(–π).")
    
    return "\n".join(summary) if len(summary) > 2 else "\n–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –∑–∞–º–µ—á–∞–Ω–∏–π –Ω–µ—Ç!"

def send_end_of_shift_reports():
    logging.info("–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤...")
    for chat_id, data in chat_data.items():
        main_id = data.get('main_id')
        if not main_id: continue
        
        main_user_data = data.get('users', {}).get(main_id)
        if not main_user_data: continue
        
        report_lines = get_report_lines(chat_id, data, full_report=True)
        analytical_summary = generate_analytical_summary(main_user_data)
        final_report = "\n".join(report_lines) + "\n" + analytical_summary
        
        try:
            bot.send_message(chat_id, final_report, parse_mode="Markdown")
            if ADMIN_REPORT_CHAT_ID:
                bot.send_message(ADMIN_REPORT_CHAT_ID, final_report, parse_mode="Markdown")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —á–∞—Ç {chat_id}: {e}")
            
    chat_data.clear()
    user_history.clear()
    logging.info("–î–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã –æ—á–∏—â–µ–Ω—ã, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –Ω–æ–≤–æ–π —Å–º–µ–Ω–µ.")

def run_scheduler():
    schedule.every(1).minutes.do(check_users_activity)
    schedule.every().day.at("23:50", "Europe/Moscow").do(send_end_of_shift_reports)
    
    while True:
        schedule.run_pending()
        time.sleep(1)

# ========================================
#           –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ========================================
if __name__ == '__main__':
    logging.info("ü§ñ –ö–∞–Ω–æ–Ω–∏—á–Ω–∞—è —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∞...")
    threading.Thread(target=run_scheduler, daemon=True).start()
    while True:
        try:
            bot.polling(none_stop=True, interval=0)
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ polling: {e}")
            time.sleep(15)
