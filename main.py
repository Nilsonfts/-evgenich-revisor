# -*- coding: utf-8 -*-
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ—Ä—ã–≤–∞–º–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –æ–ø–æ–∑–¥–∞–Ω–∏–π.
"""

import logging
import os
import telebot
import datetime
import pytz
import time
import schedule
import threading
import random
import re
import csv
from typing import Dict, Optional, List, Tuple
from telebot import types
from functools import wraps

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—Ä–∞–∑—ã –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from phrases import (
    welcome_phrases, soviet_phrases, duty_call_phrases, duty_late_phrases,
    BREAK_KEYWORDS, RETURN_CONFIRM_WORDS, ACHIEVEMENTS
)

# ========================================
#           –ù–ê–°–¢–†–û–ô–ö–ò –ò –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
# ========================================

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
VOICE_TIMEOUT_MINUTES = 40
EXPECTED_VOICES_PER_SHIFT = 15
MIN_VOICE_SECONDS = 7
VOICE_COOLDOWN_SECONDS = 120 # 2 –º–∏–Ω—É—Ç—ã
BREAK_DURATION_MINUTES = 15 # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ä—ã–≤–∞
BREAK_DELAY_MINUTES = 60 # –ù–µ–ª—å–∑—è –±—Ä–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤ —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ —á–∞—Å

ADMIN_CHAT_ID = -1002645821302
shift_reports = []
user_history: Dict[int, List[str]] = {}

moscow_tz = pytz.timezone("Europe/Moscow")
bot = telebot.TeleBot(BOT_TOKEN, threaded=False)

chat_data: Dict[int, dict] = {}

# ========================================
#           –î–ï–ö–û–†–ê–¢–û–†–´ –ò –§–£–ù–ö–¶–ò–ò
# ========================================

def admin_required(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑–≤–∞–ª –∞–¥–º–∏–Ω —á–∞—Ç–∞."""
    @wraps(func)
    def wrapper(message):
        try:
            user_id = message.from_user.id
            chat_id = message.chat.id
            if user_id == ADMIN_CHAT_ID: # –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—Å–µ–≥–¥–∞
                return func(message)
            
            admins = [admin.user.id for admin in bot.get_chat_administrators(chat_id)]
            if user_id in admins:
                return func(message)
            else:
                bot.reply_to(message, "‚õî –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    return wrapper

def get_username(user) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å username –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if user.username:
        return f"@{user.username}"
    return user.first_name

def init_user_data(user_id, username):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return {
        'username': username, 'count': 0, 'on_break': False,
        'breaks_count': 0, 'late_returns': 0, 'last_voice_time': None,
        'last_break_time': None, 'last_remind_time': None,
        'waiting_return_confirm': False, 'achievements': set(), 
        'voice_deltas': [], 'kudos': 0
    }

def handle_user_return(chat_id, user_id):
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å –ø–µ—Ä–µ—Ä—ã–≤–∞."""
    user = chat_data.get(chat_id, {}).get('users', {}).get(user_id)
    if not user or not user.get('on_break'):
        return

    now = datetime.datetime.now(moscow_tz)
    break_duration_minutes = (now - user['break_start_time']).total_seconds() / 60
    
    user['on_break'] = False
    user['waiting_return_confirm'] = False # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
    
    if break_duration_minutes > BREAK_DURATION_MINUTES:
        user['late_returns'] += 1
        bot.send_message(chat_id, f"‚úÖ {user['username']}, —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –¢—ã –æ–ø–æ–∑–¥–∞–ª –Ω–∞ {int(break_duration_minutes - BREAK_DURATION_MINUTES)} –º–∏–Ω.")
        save_history_event(chat_id, user_id, user['username'], "–í–µ—Ä–Ω—É–ª—Å—è —Å –ø–µ—Ä–µ—Ä—ã–≤–∞ —Å –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º")
    else:
        bot.send_message(chat_id, f"üëç {user['username']}, —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ú–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –≤–µ—Ä–Ω—É–ª—Å—è –≤–æ–≤—Ä–µ–º—è.")
        save_history_event(chat_id, user_id, user['username'], "–í–µ—Ä–Ω—É–ª—Å—è —Å –ø–µ—Ä–µ—Ä—ã–≤–∞ –≤–æ–≤—Ä–µ–º—è")

# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (get_chat_title, save_history_event –∏ —Ç.–¥.) ...
def get_chat_title(chat_id: int) -> str:
    try:
        title = bot.get_chat(chat_id).title
        return title if title else str(chat_id)
    except: return str(chat_id)

def save_history_event(chat_id, user_id, username, event_description):
    if chat_id not in user_history: user_history[chat_id] = []
    now_str = datetime.datetime.now(moscow_tz).strftime('%Y-%m-%d %H:%M:%S')
    user_history[chat_id].append(f"{now_str} | {username} ({user_id}) | {event_description}")
    logging.info(f"HISTORY [{get_chat_title(chat_id)}]: {username} - {event_description}")

def create_main_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=2)
    stats_button = types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="get_stats")
    report_button = types.InlineKeyboardButton("üìã –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="get_report")
    help_button = types.InlineKeyboardButton("üÜò –ü–æ–º–æ—â—å", callback_data="get_help")
    markup.add(stats_button, report_button, help_button)
    return markup
    
# ========================================
#           –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# ========================================

@bot.message_handler(commands=['start', '—Å—Ç–∞—Ä—Ç'])
def handle_start(message):
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ /start, –∏ –ø–µ—Ä–µ–¥–∞—á—É —Å–º–µ–Ω—ã
    chat_id = message.chat.id
    if chat_id == ADMIN_CHAT_ID: return
    
    from_user = message.from_user
    username = get_username(from_user)

    if chat_id not in chat_data:
        chat_data[chat_id] = {'main_id': None, 'users': {}, 'shift_start': datetime.datetime.now(moscow_tz), 'chat_title': get_chat_title(chat_id)}

    users = chat_data[chat_id]['users']
    if from_user.id not in users:
        users[from_user.id] = init_user_data(from_user.id, username)

    # –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ —Å–º–µ–Ω—ã
    match = re.match(r"/(start|—Å—Ç–∞—Ä—Ç)\s+@([a-zA-Z0-9_]+)", message.text.strip())
    if match:
        target_username = "@" + match.group(2)
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö, –∫—Ç–æ –∫–æ–≥–¥–∞-–ª–∏–±–æ –ø–∏—Å–∞–ª –≤ —á–∞—Ç–µ
        target_user_info = next((u for u in users.values() if u['username'] == target_username), None)
        if not target_user_info:
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–Ω –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ —á—Ç–æ-–Ω–∏–±—É–¥—å –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç–µ.")
            return

        target_user_id = next((uid for uid, u in users.items() if u['username'] == target_username), None)

        markup = types.InlineKeyboardMarkup()
        accept_button = types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å —Å–º–µ–Ω—É", callback_data=f"accept_shift_{target_user_id}_{from_user.id}")
        decline_button = types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_shift_{target_user_id}_{from_user.id}")
        markup.add(accept_button, decline_button)

        bot.send_message(chat_id, f"{target_username}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º –ø—Ä–∏–Ω—è—Ç—å —Å–º–µ–Ω—É. –í–∞—à –≤—ã–±–æ—Ä?", reply_markup=markup)
        return

    # –ï—Å–ª–∏ /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–Ω–∞–∑–Ω–∞—á–∞–µ–º —Å–µ–±—è –≥–ª–∞–≤–Ω—ã–º)
    chat_data[chat_id]['main_id'] = from_user.id
    bot.send_message(chat_id, f"üëë {username}, –≤—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –≥–ª–∞–≤–Ω—ã–º –Ω–∞ —Å–º–µ–Ω–µ! –£–¥–∞—á–∏!", reply_markup=create_main_keyboard())
    save_history_event(chat_id, from_user.id, username, "–°—Ç–∞–ª –≥–ª–∞–≤–Ω—ã–º –Ω–∞ —Å–º–µ–Ω–µ")


@bot.message_handler(func=lambda m: m.text and any(word in m.text.lower() for word in BREAK_KEYWORDS))
def handle_break_request(message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    if chat_data.get(chat_id, {}).get('main_id') != user_id:
        bot.reply_to(message, "‚õî –ü–µ—Ä–µ—Ä—ã–≤ –º–æ–∂–µ—Ç –≤–∑—è—Ç—å —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –Ω–∞ —Å–º–µ–Ω–µ.")
        return
    user = chat_data[chat_id]['users'][user_id]

    if user.get('on_break'):
        bot.reply_to(message, "–í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ. –°–Ω–∞—á–∞–ª–∞ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å.")
        return
    
    last_break = user.get('last_break_time')
    if last_break and (datetime.datetime.now(moscow_tz) - last_break).total_seconds() / 60 < BREAK_DELAY_MINUTES:
        bot.reply_to(message, f"–í—ã –Ω–µ–¥–∞–≤–Ω–æ –±—ã–ª–∏ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ. –°–ª–µ–¥—É—é—â–∏–π –º–æ–∂–Ω–æ –≤–∑—è—Ç—å —á–µ—Ä–µ–∑ {int(BREAK_DELAY_MINUTES - (datetime.datetime.now(moscow_tz) - last_break).total_seconds() / 60)} –º–∏–Ω.")
        return

    user.update({
        'on_break': True,
        'break_start_time': datetime.datetime.now(moscow_tz),
        'last_break_time': datetime.datetime.now(moscow_tz),
        'breaks_count': user.get('breaks_count', 0) + 1
    })
    bot.reply_to(message, f"‚úÖ –ü–µ—Ä–µ—Ä—ã–≤ –Ω–∞ {BREAK_DURATION_MINUTES} –º–∏–Ω—É—Ç –Ω–∞—á–∞—Ç. –ñ–¥—É –≤–∞—à–µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è.")
    save_history_event(chat_id, user_id, user['username'], f"–£—à–µ–ª –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤ ({user['breaks_count']}-–π —Ä–∞–∑)")


@bot.message_handler(content_types=['voice'])
def handle_voice_message(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    username = get_username(message.from_user)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    if chat_id not in chat_data:
        chat_data[chat_id] = {'main_id': None, 'users': {}, 'shift_start': datetime.datetime.now(moscow_tz), 'chat_title': get_chat_title(chat_id)}
    if user_id not in chat_data[chat_id]['users']:
        chat_data[chat_id]['users'][user_id] = init_user_data(user_id, username)
    user = chat_data[chat_id]['users'][user_id]

    # –ï—Å–ª–∏ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    if user.get('on_break'):
        handle_user_return(chat_id, user_id)

    # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∞–Ω—Ç–∏-—Ñ–ª—É–¥, —Ä–∏—Ç–º –∏ —Ç.–¥.)
    now = datetime.datetime.now(moscow_tz)
    last_voice = user.get('last_voice_time')

    # –ö–æ–Ω—Ç—Ä–æ–ª—å –ê–Ω—Ç–∏-—Ñ–ª—É–¥
    if last_voice and (now - last_voice).total_seconds() < VOICE_COOLDOWN_SECONDS:
        bot.reply_to(message, f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ! –°–ª–µ–¥—É—é—â–µ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω–æ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ {int(VOICE_COOLDOWN_SECONDS - (now - last_voice).total_seconds())} —Å–µ–∫.")
        save_history_event(chat_id, user_id, username, "–ü—Ä–∏—Å–ª–∞–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ (—Ñ–ª—É–¥)")
        return

    # –ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–∏—Ç–º–∞
    if last_voice:
        delta_minutes = (now - last_voice).total_seconds() / 60
        user['voice_deltas'].append(delta_minutes)

    user['count'] += 1
    user['last_voice_time'] = now
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –≥—Å, –¥–µ–ª–∞–µ–º —é–∑–µ—Ä–∞ –≥–ª–∞–≤–Ω—ã–º
    if chat_data[chat_id]['main_id'] is None:
        chat_data[chat_id]['main_id'] = user_id
        bot.send_message(chat_id, f"üëë {username} —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≥–ª–∞–≤–Ω—ã–º, –∑–∞–ø–∏—Å–∞–≤ –ø–µ—Ä–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ!", reply_markup=create_main_keyboard())


@bot.message_handler(func=lambda m: m.text)
def handle_text_message(message):
    user_id = message.from_user.id
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ –∏ –ø–∏—à–µ—Ç, —á—Ç–æ –≤–µ—Ä–Ω—É–ª—Å—è
    if any(word in message.text.lower() for word in RETURN_CONFIRM_WORDS) and \
       chat_data.get(message.chat.id, {}).get('users', {}).get(user_id, {}).get('on_break'):
        handle_user_return(message.chat.id, user_id)


# ========================================
#           –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ò –û–¢–ß–ï–¢–´
# ========================================

def check_users_activity():
    now = datetime.datetime.now(moscow_tz)
    for chat_id, data in list(chat_data.items()):
        main_id = data.get('main_id')
        if not main_id: continue
        user = data['users'][main_id]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å –ø–µ—Ä–µ—Ä—ã–≤–∞
        if user.get('on_break') and not user.get('waiting_return_confirm'):
            minutes_on_break = (now - user['break_start_time']).total_seconds() / 60
            if minutes_on_break > BREAK_DURATION_MINUTES:
                bot.send_message(chat_id, f"‚è∞ @{user['username']}, —Ç–≤–æ–π {BREAK_DURATION_MINUTES}-–º–∏–Ω—É—Ç–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –ü–æ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è!")
                user.update({'waiting_return_confirm': True})
        
        # ... (–ª–æ–≥–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Ç.–¥.)

def get_report_lines(chat_id, data):
    main_id = data.get('main_id')
    if not main_id: return ["–ì–ª–∞–≤–Ω—ã–π –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω."]
    user = data['users'][main_id]
    
    avg_delta = sum(user['voice_deltas']) / len(user['voice_deltas']) if user['voice_deltas'] else 0
    
    return [
        f"üìã #–û—Ç—á–µ—Ç_–¢–µ–∫—Å—Ç_–í–µ–¥—É—â–µ–≥–æ ({data['shift_start'].strftime('%d.%m.%Y')})",
        f"üé§ –í–µ–¥—É—â–∏–π: {user['username']}",
        f"üó£Ô∏è –ì–æ–ª–æ—Å–æ–≤—ã—Ö: {user['count']} –∏–∑ {EXPECTED_VOICES_PER_SHIFT}",
        f"‚òï –ü–µ—Ä–µ—Ä—ã–≤–æ–≤: {user['breaks_count']}",
        f"‚è≥ –ó–∞–¥–µ—Ä–∂–µ–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞: {user['late_returns']}",
        f"üëç –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π: {user['kudos']}",
        f"üìà –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Ç–º: {avg_delta:.1f} –º–∏–Ω/—Å–æ–æ–±—â–µ–Ω–∏–µ"
    ]

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤, –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ –∑–∞–ø—É—Å–∫–∞) ...
def run_scheduler():
    schedule.every(1).minutes.do(check_users_activity)
    # ...
    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == '__main__':
    logging.info("ü§ñ –ë–æ—Ç (–≤–µ—Ä—Å–∏—è —Å —Ñ–∏–∫—Å. –ø–µ—Ä–µ—Ä—ã–≤–∞–º–∏) –∑–∞–ø—É—â–µ–Ω...")
    threading.Thread(target=run_scheduler, daemon=True).start()
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ polling: {e}")
            time.sleep(15)
