import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from dotenv import load_dotenv
import openai

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env)
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# /start
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–Ø –≥–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º! –ù–∞–ø–∏—à–∏ /help –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π.")

# /help
@dp.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer(
        "–Ø —É–º–µ—é:\n"
        "/start ‚Äî –ó–∞–ø—É—Å–∫\n"
        "/help ‚Äî –ü–æ–º–æ—â—å\n"
        "/ask –≤–æ–ø—Ä–æ—Å ‚Äî –û—Ç–≤–µ—Ç –æ—Ç GPT\n\n"
        "–ü—Ä–∏–º–µ—Ä: /ask –ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —á–µ–±—É—Ä–µ–∫?"
    )

# /ask ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ GPT
@dp.message(Command("ask"))
async def ask_gpt(message: types.Message):
    prompt = message.text.replace("/ask", "").strip()
    if not prompt:
        await message.answer("–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ /ask, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/ask –ö–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç?")
        return

    await message.answer("–°–µ–∫—É–Ω–¥—É, –¥—É–º–∞—é... ü§î")

    openai.api_key = OPENAI_API_KEY
    try:
        # –ó–∞–ø—Ä–æ—Å –∫ OpenAI GPT
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",  # –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å "gpt-4o" –∏–ª–∏ "gpt-4", –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø
            messages=[{"role": "user", "content": prompt}],
            max_tokens=500,
            temperature=0.7,
        )
        gpt_answer = response["choices"][0]["message"]["content"]
        await message.answer(gpt_answer)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT:\n{e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
