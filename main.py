# -*- coding: utf-8 -*-
"""
–ö–∞–Ω–æ–Ω–∏—á–Ω–∞—è —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è v9.0:
- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ Google Sheets –∫–æ–º–∞–Ω–¥—ã /—Å–≤–æ–¥–∫–∞ –∏ /analyze.
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
- –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–æ–º–∞–Ω–¥—ã —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.
"""

import logging
import os
import telebot
import datetime
import pytz
import time
import schedule
import threading
import random
import csv
import json
from telebot import types
from functools import wraps
from typing import Dict, List
import pandas as pd

# –ò–º–ø–æ—Ä—Ç—ã
try:
    import gspread
except ImportError:
    gspread = None
    logging.error("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ gspread –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–µ: pip install gspread google-auth-oauthlib pandas")

try:
    from phrases import soviet_phrases, BREAK_KEYWORDS, RETURN_CONFIRM_WORDS
except ImportError:
    logging.warning("–§–∞–π–ª 'phrases.py' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    BREAK_KEYWORDS, RETURN_CONFIRM_WORDS, soviet_phrases = ["–ø–µ—Ä–µ—Ä—ã–≤"], ["–≤–µ—Ä–Ω—É–ª—Å—è"], {}

# ========================================
#           –ù–ê–°–¢–†–û–ô–ö–ò –ò –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
# ========================================
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s", handlers=[logging.FileHandler("bot.log", encoding="utf-8"), logging.StreamHandler()])

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN: raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

BOSS_ID = 196614680
ADMIN_REPORT_CHAT_ID = -1002645821302 
GOOGLE_SHEET_KEY = os.getenv("GOOGLE_SHEET_KEY")
LAST_REPORT_FILE = 'last_shift_report.txt'
CHAT_CONFIG_FILE = 'chat_configs.json'

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–º–µ–Ω—ã
VOICE_TIMEOUT_MINUTES = 40
EXPECTED_VOICES_PER_SHIFT = 15
MIN_VOICE_SECONDS = 7
VOICE_COOLDOWN_SECONDS = 120
BREAK_DURATION_MINUTES = 15
BREAK_DELAY_MINUTES = 60
SHIFT_END_TIME = "04:01"

TIMEZONE_MAP = {
    "-1": "Europe/Kaliningrad", "0": "Europe/Moscow", "+1": "Europe/Samara",
    "+2": "Asia/Yekaterinburg", "+3": "Asia/Omsk", "+4": "Asia/Krasnoyarsk",
    "+5": "Asia/Irkutsk", "+6": "Asia/Yakutsk", "+7": "Asia/Vladivostok",
    "+8": "Asia/Magadan", "+9": "Asia/Kamchatka"
}

bot = telebot.TeleBot(BOT_TOKEN, threaded=False, parse_mode="Markdown")
chat_data: Dict[int, dict] = {}
user_history: Dict[int, List[str]] = {}
chat_configs: Dict[int, dict] = {}

# ========================================
#      –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ï–ô –ß–ê–¢–û–í
# ========================================
def load_chat_configs():
    global chat_configs
    if not os.path.exists(CHAT_CONFIG_FILE):
        chat_configs = {}
        return
    try:
        with open(CHAT_CONFIG_FILE, 'r', encoding='utf-8') as f:
            chat_configs = {int(k): v for k, v in json.load(f).items()}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–∞—Ç–æ–≤: {e}")
        chat_configs = {}

def save_chat_configs():
    try:
        with open(CHAT_CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(chat_configs, f, indent=4)
    except IOError as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–∞—Ç–æ–≤: {e}")

# ========================================
#           –†–ê–ë–û–¢–ê –° GOOGLE SHEETS
# ========================================
def get_sheet():
    if not gspread: return None
    try:
        creds_json_str = os.getenv("GOOGLE_CREDENTIALS_JSON")
        if not creds_json_str or not GOOGLE_SHEET_KEY:
            logging.error("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Google Sheets –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return None
        creds_dict = json.loads(creds_json_str)
        gc = gspread.service_account_from_dict(creds_dict)
        spreadsheet = gc.open_by_key(GOOGLE_SHEET_KEY)
        return spreadsheet.sheet1
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
        return None

def create_sheet_header_if_needed(worksheet):
    try:
        if worksheet.acell('A1').value is None:
            headers = [
                "–î–∞—Ç–∞", "ID –ß–∞—Ç–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ –ß–∞—Ç–∞", "ID –í–µ–¥—É—â–µ–≥–æ", "–¢–µ–≥ –í–µ–¥—É—â–µ–≥–æ",
                "–ì–æ–ª–æ—Å–æ–≤—ã—Ö (—à—Ç)", "–ü–ª–∞–Ω (—à—Ç)", "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (%)", "–ü–µ—Ä–µ—Ä—ã–≤–æ–≤ (—à—Ç)",
                "–û–ø–æ–∑–¥–∞–Ω–∏–π (—à—Ç)", "–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Ç–º (–º–∏–Ω)", "–ú–∞–∫—Å. –ø–∞—É–∑–∞ (–º–∏–Ω)", "–°—Ä. –¥–ª–∏–Ω–∞ –ì–° (—Å–µ–∫)",
                "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"
            ]
            worksheet.append_row(headers, value_input_option='USER_ENTERED')
            worksheet.format('A1:N1', {'textFormat': {'bold': True}, 'horizontalAlignment': 'CENTER'})
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —à–∞–ø–∫—É –≤ Google –¢–∞–±–ª–∏—Ü–µ: {e}")

def append_shift_to_google_sheet(chat_id, data, analytical_conclusion):
    worksheet = get_sheet()
    if not worksheet: return

    create_sheet_header_if_needed(worksheet)
    
    main_id = data.get('main_id')
    user_data = data.get('users', {}).get(main_id)
    if not user_data: return
    
    now = datetime.datetime.now(pytz.timezone('Europe/Moscow'))
    plan_percent = (user_data['count'] / EXPECTED_VOICES_PER_SHIFT * 100) if EXPECTED_VOICES_PER_SHIFT > 0 else 0
    avg_delta = sum(user_data['voice_deltas']) / len(user_data['voice_deltas']) if user_data['voice_deltas'] else 0
    max_pause = max(user_data['voice_deltas']) if user_data['voice_deltas'] else 0
    avg_duration = sum(user_data['voice_durations']) / len(user_data['voice_durations']) if user_data['voice_durations'] else 0

    row_data = [
        data.get('shift_start', now).strftime('%d.%m.%Y'), chat_id, get_chat_title(chat_id),
        main_id, user_data['username'], user_data['count'], EXPECTED_VOICES_PER_SHIFT, f"{plan_percent:.0f}%",
        user_data['breaks_count'], user_data['late_returns'], f"{avg_delta:.1f}", f"{max_pause:.1f}",
        f"{avg_duration:.1f}", analytical_conclusion
    ]
    try:
        worksheet.append_row(row_data, value_input_option='USER_ENTERED')
        logging.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ —Å–º–µ–Ω–µ –≤ —á–∞—Ç–µ {chat_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü—É.")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Google –¢–∞–±–ª–∏—Ü—É: {e}")

# ========================================
#           –î–ï–ö–û–†–ê–¢–û–†–´ –ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ========================================
def is_admin(user_id, chat_id):
    if user_id == BOSS_ID: return True
    if chat_id > 0: return False
    try:
        return user_id in [admin.user.id for admin in bot.get_chat_administrators(chat_id)]
    except Exception as e: return False

def admin_required(func):
    @wraps(func)
    def wrapper(message):
        chat_id_for_check = message.chat.id if message.chat.type != 'private' else ADMIN_REPORT_CHAT_ID
        if not is_admin(message.from_user.id, chat_id_for_check):
            bot.reply_to(message, "‚õî –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
            return
        return func(message)
    return wrapper

def get_username(user) -> str: return f"@{user.username}" if user.username else user.first_name

def init_user_data(user_id, username):
    return {'username': username, 'count': 0, 'on_break': False, 'breaks_count': 0, 'late_returns': 0, 'last_voice_time': None, 'last_break_time': None, 'reminder_sent_at': None, 'response_times': [], 'voice_deltas': [], 'voice_durations': [], 'break_start_time': None}

def handle_user_return(chat_id, user_id):
    user = chat_data.get(chat_id, {}).get('users', {}).get(user_id)
    if not user or not user.get('on_break'): return
    now = datetime.datetime.now(pytz.timezone('Europe/Moscow'))
    break_duration_minutes = (now - user['break_start_time']).total_seconds() / 60
    user['on_break'] = False
    if break_duration_minutes > BREAK_DURATION_MINUTES:
        user['late_returns'] += 1
        bot.send_message(chat_id, f"‚úÖ {user['username']}, —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã –æ–ø–æ–∑–¥–∞–ª–∏ –Ω–∞ {int(break_duration_minutes - BREAK_DURATION_MINUTES)} –º–∏–Ω.")
    else:
        bot.send_message(chat_id, f"üëç {user['username']}, —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ú–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤–æ–≤—Ä–µ–º—è.")

def get_chat_title(chat_id: int) -> str:
    try: return bot.get_chat(chat_id).title or str(chat_id)
    except: return str(chat_id)

def save_history_event(chat_id, user_id, username, event_description):
    if chat_id not in user_history: user_history[chat_id] = []
    now_str = datetime.datetime.now(pytz.timezone('Europe/Moscow')).strftime('%Y-%m-%d %H:%M:%S')
    user_history[chat_id].append(f"{now_str} | {username} ({user_id}) | {event_description}")
    logging.info(f"HISTORY [{get_chat_title(chat_id)}]: {username} - {event_description}")

# ========================================
#           –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
# ========================================
@bot.message_handler(commands=['help'])
def handle_help(message):
    help_text = """
*–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞:*

`/start` ‚Äî –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è –≥–ª–∞–≤–Ω—ã–º –Ω–∞ —Å–º–µ–Ω–µ.
`/restart` –∏–ª–∏ `/—Ä–µ—Å—Ç–∞—Ä—Ç` ‚Äî –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–º–µ–Ω—É.
`/check` –∏–ª–∏ `/–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π` ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç.
`/–æ—Ç—á–µ—Ç` ‚Äî –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å–º–µ–Ω–µ.
`/analyze` –∏–ª–∏ `/–≤–µ—Å—å–æ—Ç—á–µ—Ç` ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.
`/–≤—ã–≥—Ä—É–∑–∫–∞` ‚Äî –í—ã–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π —Å–º–µ–Ω—ã.
`/—Å–≤–æ–¥–∫–∞` ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –ª–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è.

`/–ø–µ—Ä–µ—Ä—ã–≤` –∏–ª–∏ `/–æ–±–µ–¥` ‚Äî –£–π—Ç–∏ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤.

*–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞:*
`/set_timezone +N` ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (—Å–º–µ—â–µ–Ω–∏–µ –æ—Ç –ú–°–ö, –Ω–∞–ø—Ä–∏–º–µ—Ä `+2`).
`/—Ç–∞–π–º–∏–Ω–≥ 19:00 04:00` ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã.
`/testsheet` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Google Sheets.
"""
    bot.reply_to(message, help_text)

@bot.message_handler(commands=['set_timezone'])
@admin_required
def set_timezone(message):
    chat_id = message.chat.id
    if chat_id > 0: return bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
    try:
        offset = message.text.split()[1]
        tz_name = TIMEZONE_MAP.get(offset)
        if not tz_name:
            return bot.reply_to(message, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–º–µ—â–µ–Ω–∏—è. –£–∫–∞–∂–∏—Ç–µ —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç –ú–°–ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: `0`, `+1`, `-1`.")
        if chat_id not in chat_configs: chat_configs[chat_id] = {}
        chat_configs[chat_id]['timezone'] = tz_name
        save_chat_configs()
        local_time = datetime.datetime.now(pytz.timezone(tz_name)).strftime('%H:%M:%S')
        bot.reply_to(message, f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ *{tz_name}* (–ú–°–ö{offset}).\n–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: *{local_time}*.")
    except IndexError:
        bot.reply_to(message, "–ü—Ä–∏–º–µ—Ä: `/set_timezone +2`")

@bot.message_handler(commands=['—Ç–∞–π–º–∏–Ω–≥'])
@admin_required
def set_shift_timing(message):
    chat_id = message.chat.id
    if chat_id > 0: return bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
    try:
        parts = message.text.replace(":", " ").split()
        start_time_str = f"{parts[1]}:{parts[2]}"
        end_time_str = f"{parts[3]}:{parts[4]}"
        datetime.datetime.strptime(start_time_str, '%H:%M')
        datetime.datetime.strptime(end_time_str, '%H:%M')
        if chat_id not in chat_configs: chat_configs[chat_id] = {}
        chat_configs[chat_id]['start_time'] = start_time_str
        chat_configs[chat_id]['end_time'] = end_time_str
        save_chat_configs()
        bot.reply_to(message, f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–º–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: —Å *{start_time_str}* –¥–æ *{end_time_str}*.")
    except (IndexError, ValueError):
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä:\n`/—Ç–∞–π–º–∏–Ω–≥ 19:00 04:00`")

@bot.message_handler(commands=['—Å–≤–æ–¥–∫–∞'])
def my_total_stats(message):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç Google –¢–∞–±–ª–∏—Ü—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–∏—á–Ω—É—é —Å–≤–æ–¥–∫—É."""
    user_id = message.from_user.id
    username = get_username(message.from_user)
    bot.reply_to(message, f"üìä –°–æ–±–∏—Ä–∞—é –≤–∞—à—É –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã, {username}. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
    
    worksheet = get_sheet()
    if not worksheet:
        return bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google –¢–∞–±–ª–∏—Ü–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    try:
        df = pd.DataFrame(worksheet.get_all_records())
        if df.empty or 'ID –í–µ–¥—É—â–µ–≥–æ' not in df.columns:
            return bot.send_message(message.chat.id, "–í —Ç–∞–±–ª–∏—Ü–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            
        df['ID –í–µ–¥—É—â–µ–≥–æ'] = pd.to_numeric(df['ID –í–µ–¥—É—â–µ–≥–æ'])
        user_df = df[df['ID –í–µ–¥—É—â–µ–≥–æ'] == user_id]

        if user_df.empty:
            return bot.send_message(message.chat.id, f"{username}, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞—à–∏—Ö —Å–º–µ–Ω –≤ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")

        total_shifts = len(user_df)
        total_voices = user_df['–ì–æ–ª–æ—Å–æ–≤—ã—Ö (—à—Ç)'].sum()
        total_breaks = user_df['–ü–µ—Ä–µ—Ä—ã–≤–æ–≤ (—à—Ç)'].sum()
        total_lates = user_df['–û–ø–æ–∑–¥–∞–Ω–∏–π (—à—Ç)'].sum()

        report_text = (
            f"‚≠êÔ∏è **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {username}** ‚≠êÔ∏è\n\n"
            f"üëë **–í—Å–µ–≥–æ —Å–º–µ–Ω –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ:** {total_shifts}\n"
            f"üó£Ô∏è **–í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞–ø–∏—Å–∞–Ω–æ:** {total_voices}\n"
            f"‚òïÔ∏è **–í—Å–µ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤:** {total_breaks}\n"
            f"‚è≥ **–í—Å–µ–≥–æ –æ–ø–æ–∑–¥–∞–Ω–∏–π —Å –ø–µ—Ä–µ—Ä—ã–≤–∞:** {total_lates}"
        )
        bot.send_message(message.chat.id, report_text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Google Sheets –¥–ª—è /—Å–≤–æ–¥–∫–∞: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.")


@bot.message_handler(commands=['analyze', '–≤–µ—Å—å–æ—Ç—á–µ—Ç'])
@admin_required
def admin_analyze_all_users(message):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç Google –¢–∞–±–ª–∏—Ü—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥."""
    bot.reply_to(message, "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
    worksheet = get_sheet()
    if not worksheet:
        return bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google –¢–∞–±–ª–∏—Ü–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    try:
        df = pd.DataFrame(worksheet.get_all_records())
        if df.empty or 'ID –í–µ–¥—É—â–µ–≥–æ' not in df.columns:
            return bot.send_message(message.chat.id, "–í —Ç–∞–±–ª–∏—Ü–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

        df['–ì–æ–ª–æ—Å–æ–≤—ã—Ö (—à—Ç)'] = pd.to_numeric(df['–ì–æ–ª–æ—Å–æ–≤—ã—Ö (—à—Ç)'])
        df['–û–ø–æ–∑–¥–∞–Ω–∏–π (—à—Ç)'] = pd.to_numeric(df['–û–ø–æ–∑–¥–∞–Ω–∏–π (—à—Ç)'])
        
        summary = df.groupby('–¢–µ–≥ –í–µ–¥—É—â–µ–≥–æ').agg(
            total_shifts=('–î–∞—Ç–∞', 'count'),
            total_voices=('–ì–æ–ª–æ—Å–æ–≤—ã—Ö (—à—Ç)', 'sum'),
            total_lates=('–û–ø–æ–∑–¥–∞–Ω–∏–π (—à—Ç)', 'sum')
        ).reset_index()

        summary['avg_voices'] = summary['total_voices'] / summary['total_shifts']
        summary['lateness_percent'] = (summary['total_lates'] / summary['total_shifts']) * 100
        
        summary = summary.sort_values(by='avg_voices', ascending=False)

        report_lines = ["üìä **–û–±—â–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º**", "_(–ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets)_\n"]
        medals = {0: "ü•á", 1: "ü•à", 2: "ü•â"}

        for i, row in summary.iterrows():
            rank_icon = medals.get(i, f"{i+1}.")
            report_lines.append(
                f"*{rank_icon}* {row['–¢–µ–≥ –í–µ–¥—É—â–µ–≥–æ']} ‚Äî *–°—Ä. –ì–°:* `{row['avg_voices']:.1f}` | *–û–ø–æ–∑–¥–∞–Ω–∏—è:* `{row['lateness_percent']:.0f}%` | *–°–º–µ–Ω:* `{row['total_shifts']}`"
            )
        bot.send_message(message.chat.id, "\n".join(report_lines))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Google Sheets –¥–ª—è /analyze: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.")


# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã /–æ—Ç—á–µ—Ç, /–≤—ã–≥—Ä—É–∑–∫–∞ –∏ —Ç.–¥. –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@bot.message_handler(content_types=['voice'])
def handle_voice_message(message):
    chat_id = message.chat.id
    if chat_id > 0: return

    user_id = message.from_user.id
    username = get_username(message.from_user)
    now = datetime.datetime.now(pytz.timezone('Europe/Moscow'))

    if chat_id not in chat_data:
        chat_data[chat_id] = {'main_id': None, 'users': {}, 'shift_start': now}
    if user_id not in chat_data[chat_id]['users']:
        chat_data[chat_id]['users'][user_id] = init_user_data(user_id, username)
    user = chat_data[chat_id]['users'][user_id]

    if user.get('on_break'):
        handle_user_return(chat_id, user_id)

    voice_duration = message.voice.duration
    if voice_duration < MIN_VOICE_SECONDS:
        bot.reply_to(message, random.choice(soviet_phrases.get("too_short", ["–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ."])))
        return

    last_voice = user.get('last_voice_time')
    if last_voice and (now - last_voice).total_seconds() < VOICE_COOLDOWN_SECONDS:
        bot.reply_to(message, f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ! –°–ª–µ–¥—É—é—â–µ–µ –ì–° –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ {int(VOICE_COOLDOWN_SECONDS - (now - last_voice).total_seconds())} —Å–µ–∫.")
        return

    user['voice_durations'].append(voice_duration)
    if last_voice: user['voice_deltas'].append((now - last_voice).total_seconds() / 60)
    else: user['first_voice_time'] = now

    user['count'] += 1
    user['last_voice_time'] = now
    save_history_event(chat_id, user_id, username, f"–ü—Ä–∏—Å–ª–∞–ª –ì–° ({voice_duration} —Å–µ–∫)")
    
    if "accept" in soviet_phrases:
        bot.reply_to(message, random.choice(soviet_phrases["accept"]))

    if chat_data[chat_id].get('main_id') is None:
        chat_data[chat_id]['main_id'] = user_id
        chat_data[chat_id]['main_username'] = username
        bot.send_message(chat_id, f"üëë {username} —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≥–ª–∞–≤–Ω—ã–º, –∑–∞–ø–∏—Å–∞–≤ –ø–µ—Ä–≤–æ–µ –ì–°!")
# ========================================
#           –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ò –û–¢–ß–ï–¢–´
# ========================================

def generate_detailed_report(chat_id: int, data: dict) -> list:
    main_id = data.get('main_id')
    if not main_id or main_id not in data.get('users', {}): return ["–ì–ª–∞–≤–Ω—ã–π –Ω–µ –±—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω."]
    
    user = data['users'][main_id]
    now = datetime.datetime.now(pytz.timezone('Europe/Moscow'))

    plan_percent = (user['count'] / EXPECTED_VOICES_PER_SHIFT * 100) if EXPECTED_VOICES_PER_SHIFT > 0 else 0
    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã)
    
    report = [
        f"üìã #–ò—Ç–æ–≥–æ–≤—ã–π_–û—Ç—á–µ—Ç_–°–º–µ–Ω—ã ({data.get('shift_start', now).strftime('%d.%m.%Y')})",
        # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –æ—Ç—á–µ—Ç–∞)
    ]
    return report

def generate_analytical_summary(user_data: dict) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä—è–º—ã–µ —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
    plan_percent = (user_data.get('count', 0) / EXPECTED_VOICES_PER_SHIFT * 100) if EXPECTED_VOICES_PER_SHIFT > 0 else 0
    lates = user_data.get('late_returns', 0)
    has_long_pauses = False
    if user_data.get('voice_deltas') and len(user_data['voice_deltas']) > 0:
        if max(user_data['voice_deltas']) > VOICE_TIMEOUT_MINUTES * 1.5:
            has_long_pauses = True

    if plan_percent < 50:
        return f"‚ùóÔ∏è **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ ({plan_percent:.0f}%).** –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–∞—è –±–µ—Å–µ–¥–∞."
    elif plan_percent < 80 and lates > 0:
        return f"‚ùóÔ∏è **–°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.** –ü–ª–∞–Ω –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω ({plan_percent:.0f}%) –∏ –µ—Å—Ç—å –æ–ø–æ–∑–¥–∞–Ω–∏—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–∑—è—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å."
    elif plan_percent < 90:
        return f"‚ö†Ô∏è **–ü–ª–∞–Ω –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω ({plan_percent:.0f}%).** –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã—è—Å–Ω–∏—Ç—å –ø—Ä–∏—á–∏–Ω—ã."
    elif lates > 0:
        return f"‚ö†Ô∏è **–ü—Ä–æ–±–ª–µ–º—ã —Å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–æ–π.** –ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ {lates} –æ–ø–æ–∑–¥–∞–Ω–∏–µ(–π). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –±–µ—Å–µ–¥—É."
    elif has_long_pauses:
        return f"‚úÖ **–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞, –Ω–æ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏–µ.** –ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω, –æ–¥–Ω–∞–∫–æ –±—ã–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –ø–∞—É–∑—ã. –°—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ä–∏—Ç–º–∏—á–Ω–æ—Å—Ç—å."
    else:
        return "‚úÖ **–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!** –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ. –ú–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –≤ –ø—Ä–∏–º–µ—Ä."


def send_end_of_shift_report_for_chat(chat_id):
    logging.info(f"–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã –¥–ª—è —á–∞—Ç–∞ {chat_id}...")
    
    data = chat_data.get(chat_id)
    if not data or not data.get('main_id'):
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É –≤ —á–∞—Ç–µ {chat_id}, –Ω–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç.")
        return

    main_user_data = data['users'][data['main_id']]
    analytical_conclusion = generate_analytical_summary(main_user_data)
    
    append_shift_to_google_sheet(chat_id, data, analytical_conclusion)
    
    report_lines = generate_detailed_report(chat_id, data)
    final_report = "\n".join(report_lines) + f"\n---\nüß† **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:**\n{analytical_conclusion}"
    
    try:
        bot.send_message(chat_id, final_report)
        if ADMIN_REPORT_CHAT_ID and chat_id != ADMIN_REPORT_CHAT_ID:
            bot.send_message(ADMIN_REPORT_CHAT_ID, final_report)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —á–∞—Ç–µ {chat_id}: {e}")
    
    if chat_id in user_history: del user_history[chat_id]
    if chat_id in chat_data: del chat_data[chat_id]
    logging.info(f"–î–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã –¥–ª—è —á–∞—Ç–∞ {chat_id} –æ—á–∏—â–µ–Ω—ã.")


def check_for_shift_end():
    for chat_id, config in list(chat_configs.items()):
        tz_name = config.get('timezone')
        end_time_str = config.get('end_time')
        if not tz_name or not end_time_str: continue

        local_tz = pytz.timezone(tz_name)
        now_local = datetime.datetime.now(local_tz)
        
        end_time_obj = datetime.datetime.strptime(end_time_str, '%H:%M').time()
        report_time_obj = (datetime.datetime.combine(now_local.date(), end_time_obj) + datetime.timedelta(minutes=1)).time()
        
        if now_local.time().strftime('%H:%M') == report_time_obj.strftime('%H:%M'):
            if chat_data.get(chat_id, {}).get('main_id'):
                last_report_date = chat_data.get(chat_id, {}).get('last_report_date')
                if last_report_date != now_local.date():
                    logging.info(f"–ù–∞—Å—Ç—É–ø–∏–ª–æ –≤—Ä–µ–º—è ({report_time_obj.strftime('%H:%M')}) –¥–ª—è –æ—Ç—á–µ—Ç–∞ –≤ —á–∞—Ç–µ {chat_id} (–¢–ó: {tz_name}).")
                    send_end_of_shift_report_for_chat(chat_id)
                    if chat_id in chat_data:
                        chat_data[chat_id]['last_report_date'] = now_local.date()

def run_scheduler():
    load_chat_configs()
    schedule.every(1).minutes.do(check_for_shift_end)
    # schedule.every(1).minutes.do(check_users_activity) # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ç–æ—è
    
    while True:
        schedule.run_pending()
        time.sleep(1)

# ========================================
#           –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ========================================
if __name__ == '__main__':
    logging.info("ü§ñ –ë–æ—Ç (–≤–µ—Ä—Å–∏—è 9.0, —Ñ–∏–Ω–∞–ª—å–Ω–∞—è) –∑–∞–ø—É—â–µ–Ω...")
    threading.Thread(target=run_scheduler, daemon=True).start()
    while True:
        try:
            bot.polling(none_stop=True, interval=0)
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ polling: {e}")
            time.sleep(15)
