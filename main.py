# -*- coding: utf-8 -*-
"""
–ú–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π Telegram-–±–æ—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–º–µ–Ω, –≥–æ–ª–æ—Å–æ–≤—ã—Ö, –ø–µ—Ä–µ—Ä—ã–≤–æ–≤, –æ—Ç—á–µ—Ç–æ–≤.
–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–µ–π, –∫–Ω–æ–ø–∫–∞–º–∏, –≥–∏–±–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π, –ø–æ–ª–Ω—ã–º–∏ –±–∞–Ω–∫–∞–º–∏ —Ñ—Ä–∞–∑ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞.
"""

import logging
import os
import telebot
import datetime
import pytz
import time
import schedule
import threading
import random
import re
import csv
from typing import Dict, Optional, List, Tuple
from telebot import types

# ========================================
#           –ù–ê–°–¢–†–û–ô–ö–ò –ò –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
# ========================================

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–º–µ–Ω—ã (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —á–µ—Ä–µ–∑ /set)
SHIFT_START_HOUR = 19
SHIFT_END_HOUR = 4
VOICE_TIMEOUT_MINUTES = 40
REMIND_EACH_MINUTES = 5
BREAK_DURATION_MINUTES = 15
EXPECTED_VOICES_PER_SHIFT = 15
MIN_VOICE_SECONDS = 7
BREAK_DELAY_MINUTES = 60
WAIT_RETURN_CONFIRM_MINUTES = 3

ADMIN_CHAT_ID = -1002645821302
shift_reports = []
user_history: Dict[int, List[str]] = {}

moscow_tz = pytz.timezone("Europe/Moscow")
bot = telebot.TeleBot(BOT_TOKEN)

chat_data: Dict[int, dict] = {}

# ========================================
#                –ë–ê–ù–ö–ò –§–†–ê–ó –ò –î–û–°–¢–ò–ñ–ï–ù–ò–ô
# ========================================

welcome_phrases = [
    "üéôÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤–µ–¥—É—â–∏–π! –≠—Ñ–∏—Ä –∂–¥–µ—Ç –Ω–µ –±–æ–ª—Ç–æ–≤–Ω–∏, –∞ —Ä–∞–±–æ—Ç—ã.", "üìª –Ø —Ç—É—Ç, —á—Ç–æ–±—ã —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–≤–æ–µ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–æ–π. –ì–æ—Ç–æ–≤—å –≥–æ–ª–æ—Å–æ–≤—ã–µ.",
    "üïµÔ∏è‚Äç‚ôÇÔ∏è –Ø –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é —ç—Ñ–∏—Ä. –ù–µ –ø–æ–¥–≤–µ–¥–∏.", "üîî –¢–µ–ø–µ—Ä—å –∑–∞ —Ç–æ–±–æ–π –Ω–∞–±–ª—é–¥–∞—é—Ç. –ù–µ —Ä–∞—Å—Å–ª–∞–±–ª—è–π—Å—è.",
    "üé§ –¢–≤–æ–π –≥–æ–ª–æ—Å ‚Äì —Ç–≤–æ–π KPI. –•–≤–∞—Ç–∏—Ç —Ö–∞–ª—Ç—É—Ä—ã, —Ä–∞–±–æ—Ç–∞–µ–º!", "üöÄ –ù–µ –∑–∞–±—É–¥—å: –≥–æ–ª–æ—Å–æ–≤–æ–µ –Ω–µ –±—É–¥–µ—Ç ‚Äì –ø—Ä–µ–º–∏–∏ –Ω–µ –±—É–¥–µ—Ç.",
    "üìù –í—Å—ë –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º, –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –Ω–∞ —Å—á–µ—Ç—É.", "‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ—Ç–∏–≤ —Ç–µ–±—è, –µ—Å–ª–∏ —Ç—ã –º–æ–ª—á–∏—à—å.",
    "üòä –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å. –ù–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∂–¥—ë—Ç –¥–µ–π—Å—Ç–≤–∏–π.", "üòé –ó–¥–µ—Å—å –Ω–µ –±–æ–ª–æ—Ç–æ ‚Äì –∫–∞–∂–¥—ã–π –≥–æ–ª–æ—Å –≤–∞–∂–µ–Ω!",
    "üëã –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—è–ª ‚Äî –Ω–∞–ø–∏—à–∏ /help!", "üëë –ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —à–∞–Ω—Å —Å—Ç–∞—Ç—å –ª—É—á—à–∏–º –≤–µ–¥—É—â–∏–º.",
    "üìö –ü–æ–º–Ω–∏, —á—Ç–æ /help –≤—Å–µ–≥–¥–∞ –ø–æ–¥—Å–∫–∞–∂–µ—Ç –∫–æ–º–∞–Ω–¥—ã.", "üòº –°–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—Ç–∞–µ—à—å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–µ –Ω–∞ –æ—Ç–º–∞–∑–∫–∏.",
    "üôå –°–º–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–∞—Å—å ‚Äî –ø–æ–∫–∞–∂–∏ —Å–µ–±—è!", "üéß –ù–µ –∑–∞–±—ã–≤–∞–π ‚Äî —ç—Ñ–∏—Ä –Ω–µ —Ç–µ—Ä–ø–∏—Ç —Ç–∏—à–∏–Ω—ã.",
    "üçÄ –ñ–µ–ª–∞—é —É–¥–∞—á–Ω–æ–π —Å–º–µ–Ω—ã –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö!", "üí™ –ó–∞–¥–∞—á–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: –º–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.",
    "ü¶æ –¢—ã –Ω–µ –æ–¥–∏–Ω ‚Äî –±–æ—Ç –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º.", "üìà –í—Å—ë, —á—Ç–æ —Ç—ã —Å–∫–∞–∂–µ—à—å, –±—É–¥–µ—Ç —É—á—Ç–µ–Ω–æ –≤ –æ—Ç—á—ë—Ç–µ.",
    "ü¶â –í–Ω–∏–º–∞–Ω–∏–µ! –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º.", "ü¶∏‚Äç‚ôÇÔ∏è –ì–µ—Ä–æ–π —ç—Ñ–∏—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è!",
    "üéº –°–¥–µ–ª–∞–π —ç—Ñ–∏—Ä –º—É–∑—ã–∫–∞–ª—å–Ω—ã–º ‚Äî –≥–æ–ª–æ—Å–æ–≤—ã–º–∏!", "üé≤ –ù–µ –∏–≥—Ä–∞–π —Å —É–¥–∞—á–µ–π, —Ä–∞–±–æ—Ç–∞–π –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
    "‚ö°Ô∏è –í—Ä–µ–º—è –ø–µ—Ä–µ–º–µ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ç–≤–æ–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ.", "üí¨ –î–ª—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π /help.",
    "üë®‚Äçüíª –¢—ã –≥–æ—Ç–æ–≤? –¢–æ–≥–¥–∞ –Ω–∞—á–Ω–µ–º —Å–º–µ–Ω—É!", "üü¢ –í—Å–µ —Ç–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è –±–æ—Ç–æ–º!",
    "üì£ –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ—è–≤–ª—è—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É!", "üï∞Ô∏è –°–ª–µ–¥–∏ –∑–∞ –≤—Ä–µ–º–µ–Ω–µ–º ‚Äî –±–æ—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç, –µ—Å–ª–∏ —á—Ç–æ!",
    "üéØ –°–µ–≥–æ–¥–Ω—è —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –±—ã—Ç—å –Ω–∞ –≤—ã—Å–æ—Ç–µ.", "üëÄ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –≤–∏–¥–∏—Ç –≤—Å–µ —Ç–≤–æ–∏ —É—Å–ø–µ—Ö–∏.",
    "ü•á –°—Ç–∞–Ω—å –ª—É—á—à–∏–º –ø–æ –∏—Ç–æ–≥–∞–º —Å–º–µ–Ω—ã!", "üîã –ó–∞—Ä—è–¥–∏—Å—å –Ω–∞ –ø–æ–∑–∏—Ç–∏–≤ –∏ –≤–ø–µ—Ä—ë–¥!",
    "ü¶Å –ü–æ–∫–∞–∂–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä –≤ —ç—Ñ–∏—Ä–µ!", "üåû –° –Ω–æ–≤—ã–º –¥–Ω—ë–º, —Å –Ω–æ–≤–æ–π —Å–º–µ–Ω–æ–π!",
    "üåü –¢–≤–æ–π —É—Å–ø–µ—Ö ‚Äî —ç—Ç–æ —É—Å–ø–µ—Ö –∫–æ–º–∞–Ω–¥—ã.", "üî• –ù–µ —Å–¥–µ—Ä–∂–∏–≤–∞–π —ç–Ω–µ—Ä–≥–∏—é, –≤—ã–ª–æ–∂–∏—Å—å –ø–æ –ø–æ–ª–Ω–æ–π!",
    "üèÜ –ù–∞—á–∏–Ω–∞–π —Å–º–µ–Ω—É —É–≤–µ—Ä–µ–Ω–Ω–æ!"
]

soviet_phrases = {
    "voice_reminder": [
        "üò° –ì–¥–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ? –ü–∏–Ω–∫–∞ –ø–æ–ª—É—á–∏—à—å —Å–µ–π—á–∞—Å!", "‚õîÔ∏è –¢—ã —á—Ç–æ, –±–µ—Å—Å–º–µ—Ä—Ç–Ω—ã–π? –ì–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –ø–æ –∂–æ–ø–µ!",
        "üö® –í —ç—Ñ–∏—Ä–µ —Ç–∏—à–∏–Ω–∞! –î–∞–≤–∞–π –≥–æ–ª–æ—Å–æ–≤–æ–µ, –ø–æ–∫–∞ –Ω–µ –æ—Ç–≤–µ–∑–ª–∏ –≤ –ª–µ—Å!", "üï≥Ô∏è –ü—Ä–æ–≤–∞–ª–∏—à—å —Å–º–µ–Ω—É ‚Äî –æ–±—ä—è—Å–Ω—è—Ç—å –±—É–¥–µ—à—å –ª–µ—Å–æ—Ä—É–±–∞–º.",
        "üò§ –≠—Ñ–∏—Ä –Ω–µ —Ä–µ–∑–∏–Ω–æ–≤—ã–π. –í—Ä–µ–º—è –ø–æ—à–ª–æ, —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç, –∏–ª–∏ —Ç–∞–ø–∫–∏?", "üíÄ –ú–æ–ª—á–∞–Ω–∏–µ ‚Äî –ø—É—Ç—å –∫ —à—Ç—Ä–∞—Ñ—É. –ì–æ–ª–æ—Å–æ–≤–æ–µ ‚Äî –±—ã—Å—Ç—Ä–æ!",
        "ü•∂ –ë–µ–∑ —Ç–≤–æ–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ —ç—Ñ–∏—Ä –∑–∞–º–µ—Ä–∑–∞–µ—Ç. –ù–µ –¥—Ä–∞–∑–Ω–∏ —Å—É–¥—å–±—É.", "üò† –ò–ª–∏ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å, –∏–ª–∏ —Ç–µ–±—è –¥–∞–≤–Ω–æ –≤ –ª–µ—Å –Ω–µ –≤—ã–≤–æ–∑–∏–ª–∏?",
        "üëø –°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Äî —Å —Ä–µ–º–Ω–µ–º.", "ü§¨ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –Ω–∞ –Ω–∏–∑–∫–æ–º —Å—Ç–∞—Ä—Ç–µ. –ì–¥–µ —Ç–µ–∫—Å—Ç?",
        "üìâ –ö–∞–∂–¥—ã–π –ø—Ä–æ–ø—É—Å–∫ ‚Äî –º–∏–Ω—É—Å –∫ –ø—Ä–µ–º–∏–∏. –ù–µ –Ω–∞—Ä—ã–≤–∞–π—Å—è.", "‚ö†Ô∏è –¢—ã –æ–ø—è—Ç—å –∏–≥–Ω–æ—Ä–∏—à—å —ç—Ñ–∏—Ä? –ü–∏–Ω–∫–∞ —Ö–æ—á–µ—à—å?",
        "üö© –°—Ä–æ—á–Ω–æ —Ç–µ–∫—Å—Ç –≤–µ–¥—É—â–µ–≥–æ! –ò–ª–∏ –≤—ã–µ–¥–µ—à—å –Ω–∞ –ø—Ä–∏—Ä–æ–¥—É ‚Äî –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞.", "üî• –ò–ª–∏ —Ç—ã –æ–∂–∏–≤–ª—è–µ—à—å —ç—Ñ–∏—Ä, –∏–ª–∏ —ç—Ñ–∏—Ä –æ–∂–∏–≤–∏—Ç —Ç–µ–±—è.",
        "üì¢ –ì–¥–µ —Ç–≤–æ–π –≥–æ–ª–æ—Å? –ù–µ –ø–æ–∑–æ—Ä—å—Å—è, —Ä–∞–±–æ—Ç–∞–π!", "üò¨ –î–∞–≤–∞–π, –ø–æ–∫–∞ –Ω–µ –ø–æ–∑–¥–Ω–æ. –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å—é–¥–∞, –∏–Ω–∞—á–µ –ø–æ–ª—É—á–∏—à—å –ø–æ –ø—è—Ç–æ–π —Ç–æ—á–∫–µ.",
        "üëä –ë—É–¥–µ—Ç —Ç–∏—à–∏–Ω–∞ ‚Äî –±—É–¥–µ—Ç —Ä–∞–∑–Ω–æ—Å. –ù–µ –∏—Å–ø—ã—Ç—ã–≤–∞–π –º–µ–Ω—è.", "üõë –ì–æ–ª–æ—Å–æ–≤–æ–µ! –ù–µ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞—Ç—å—Å—è –±–µ–∑ —à—Ç–∞–Ω–æ–≤?",
        "üó£Ô∏è –ú–æ–ª—á–∏—à—å? –ó–Ω–∞—á–∏—Ç, –ø—Ä–µ–º–∏–∏ –Ω–µ –±—É–¥–µ—Ç –∏ —Ç–∞–ø–∫–∏ –≥–æ—Ç–æ–≤—å.", "‚ò†Ô∏è –ù—É —á—Ç–æ, –±–µ–∑–¥–µ–ª—å–Ω–∏–∫, —ç—Ñ–∏—Ä –∂–¥—ë—Ç! –ì–æ–ª–æ—Å–æ–≤–æ–µ! –ò–ª–∏ –±–µ–≥–æ–º –≤ –ª–µ—Å.",
        "ü§° –î—É–º–∞–µ—à—å, –∑–∞–±—É–¥—É? –£ –º–µ–Ω—è –ø–∞–º—è—Ç—å –∫–∞–∫ —É –Ω–∞—á–∞–ª—å—Å—Ç–≤–∞.", "üò§ –ö–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ —Ç—ã –º–æ–ª—á–∏—à—å, –≥–¥–µ-—Ç–æ –ø–ª–∞—á–µ—Ç —Ç–≤–æ–π –∫–æ—à–µ–ª—ë–∫."
    ],
    "scary_reminder": [
        "üëø –°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Äî —Å —Ä–µ–º–Ω–µ–º –∏ –≤—ã–µ–∑–¥–æ–º –≤ –ª–µ—Å.", "ü™ì –¢—ã –¥–æ–∏–≥—Ä–∞–µ—à—å—Å—è, –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏—à–ª—ë—à—å –≥–æ–ª–æ—Å–æ–≤–æ–µ.",
        "üíÄ –¢–µ–±—è –¥–∞–≤–Ω–æ –Ω–µ –≤—ã–≤–æ–∑–∏–ª–∏ –Ω–∞ –ø—Ä–∏—Ä–æ–¥—É? –ü—Ä–æ–¥–æ–ª–∂–∞–π –º–æ–ª—á–∞—Ç—å.", "üòà –ñ–¥—É —Ç–µ–∫—Å—Ç –≤–µ–¥—É—â–µ–≥–æ. –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å, –¥–∞–ª—å—à–µ –±—É–¥–µ—Ç –±–æ–ª—å–Ω–æ.",
        "üëª –≠—Ñ–∏—Ä –ø—É—Å—Ç–µ–µ—Ç. –ó–∞ —Ç–æ–±–æ–π —É–∂–µ —Å–ª–µ–¥—è—Ç.", "‚è≥ –ö–∞–∂–¥–∞—è –º–∏–Ω—É—Ç–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ ‚Äî —Ç–≤–æ—è –±–æ–ª—å.",
        "üî™ –ù–µ –¥–æ–≤–æ–¥–∏ –¥–æ –∂—ë—Å—Ç–∫–∏—Ö –º–µ—Ä. –Ø –º–æ–≥—É –±—ã—Ç—å –æ—á–µ–Ω—å —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–º.", "ü©∏ –¢–µ–∫—Å—Ç –≤–µ–¥—É—â–µ–≥–æ –∏–ª–∏... –∂—ë—Å—Ç–∫–∏–π –≤—ã–≥–æ–≤–æ—Ä –∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è.",
        "üò± –¢—ã –Ω–∞ –≥—Ä–∞–Ω–∏ –ø—Ä–æ–≤–∞–ª–∞ —Å–º–µ–Ω—ã. –û—á–Ω–∏—Å—å!", "üõë –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –ì–æ–ª–æ—Å–æ–≤–æ–µ ‚Äî —Å–µ–π—á–∞—Å, –∏–Ω–∞—á–µ –ø–æ –∂–æ–ø–µ.",
        "‚ö°Ô∏è –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ —É–∂–µ –≤ –∫—É—Ä—Å–µ —Ç–≤–æ–µ–π –±–µ–∑–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."
    ],
    "break_acknowledgement": [
        "‚òï –ü–µ—Ä–µ—Ä—ã–≤ –∑–∞—Å—á–∏—Ç–∞–Ω, {username}. –°–º–æ—Ç—Ä–∏, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ç—è–Ω—É–ª—Å—è.", "üçî –ë—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–∫—É—Å–∏ –∏ –Ω–∞–∑–∞–¥ —Ä–∞–±–æ—Ç–∞—Ç—å.",
        "üï∞Ô∏è 15 –º–∏–Ω—É—Ç –∏ –Ω–µ —Å–µ–∫—É–Ω–¥–æ–π –±–æ–ª—å—à–µ.", "üçµ –ü–µ—Ä–µ—Ä—ã–≤, –Ω–æ –Ω–µ —Ä–∞—Å—Å–ª–∞–±–ª—è–π—Å—è.",
        "ü•® –ß–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç –∂–¥—É –≥–æ–ª–æ—Å–æ–≤–æ–µ.", "üç´ –ù–µ –∑–∞–±—É–¥—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤–æ–≤—Ä–µ–º—è.",
        "üßÉ –û—Ç–¥—ã—Ö–∞–π, –Ω–æ –ø—Ä–µ–º–∏—é –∑–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ –Ω–µ –∂–¥–∏.", "ü•Ø –í—Å—ë –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º. –ü–µ—Ä–µ—Ä—ã–≤ –ø–æ—à—ë–ª.",
        "ü•§ –ü–æ—Ç–æ–º —Å–Ω–æ–≤–∞ –∑–∞ —Ä–∞–±–æ—Ç—É.", "üïë –ü–æ–º–Ω–∏, —á—Ç–æ –≤—Ä–µ–º—è –∏–¥—ë—Ç."
    ],
    "break_too_soon": [
        "‚ùå –ù–µ –Ω–∞–≥–ª–µ–π! –ü–µ—Ä–µ—Ä—ã–≤ —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ —á–∞—Å. –¢–µ—Ä–ø–∏ –µ—â—ë {minutes} –º–∏–Ω. –ù–µ —Ä–∞—Å–∫–∏—Å–∞–π!",
        "üïê –¢—ã –Ω–µ–¥–∞–≤–Ω–æ –æ—Ç–¥—ã—Ö–∞–ª. –ï—â—ë —Ä–∞–Ω–æ, —Ä–∞–±–æ—Ç–∞–π! –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ {minutes} –º–∏–Ω.",
        "‚è≥ –ü–µ—Ä–µ—Ä—ã–≤ –Ω–µ —Ä–∞–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω. –¢–µ—Ä–ø–∏, —ç—Ñ–∏—Ä –Ω–µ –ª—é–±–∏—Ç —Å–ª–∞–±–∞–∫–æ–≤.",
        "üí¢ –¢—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–æ—Ä–≤–∞–ª –ø—è—Ç—É—é —Ç–æ—á–∫—É –æ—Ç —Å—Ç—É–ª–∞. –ü–æ–¥–æ–∂–¥–∏ –µ—â—ë {minutes} –º–∏–Ω.",
        "ü•ä –ü–µ—Ä–µ—Ä—ã–≤ —Ä–∞–∑ –≤ —á–∞—Å! –û—Å—Ç–∞–ª–æ—Å—å {minutes} –º–∏–Ω. –î–µ—Ä–∂–∏—Å—å, –Ω–µ —Ä–∞–∑–≤–∞–ª–∏–≤–∞–π—Å—è."
    ],
    "too_short": [
        "üóëÔ∏è –¢—ã —ç—Ç–æ —Å–µ–π—á–∞—Å –≤—Å–µ—Ä—å—ë–∑? –ì–æ–ª–æ—Å–æ–≤–æ–µ –º–µ–Ω—å—à–µ 7 —Å–µ–∫—É–Ω–¥ ‚Äî –¥–∞–∂–µ —á–∏—Ç–∞—Ç—å —Å—Ç—ã–¥–Ω–æ.",
        "‚è≥ –¢–∞–∫–æ–π –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –¥–∞–∂–µ —ë–∂–∏–∫ –±—ã –Ω–µ –ø—Ä–∏–Ω—è–ª.", "üò§ –ú–µ–Ω—å—à–µ 7 —Å–µ–∫—É–Ω–¥ ‚Äî –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è! –ù–µ —Ö–∞–ª—Ç—É—Ä—å.",
        "üëé –≠—Ç–æ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ, –∞ –º–∏–∫—Ä–æ-–ø–µ—Ä–¥–µ–∂. –ü–µ—Ä–µ–∑–∞–ø–∏—à–∏!", "üôÑ –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –Ω–∞–≥–æ–≤–æ—Ä–∏—Ç—å —Ö–æ—Ç—è –±—ã 7 —Å–µ–∫—É–Ω–¥ ‚Äî –∑–∞—á–µ–º —Ç—ã –∑–¥–µ—Å—å?",
        "‚ö†Ô∏è –≠—Ç–æ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ, —ç—Ç–æ –∏–∑–¥–µ–≤–∞—Ç–µ–ª—å—Å—Ç–≤–æ."
    ],
    "accept": [
        "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ. –°–ª–µ–¥–∏ –∑–∞ —Å–º–µ–Ω–æ–π, –Ω–µ —Ä–∞—Å—Å–ª–∞–±–ª—è–π—Å—è.", "üëå –ì–æ–¥–∏—Ç—Å—è. –ù–æ –µ—Å–ª–∏ –±—É–¥–µ—à—å —Ö–∞–ª—Ç—É—Ä–∏—Ç—å ‚Äî –ø–∏–Ω–∫–∞ –ø–æ–ª—É—á–∏—à—å!",
        "üëç –û—Ç–º–µ—Ç–∏–ª. –ï—â—ë –ø–∞—Ä—É —Ç–∞–∫–∏—Ö ‚Äî –∏, –º–æ–∂–µ—Ç –±—ã—Ç—å, –Ω–µ —É–≤–æ–ª—é.", "üö© –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª. –ù–æ –µ—Å–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –º–∞–ª–æ ‚Äî –≤—ã–µ–∑–∂–∞–µ–º –≤ –ª–µ—Å.",
        "üòè –ü—Ä–∏–Ω—è—Ç–æ, –Ω–æ —Ä–∞—Å—Å–ª–∞–±–ª—è—Ç—å—Å—è —Ä–∞–Ω–æ. –Ø –∑–∞ —Ç–æ–±–æ–π —Å–ª–µ–∂—É!", "ü¶æ –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å. –ù–æ –æ—Ç–¥—ã—Ö–∞—Ç—å –±—É–¥–µ—à—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã.",
        "üëÄ –ü—Ä–∏–Ω—è–ª. –ó–∞ –∫–∞–∂–¥—ã–º —Ç–≤–æ–∏–º —Å–ª–æ–≤–æ–º ‚Äî –º–æ–π –∑–æ—Ä–∫–∏–π –≥–ª–∞–∑.", "üòà –ü–æ–∫–∞ —Ö–æ—Ä–æ—à–æ, –Ω–æ –ø–æ–ø—Ä–æ–±—É–π —Ç–æ–ª—å–∫–æ –∑–∞–º–æ–ª—á–∞—Ç—å.",
        "üìù –ó–∞–ø–∏—Å–∞–ª. –ù–æ –µ—Å–ª–∏ –ø–ª–∞–Ω –Ω–µ —Å–¥–µ–ª–∞–µ—à—å ‚Äî —Å–∞–º –∑–Ω–∞–µ—à—å —á—Ç–æ –±—É–¥–µ—Ç."
    ],
    "praise": [
        "ü•≥ –í–æ—Ç —Ç–µ–ø–µ—Ä—å –º–æ–ª–æ–¥–µ—Ü! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!", "üöÄ –û—Ç–ª–∏—á–Ω–æ! –í–æ–∑–º–æ–∂–µ–Ω –±–æ–Ω—É—Å.",
        "üî• –í–æ—Ç —Ç–µ–ø–µ—Ä—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–æ–≤–æ–ª—å–Ω–æ.", "üåü –¢–∞–∫–∏–º–∏ —Ç–µ–º–ø–∞–º–∏ –∏ –¥–æ –ø—Ä–µ–º–∏–∏ –Ω–µ–¥–∞–ª–µ–∫–æ.",
        "üéâ –í–æ—Ç —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ë–µ—Ä–∏ –ø—Ä–∏–º–µ—Ä —Å —Å–µ–±—è.", "üí™ –ò–¥–µ–∞–ª—å–Ω–∞—è —Å–º–µ–Ω–∞ ‚Äî —Ç–∞–∫ –∏ –Ω–∞–¥–æ.",
        "üçÄ –ù–µ —Ä–∞—Å—Å–ª–∞–±–ª—è–π—Å—è, –¥–µ—Ä–∂–∏ —Ç–µ–º–ø.", "üòâ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ —É–≤–∏–¥–µ–ª–æ, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å."
    ],
    "return_success": [
        "‚úÖ –í–µ—Ä–Ω—É–ª—Å—è? –†–∞–±–æ—Ç–∞—Ç—å! –ü–µ—Ä–µ—Ä—ã–≤ –æ–∫–æ–Ω—á–µ–Ω.", "üëç –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –≥–æ–ª–æ—Å–æ–≤–æ–µ, –Ω–µ —Ç—è–Ω–∏.",
        "üëè –í—Ä–µ–º—è —Å–Ω–æ–≤–∞ –¥–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ—é –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å.", "üé© –ü–µ—Ä–µ—Ä—ã–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è ‚Äî —ç—Ñ–∏—Ä –∂–¥—ë—Ç.",
        "üï∫ –ë—ã—Å—Ç—Ä–æ –≤ —Å—Ç—Ä–æ–π, {username}!", "üèÖ –¢–µ–ø–µ—Ä—å –±–µ–∑ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–π, —Ä–∞–±–æ—Ç–∞–µ–º.",
        "üéØ –≠—Ñ–∏—Ä –Ω–µ –∂–¥—ë—Ç ‚Äî –ø–æ—Ä–∞ –≤ –±–æ–π.", "üåû –ñ–¥—É —Ç–µ–∫—Å—Ç –≤–µ–¥—É—â–µ–≥–æ, –Ω–µ —Ä–∞—Å—Å–ª–∞–±–ª—è–π—Å—è.",
        "üõ†Ô∏è –ü–µ—Ä–µ—Ä—ã–≤ –±—ã–ª, —Ç–µ–ø–µ—Ä—å –∑–∞ —Ä–∞–±–æ—Ç—É.", "üö¶ –†–∞–±–æ—Ç–∞—Ç—å, —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –µ—â—ë —Ä–∞–∑ —Ä–∞–±–æ—Ç–∞—Ç—å."
    ],
    "return_demand": [
        "‚è∞ 15 –º–∏–Ω—É—Ç –ø—Ä–æ—à–ª–æ! –ü–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ –≤–µ—Ä–Ω—É–ª—Å—è: –Ω–∞–ø–∏—à–∏ '–Ø –Ω–∞ –º–µ—Å—Ç–µ', '–ø—Ä–∏—à—ë–ª' –∏ —Ç.–ø. –∏–ª–∏ –ø—Ä–∏—à–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ!",
        "üö® –ü–µ—Ä–µ—Ä—ã–≤ –æ–∫–æ–Ω—á–µ–Ω! –ì–¥–µ —Ç–≤–æ–π –≥–æ–ª–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ? –û—Ç–º–µ—Ç—å—Å—è!", "üï∞Ô∏è –í—Å—ë, –æ—Ç–¥—ã—Ö –∑–∞–∫–æ–Ω—á–µ–Ω. –ù–∞–ø–∏—à–∏ '–Ω–∞ –º–µ—Å—Ç–µ' –∏–ª–∏ –ø—Ä–∏—à–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ!",
        "üëÄ –Ø –∂–¥—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞! –ù–µ —Ç—è–Ω–∏, —ç—Ñ–∏—Ä –∂–¥—ë—Ç.", "üî• –ü–µ—Ä–µ—Ä—ã–≤ –∑–∞–≤–µ—Ä—à—ë–Ω! –°—Ä–æ—á–Ω–æ –æ—Ç–º–µ—Ç—å—Å—è –≤ —á–∞—Ç–µ."
    ],
    "return_demand_hard": [
        "üò° –¢—ã —á—Ç–æ, –ø–æ—Ç–µ—Ä—è–ª—Å—è? –°—Ä–æ—á–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –≤–æ–∑–≤—Ä–∞—Ç!", "ü§¨ –°–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –∂–¥–∞—Ç—å? –ñ–¥—É '—è –Ω–∞ –º–µ—Å—Ç–µ' –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ!",
        "üòà –ù–µ –≤—ã–Ω—É–∂–¥–∞–π –ø–æ–≤—Ç–æ—Ä—è—Ç—å ‚Äî –æ—Ç–º–µ—Ç—å—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!", "üö® –í—Ç–æ—Ä–æ–π —Ä–∞–∑ –∑–æ–≤—É! –≠—Ñ–∏—Ä –Ω–µ –∂–¥—ë—Ç –±–µ–∑–¥–µ–ª—å–Ω–∏–∫–æ–≤!",
        "üëπ –ï—Å–ª–∏ –Ω–µ –æ—Ç–º–µ—Ç–∏—à—å—Å—è ‚Äî –≤—ã–≥–æ–≤–æ—Ä –æ–±–µ—Å–ø–µ—á–µ–Ω!"
    ]
}

duty_call_phrases = [
    "üëÄ –ö—Ç–æ —Å–µ–≥–æ–¥–Ω—è –∑–∞ —Ç–µ–∫—Å—Ç –≤–µ–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—á–∞–µ—Ç? –°—Ä–æ—á–Ω–æ –æ—Ç–º–µ—Ç—å—Å—è!", "üé§ –ö—Ç–æ —Ç—É—Ç –≥–ª–∞–≤–Ω—ã–π? –ñ–¥—É —Ç–≤–æ–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!",
    "üì£ –≠–π! –ö—Ç–æ —Å–µ–≥–æ–¥–Ω—è –∫–æ–º–∞–Ω–¥—É–µ—Ç —ç—Ñ–∏—Ä–æ–º? –ù–µ –º–æ–ª—á–∞—Ç—å!", "‚è∞ 20:00! –ö—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ç–µ–∫—Å—Ç –≤–µ–¥—É—â–µ–≥–æ? –ë—ã—Å—Ç—Ä–æ –≤ —á–∞—Ç!",
    "üïµÔ∏è‚Äç‚ôÇÔ∏è –ì–¥–µ –≥–ª–∞–≤–Ω—ã–π —Å–º–µ–Ω—ã? –ù–µ –ø—Ä—è—á—å—Å—è, –ø–æ–∫–∞–∂–∏ —Å–µ–±—è!", "üö® –ö—Ç–æ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —ç—Ñ–∏—Ä? –ì–æ–ª–æ—Å–æ–≤–æ–µ ‚Äî —Å—é–¥–∞!",
    "ü¶æ –ö—Ç–æ —Å–µ–≥–æ–¥–Ω—è –¥–µ—Ä–∂–∏—Ç —ç—Ñ–∏—Ä –≤ —Ç–æ–Ω—É—Å–µ? –ñ–¥—É –æ—Ç–∫–ª–∏–∫–∞!", "üëã –ö—Ç–æ –≥–ª–∞–≤–Ω—ã–π? –ú–æ–ª—á–∞–Ω–∏–µ ‚Äî –Ω–µ –≤–∞—Ä–∏–∞–Ω—Ç!"
]
duty_late_phrases = [
    "üò° –ü–æ—á–µ–º—É –Ω–µ –æ—Ç–º–µ—Ç–∏–ª—Å—è –≤–æ–≤—Ä–µ–º—è? –ë—É–¥–µ—à—å –æ–±—ä—è—Å–Ω—è—Ç—å—Å—è!", "‚è∞ 20:30 –ø—Ä–æ—à–ª–æ, –∞ –≥–ª–∞–≤–Ω–æ–≥–æ –Ω–µ –≤–∏–¥–Ω–æ! –û–ø–æ–∑–¥–∞–Ω–∏–µ ‚Äî –º–∏–Ω—É—Å –∫ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏!",
    "üõë –û–ø—è—Ç—å –ø—Ä–æ—Å–ø–∞–ª? –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –±—É–¥—å –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–µ–π!", "üò§ –ù–µ —É—Å–ø–µ–ª –≤–æ–≤—Ä–µ–º—è? –ó–∞ —ç—Ç–æ –º–æ–∂–Ω–æ –∏ –ø–æ –∂–æ–ø–µ –ø–æ–ª—É—á–∏—Ç—å.",
    "üö® –°–º–µ–Ω–∞ –±–µ–∑ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ ‚Äî —Å—Ä–∞–∑—É –ø—Ä–æ–≤–∞–ª! –ì–¥–µ —Ç—ã –±—ã–ª?", "üò± –î–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç—è–Ω—É–ª? –¢–∞–∫ –¥–µ–ª–æ –Ω–µ –ø–æ–π–¥—ë—Ç!"
]

BREAK_KEYWORDS = [
    "–ø–µ—Ä–µ—Ä—ã–≤", "–ø–µ—Ä–µ–∫—É—Ä", "–ø–æ–∫—É—Ä–∏—Ç—å", "—è –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤", "—è –Ω–∞ –æ–±–µ–¥", "–æ–±–µ–¥", "—è –∫—É—à–∞—Ç—å",
    "–∫—É—à–∞—Ç—å", "–µ–º", "–µ—Å—Ç—å", "–æ—Ç–¥–æ—Ö–Ω—É—Ç—å", "–ø–∏—Ç—å", "–∫–æ—Ñ–µ", "—á–∞–π", "–æ—Ç–æ–π—Ç–∏", "–æ—Ç–æ–π–¥—É"
]

RETURN_CONFIRM_WORDS = [
    "–Ω–∞ –º–µ—Å—Ç–µ", "–ø—Ä–∏—à–µ–ª", "–ø—Ä–∏—à—ë–ª", "–ø–æ–∫—É—Ä–∏–ª", "–≤–µ—Ä–Ω—É–ª—Å—è", "—Ç—É—Ç", "–≥–æ—Ç–æ–≤", "—è —Ç—É—Ç"
]

ACHIEVEMENTS = {
    "perfect_shift": "üèÜ –ò–¥–µ–∞–ª—å–Ω–∞—è —Å–º–µ–Ω–∞! –ü–ª–∞–Ω –ø–æ –≥–æ–ª–æ—Å–æ–≤—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–∞ 100%+",
    "stakhanovets": "üî• –°—Ç–∞—Ö–∞–Ω–æ–≤–µ—Ü! –ù–æ—Ä–º–∞ –ø–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ –ø–æ–ª—Ç–æ—Ä–∞ —Ä–∞–∑–∞!",
    "no_delays": "üòá –¢–æ—á–Ω–æ—Å—Ç—å ‚Äî –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å –∫–æ—Ä–æ–ª–µ–π! –ù–∏ –æ–¥–Ω–æ–≥–æ –æ–ø–æ–∑–¥–∞–Ω–∏—è —Å –ø–µ—Ä–µ—Ä—ã–≤–∞."
}

# ========================================
#           –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ========================================

def get_username(message) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å username –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π."""
    if message.from_user.username:
        return f"@{message.from_user.username}"
    return message.from_user.first_name

def get_user_by_username(users_dict: dict, username: str) -> Tuple[Optional[int], Optional[dict]]:
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞."""
    for uid, info in users_dict.items():
        if info['username'].lower() == username.lower():
            return uid, info
    return None, None

def get_chat_title(chat_id: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞ –ø–æ –µ–≥–æ ID."""
    try:
        title = bot.get_chat(chat_id).title
        return title if title else str(chat_id)
    except Exception:
        return str(chat_id)

def break_requested(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞."""
    return any(word in text.lower() for word in BREAK_KEYWORDS)

def save_history_event(chat_id, user_id, username, event_description):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–º–µ–Ω—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞."""
    if chat_id not in user_history:
        user_history[chat_id] = []
    now_str = datetime.datetime.now(moscow_tz).strftime('%Y-%m-%d %H:%M:%S')
    user_history[chat_id].append(f"{now_str} | {username} ({user_id}) | {event_description}")
    logging.info(f"HISTORY [{get_chat_title(chat_id)}]: {username} - {event_description}")

def create_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏."""
    markup = types.InlineKeyboardMarkup(row_width=2)
    stats_button = types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="get_stats")
    report_button = types.InlineKeyboardButton("üìã –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="get_report")
    help_button = types.InlineKeyboardButton("üÜò –ü–æ–º–æ—â—å", callback_data="get_help")
    markup.add(stats_button, report_button, help_button)
    return markup

def check_and_award_achievements(chat_id, user_id, user_data):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –∏ –≤—ã–¥–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ —Å–º–µ–Ω—ã."""
    perc = round(user_data.get('count', 0) / EXPECTED_VOICES_PER_SHIFT * 100)
    
    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: –ò–¥–µ–∞–ª—å–Ω–∞—è —Å–º–µ–Ω–∞
    if perc >= 100 and "perfect_shift" not in user_data["achievements"]:
        user_data["achievements"].add("perfect_shift")
        bot.send_message(chat_id, f"üéâ {user_data['username']}, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø–æ–ª—É—á–∞–µ—à—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:\n_{ACHIEVEMENTS['perfect_shift']}_", parse_mode="Markdown")

    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: –°—Ç–∞—Ö–∞–Ω–æ–≤–µ—Ü
    if perc >= 150 and "stakhanovets" not in user_data["achievements"]:
        user_data["achievements"].add("stakhanovets")
        bot.send_message(chat_id, f"üéâ {user_data['username']}, –≤–æ—Ç —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:\n_{ACHIEVEMENTS['stakhanovets']}_", parse_mode="Markdown")

    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: –ë–µ–∑ –æ–ø–æ–∑–¥–∞–Ω–∏–π
    if user_data.get('late_returns', 0) == 0 and "no_delays" not in user_data["achievements"]:
        user_data["achievements"].add("no_delays")
        bot.send_message(chat_id, f"üéâ {user_data['username']}, –æ—Ç–ª–∏—á–Ω–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞! –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:\n_{ACHIEVEMENTS['no_delays']}_", parse_mode="Markdown")

def init_user_data(user_id, username):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return {
        'username': username, 'count': 0, 'reminded': False, 'on_break': False,
        'breaks_count': 0, 'late_returns': 0, 'last_remind_time': None,
        'waiting_return_confirm': False, 'remind_return_time': None,
        'achievements': set()
    }

# ========================================
#           –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
# ========================================

@bot.message_handler(commands=["help"])
def show_help(message):
    HELP_TEXT = """<b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞:</b>

/start ‚Äî –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è –≥–ª–∞–≤–Ω—ã–º –Ω–∞ —Å–º–µ–Ω–µ.
/start @username ‚Äî –ù–∞–∑–Ω–∞—á–∏—Ç—å –≥–ª–∞–≤–Ω—ã–º –¥—Ä—É–≥–æ–≥–æ.
/restart –∏–ª–∏ /—Ä–µ—Å—Ç–∞—Ä—Ç ‚Äî –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–º–µ–Ω—É.

/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–ª–∏ /–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π ‚Äî –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å–º–µ–Ω–µ.
/—Ä–µ–π—Ç–∏–Ω–≥ ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –≥–æ–ª–æ—Å–æ–≤—ã–º –∑–∞ —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É.
/–º–æ—è—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî –í–∞—à–∞ –ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —ç—Ç—É —Å–º–µ–Ω—É.

/–æ—Ç—á–µ—Ç ‚Äî –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å–º–µ–Ω–µ.
/–≤—ã–≥—Ä—É–∑–∫–∞ ‚Äî –í—ã–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥ —Å–æ–±—ã—Ç–∏–π —Å–º–µ–Ω—ã –≤ .txt —Ñ–∞–π–ª.
/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É."""
    bot.send_message(message.chat.id, HELP_TEXT, parse_mode="HTML")

@bot.message_handler(commands=["start", "—Å—Ç–∞—Ä—Ç"])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start: –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ."""
    if message.chat.id == ADMIN_CHAT_ID: return
    chat_id = message.chat.id
    now = datetime.datetime.now(moscow_tz)
    user_id = message.from_user.id
    username = get_username(message)

    if chat_id not in chat_data:
        chat_data[chat_id] = {'main_id': None, 'users': {}, 'shift_start': now, 'chat_title': get_chat_title(chat_id)}
        user_history[chat_id] = []

    users = chat_data[chat_id]['users']
    if user_id not in users:
        users[user_id] = init_user_data(user_id, username)
    
    chat_data[chat_id]['main_id'] = user_id
    chat_data[chat_id]['main_username'] = username
    chat_data[chat_id]['shift_start'] = now
    
    bot.reply_to(message, random.choice(welcome_phrases))
    bot.send_message(chat_id, f"{username}, —Ç–µ–ø–µ—Ä—å —Ç—ã –≥–ª–∞–≤–Ω—ã–π. –ù–µ –∑–∞–±—É–¥—å: –≥–æ–ª–æ—Å–æ–≤–æ–π ‚Äî —Ç–≤–æ—è –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å!", reply_markup=create_main_keyboard())
    save_history_event(chat_id, user_id, username, "–°—Ç–∞–ª –≥–ª–∞–≤–Ω—ã–º –Ω–∞ —Å–º–µ–Ω–µ")

@bot.message_handler(commands=["restart", "—Ä–µ—Å—Ç–∞—Ä—Ç"])
def restart_main(message):
    """–†—É—á–Ω–æ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–º–µ–Ω—ã, —Å–±—Ä–æ—Å –≥–ª–∞–≤–Ω–æ–≥–æ."""
    if message.chat.id == ADMIN_CHAT_ID: return
    chat_id = message.chat.id
    if chat_id in chat_data:
        chat_data[chat_id]['main_id'] = None
        chat_data[chat_id]['main_username'] = None
        chat_data[chat_id]['shift_start'] = datetime.datetime.now(moscow_tz)
        bot.send_message(chat_id, "üîÑ –°–º–µ–Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞. –ñ–¥—É –Ω–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ!")
        save_history_event(message.chat.id, message.from_user.id, get_username(message), "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª —Å–º–µ–Ω—É")

@bot.message_handler(commands=["–æ–±–µ–¥"])
def obed_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ /–æ–±–µ–¥, —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤."""
    if message.chat.id == ADMIN_CHAT_ID: return
    handle_break_request(message)

@bot.message_handler(commands=["–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])
def send_interim_report(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    chat_id = message.chat.id
    if chat_id not in chat_data:
        bot.send_message(chat_id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–º–µ–Ω–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return
    report_lines = get_report_lines(chat_id, chat_data[chat_id])
    bot.send_message(chat_id, "\n".join(report_lines))

@bot.message_handler(commands=["–æ—Ç—á–µ—Ç", "otchet"])
def send_manual_admin_report(message):
    """–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞."""
    send_end_of_shift_reports()
    send_admin_summary()
    bot.reply_to(message, "–û—Ç—á—ë—Ç –ø–æ —Å–º–µ–Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    save_history_event(message.chat.id, message.from_user.id, get_username(message), "–ó–∞–ø—Ä–æ—Å–∏–ª —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç")

@bot.message_handler(commands=['–º–æ—è—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'])
def my_stats(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É."""
    chat_id = message.chat.id
    user_id = message.from_user.id
    username = get_username(message)
    if chat_id in chat_data and user_id in chat_data[chat_id]['users']:
        user_data = chat_data[chat_id]['users'][user_id]
        stats_text = (f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É, {username}:\n"
                      f"üó£Ô∏è –ì–æ–ª–æ—Å–æ–≤—ã—Ö: {user_data.get('count', 0)}\n"
                      f"‚òï –ü–µ—Ä–µ—Ä—ã–≤–æ–≤: {user_data.get('breaks_count', 0)}\n"
                      f"‚è≥ –û–ø–æ–∑–¥–∞–Ω–∏–π —Å –ø–µ—Ä–µ—Ä—ã–≤–∞: {user_data.get('late_returns', 0)}")
        bot.send_message(chat_id, stats_text)
    else:
        bot.send_message(chat_id, f"{username}, –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É –ø–æ–∫–∞ –Ω–µ—Ç.")

@bot.message_handler(commands=['—Ä–µ–π—Ç–∏–Ω–≥'])
def show_rating(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞ —Å–º–µ–Ω—É."""
    chat_id = message.chat.id
    if chat_id in chat_data and chat_data[chat_id]['users']:
        users = chat_data[chat_id]['users']
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–æ–ª–æ—Å–æ–≤—ã—Ö
        sorted_users = sorted(users.items(), key=lambda item: item[1]['count'], reverse=True)
        
        rating_text = "üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ –≥–æ–ª–æ—Å–æ–≤—ã–º –∑–∞ —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É:\n\n"
        for i, (uid, udata) in enumerate(sorted_users[:10], 1): # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
            rating_text += f"{i}. {udata['username']} ‚Äî {udata['count']} –≥–æ–ª–æ—Å–æ–≤—ã—Ö\n"
        bot.send_message(chat_id, rating_text)
    else:
        bot.send_message(chat_id, "–ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ.")

@bot.message_handler(commands=['set'], chat_id=[ADMIN_CHAT_ID])
def set_config(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞ –ª–µ—Ç—É."""
    global EXPECTED_VOICES_PER_SHIFT, VOICE_TIMEOUT_MINUTES
    try:
        parts = message.text.split()
        if len(parts) != 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
        
        _, param, value = parts
        value = int(value)
        
        if param.lower() == 'voices':
            EXPECTED_VOICES_PER_SHIFT = value
            bot.reply_to(message, f"‚úÖ –ù–æ–≤–∞—è –Ω–æ—Ä–º–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö: {value}")
        elif param.lower() == 'timeout':
            VOICE_TIMEOUT_MINUTES = value
            bot.reply_to(message, f"‚úÖ –ù–æ–≤—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {value} –º–∏–Ω—É—Ç")
        else:
            bot.reply_to(message, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –î–æ—Å—Ç—É–ø–Ω–æ: voices, timeout")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞. –§–æ—Ä–º–∞—Ç: /set <–ø–∞—Ä–∞–º–µ—Ç—Ä> <–∑–Ω–∞—á–µ–Ω–∏–µ>\n–ü—Ä–∏–º–µ—Ä: /set voices 20\n–î–µ—Ç–∞–ª–∏: {e}")

# ========================================
#       –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –ò –ö–ù–û–ü–û–ö
# ========================================

@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏."""
    try:
        bot.answer_callback_query(callback_query_id=call.id)
        if call.data == "get_stats":
            send_interim_report(call.message)
        elif call.data == "get_report":
            send_manual_admin_report(call.message)
        elif call.data == "get_help":
            show_help(call.message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")

@bot.message_handler(content_types=['voice'])
def handle_voice_message(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: —É—á—ë—Ç, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ, —Å–±—Ä–æ—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    if message.chat.id == ADMIN_CHAT_ID: return
    chat_id = message.chat.id
    user_id = message.from_user.id
    username = get_username(message)
    now = datetime.datetime.now(moscow_tz)

    if chat_id not in chat_data:
        chat_data[chat_id] = {'main_id': None, 'users': {}, 'shift_start': now, 'chat_title': get_chat_title(chat_id)}
    
    users = chat_data[chat_id]['users']
    if user_id not in users:
        users[user_id] = init_user_data(user_id, username)

    user = users[user_id]
    voice_duration = message.voice.duration
    save_history_event(chat_id, user_id, username, f"–ü—Ä–∏—Å–ª–∞–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ ({voice_duration} —Å–µ–∫)")

    if voice_duration < MIN_VOICE_SECONDS:
        bot.send_message(chat_id, random.choice(soviet_phrases["too_short"]))
        return

    user['count'] += 1
    user['last_voice_time'] = now
    user['reminded'] = False
    
    if chat_data[chat_id].get('duty_check_time'):
        if now - chat_data[chat_id]['duty_check_time'] < datetime.timedelta(minutes=31):
            chat_data[chat_id]['duty_confirmed'] = True

    if user.get('waiting_return_confirm'):
        user['on_break'] = False
        user['waiting_return_confirm'] = False
        bot.send_message(chat_id, random.choice(soviet_phrases["return_success"]).format(username=username))
        if (now - user['break_start_time']).total_seconds() / 60 > BREAK_DURATION_MINUTES:
            user['late_returns'] += 1
            save_history_event(chat_id, user_id, username, "–í–µ—Ä–Ω—É–ª—Å—è —Å –ø–µ—Ä–µ—Ä—ã–≤–∞ —Å –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º (–≥–æ–ª–æ—Å)")
        else:
            save_history_event(chat_id, user_id, username, "–í–µ—Ä–Ω—É–ª—Å—è —Å –ø–µ—Ä–µ—Ä—ã–≤–∞ –≤–æ–≤—Ä–µ–º—è (–≥–æ–ª–æ—Å)")

    if chat_data[chat_id]['main_id'] is None:
        chat_data[chat_id]['main_id'] = user_id
        chat_data[chat_id]['main_username'] = username
        text = f"{username}, —Ç–µ–ø–µ—Ä—å —Ç—ã –≥–ª–∞–≤–Ω—ã–π. –ù–µ –∑–∞–±—É–¥—å: –≥–æ–ª–æ—Å–æ–≤–æ–π ‚Äî —Ç–≤–æ—è –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å!"
        bot.send_message(chat_id, text, reply_markup=create_main_keyboard())
        save_history_event(chat_id, user_id, username, "–°—Ç–∞–ª –≥–ª–∞–≤–Ω—ã–º (–ø–µ—Ä–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ)")
    elif chat_data[chat_id]['main_id'] == user_id:
        bot.send_message(chat_id, f"{username}, {random.choice(soviet_phrases['accept'])}")

@bot.message_handler(func=lambda m: m.text and break_requested(m.text))
def handle_break_request(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º."""
    if message.chat.id == ADMIN_CHAT_ID: return
    chat_id = message.chat.id
    user_id = message.from_user.id
    username = get_username(message)
    now = datetime.datetime.now(moscow_tz)

    if chat_id not in chat_data or chat_data[chat_id].get('main_id') != user_id:
        bot.reply_to(message, "‚õî –ü–µ—Ä–µ—Ä—ã–≤ –º–æ–∂–µ—Ç –≤–∑—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –≥–ª–∞–≤–Ω—ã–π –Ω–∞ —Å–º–µ–Ω–µ.")
        return

    user = chat_data[chat_id]['users'][user_id]
    last_break_time = user.get('last_break_time')
    if last_break_time and (now - last_break_time).total_seconds() / 60 < BREAK_DELAY_MINUTES:
        remaining = int(BREAK_DELAY_MINUTES - (now - last_break_time).total_seconds() / 60)
        bot.reply_to(message, random.choice(soviet_phrases["break_too_soon"]).format(minutes=remaining))
        return

    user.update({
        'breaks_count': user.get('breaks_count', 0) + 1, 'on_break': True,
        'break_start_time': now, 'last_break_time': now, 'waiting_return_confirm': False,
    })
    bot.reply_to(message, random.choice(soviet_phrases["break_acknowledgement"]).format(username=username))
    save_history_event(chat_id, user_id, username, f"–£—à–µ–ª –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤ ({user['breaks_count']}-–π —Ä–∞–∑)")

@bot.message_handler(func=lambda m: m.text)
def handle_text_message(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å –ø–µ—Ä–µ—Ä—ã–≤–∞."""
    chat_id = message.chat.id
    user_id = message.from_user.id
    username = get_username(message)
    now = datetime.datetime.now(moscow_tz)

    user = chat_data.get(chat_id, {}).get('users', {}).get(user_id)
    if user and user.get('waiting_return_confirm'):
        if any(word in message.text.lower() for word in RETURN_CONFIRM_WORDS):
            user['on_break'] = False
            user['waiting_return_confirm'] = False
            bot.send_message(chat_id, random.choice(soviet_phrases["return_success"]).format(username=username))
            if (now - user['break_start_time']).total_seconds() / 60 > BREAK_DURATION_MINUTES:
                user['late_returns'] += 1
                save_history_event(chat_id, user_id, username, "–í–µ—Ä–Ω—É–ª—Å—è —Å –ø–µ—Ä–µ—Ä—ã–≤–∞ —Å –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º (—Ç–µ–∫—Å—Ç)")
            else:
                save_history_event(chat_id, user_id, username, "–í–µ—Ä–Ω—É–ª—Å—è —Å –ø–µ—Ä–µ—Ä—ã–≤–∞ –≤–æ–≤—Ä–µ–º—è (—Ç–µ–∫—Å—Ç)")

# ========================================
#           –û–¢–ß–Å–¢–´ –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê
# ========================================

def get_report_lines(chat_id, data, full_report=False):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç—á—ë—Ç–∞."""
    main_id = data.get('main_id')
    if not main_id or main_id not in data.get('users', {}):
        return ["–ì–ª–∞–≤–Ω—ã–π –≤–µ–¥—É—â–∏–π –µ—â—ë –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω."]
    
    main_user = data['users'][main_id]
    said_count = main_user.get('count', 0)
    perc = round(said_count / EXPECTED_VOICES_PER_SHIFT * 100)
    
    tag = "#–û—Ç—á–µ—Ç_–¢–µ–∫—Å—Ç_–í–µ–¥—É—â–µ–≥–æ" if full_report else "#–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π_–æ—Ç—á–µ—Ç"
    report_lines = [
        f"üìã {tag} ({data.get('shift_start', datetime.datetime.now(moscow_tz)).strftime('%d.%m.%Y')})",
        f"üè¢ –ß–∞—Ç: {data.get('chat_title') or get_chat_title(chat_id)}",
        f"üé§ –í–µ–¥—É—â–∏–π: {main_user.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
        f"üó£Ô∏è –ì–æ–ª–æ—Å–æ–≤—ã—Ö: {said_count} –∏–∑ {EXPECTED_VOICES_PER_SHIFT} ({perc}%)",
        f"‚òï –ü–µ—Ä–µ—Ä—ã–≤–æ–≤: {main_user.get('breaks_count', 0)}",
        f"‚è≥ –ó–∞–¥–µ—Ä–∂–µ–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞: {main_user.get('late_returns', 0)}",
    ]
    if full_report:
        if perc >= 80: praise = "\n" + random.choice(soviet_phrases["praise"])
        elif perc < 50: praise = "\n‚ö†Ô∏è –°–º–µ–Ω–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞, —ç—Ñ–∏—Ä –±—ã–ª —Å–ª–∏—à–∫–æ–º —Ç–∏—Ö–∏–º!"
        else: praise = ""
        report_lines.append(praise)
    return report_lines

def send_end_of_shift_reports():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤ –∏ –≤—ã–¥–∞—á–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π."""
    global shift_reports
    shift_reports = []
    
    for chat_id, data in chat_data.items():
        main_id = data.get('main_id')
        if not main_id: continue
        
        main_user_data = data['users'][main_id]
        check_and_award_achievements(chat_id, main_id, main_user_data)
        
        report_text_list = get_report_lines(chat_id, data, full_report=True)
        final_report = "\n".join(filter(None, report_text_list))
        
        try:
            bot.send_message(chat_id, final_report)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —á–∞—Ç {chat_id}: {e}")
            
        shift_reports.append({
            "chat_id": chat_id, "chat_title": data.get('chat_title'), "report": final_report
        })
    chat_data.clear()
    user_history.clear()

def send_admin_summary():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞."""
    if not shift_reports: return
    # ... –ª–æ–≥–∏–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

# ========================================
#           –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ó–ê–î–ê–ß
# ========================================

def check_users_activity():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤."""
    now = datetime.datetime.now(moscow_tz)
    for chat_id, data in list(chat_data.items()):
        main_id = data.get('main_id')
        if not main_id or main_id not in data.get('users', {}): continue
        user = data['users'][main_id]
        username = user['username']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å –ø–µ—Ä–µ—Ä—ã–≤–∞
        if user.get('on_break'):
            minutes_on_break = (now - user['break_start_time']).total_seconds() / 60
            if minutes_on_break > BREAK_DURATION_MINUTES and not user.get('waiting_return_confirm'):
                bot.send_message(chat_id, f"{username}, {random.choice(soviet_phrases['return_demand'])}")
                user.update({'waiting_return_confirm': True, 'remind_return_time': now})
                save_history_event(chat_id, main_id, username, "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å –ø–µ—Ä–µ—Ä—ã–≤–∞")
            continue

        # –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ
        if user.get('waiting_return_confirm'):
            remind_time = user.get('remind_return_time')
            if remind_time and (now - remind_time).total_seconds() / 60 > WAIT_RETURN_CONFIRM_MINUTES:
                bot.send_message(chat_id, f"{username}, {random.choice(soviet_phrases['return_demand_hard'])}")
                user['remind_return_time'] = now
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–≥–æ–ª–æ—Å–æ–≤—ã–µ)
        if 'last_voice_time' in user:
            minutes_passed = (now - user['last_voice_time']).total_seconds() / 60
            if minutes_passed > VOICE_TIMEOUT_MINUTES:
                last_remind = user.get('last_remind_time')
                if not last_remind or (now - last_remind).total_seconds() / 60 >= REMIND_EACH_MINUTES:
                    bot.send_message(chat_id, f"{username}, {random.choice(soviet_phrases['scary_reminder'])}")
                    user['last_remind_time'] = now
                    save_history_event(chat_id, main_id, username, "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≥–æ–ª–æ—Å–æ–≤–æ–º")
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–º –ø—Ä–æ—Å—Ç–æ–µ
                    if minutes_passed > VOICE_TIMEOUT_MINUTES * 1.5:
                        bot.send_message(ADMIN_CHAT_ID, f"‚ö†Ô∏è –ê–ª—è—Ä–º! –í —á–∞—Ç–µ '{get_chat_title(chat_id)}' –≤–µ–¥—É—â–∏–π {username} –º–æ–ª—á–∏—Ç —É–∂–µ {int(minutes_passed)} –º–∏–Ω—É—Ç!")

def duty_check_reminder():
    """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã, –µ—Å–ª–∏ –≥–ª–∞–≤–Ω—ã–π –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω."""
    now = datetime.datetime.now(moscow_tz)
    for chat_id in chat_data:
        if chat_id != ADMIN_CHAT_ID and not chat_data[chat_id].get('main_id'):
            bot.send_message(chat_id, random.choice(duty_call_phrases))
            chat_data[chat_id].update({'duty_check_time': now, 'duty_confirmed': False})

def duty_check_late():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≥–ª–∞–≤–Ω—ã–π –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–æ–≤—Ä–µ–º—è."""
    for chat_id, data in chat_data.items():
        if data.get('duty_check_time') and not data.get('duty_confirmed'):
            bot.send_message(chat_id, random.choice(duty_late_phrases))
            bot.send_message(ADMIN_CHAT_ID, f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –°–º–µ–Ω–∞ –≤ —á–∞—Ç–µ '{get_chat_title(chat_id)}' –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å –≤–æ–≤—Ä–µ–º—è.")
            data.update({'duty_check_time': None, 'duty_confirmed': False})

def run_scheduler():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á."""
    schedule.every(1).minutes.do(check_users_activity)
    schedule.every().day.at("04:01", moscow_tz).do(send_end_of_shift_reports)
    schedule.every().day.at("09:00", moscow_tz).do(send_admin_summary)
    schedule.every().day.at("19:00", moscow_tz).do(duty_check_reminder)
    schedule.every().day.at("19:31", moscow_tz).do(duty_check_late)
    
    while True:
        try:
            schedule.run_pending()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
        time.sleep(1)

# ========================================
#                –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ========================================

if __name__ == '__main__':
    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏...")
    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()
    
    while True:
        try:
            bot.polling(none_stop=True, timeout=60)
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ polling: {e}")
            time.sleep(15)
```
