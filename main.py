# -*- coding: utf-8 -*-
import logging
import os
import telebot
import datetime
import pytz
import time
import schedule
import threading
import random
import re
import csv
from telebot import types
from functools import wraps
from typing import Dict, List, Optional

# –ò–º–ø–æ—Ä—Ç —Ñ—Ä–∞–∑
try:
    from phrases import soviet_phrases, BREAK_KEYWORDS, RETURN_CONFIRM_WORDS
except ImportError:
    logging.warning("–§–∞–π–ª 'phrases.py' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
    BREAK_KEYWORDS = ["–ø–µ—Ä–µ—Ä—ã–≤"]
    RETURN_CONFIRM_WORDS = ["–≤–µ—Ä–Ω—É–ª—Å—è"]
    soviet_phrases = {"too_short": ["–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ!"], "accept": ["–ü—Ä–∏–Ω—è—Ç–æ."], "not_your_menu": ["–ù–µ –¥–ª—è –≤–∞—Å."]}

# ========================================
#           –ù–ê–°–¢–†–û–ô–ö–ò –ò –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
# ========================================
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s", handlers=[logging.FileHandler("bot.log", encoding="utf-8"), logging.StreamHandler()])

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

BOSS_ID = 196614680
STATS_FILE = 'user_stats.csv'

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–º–µ–Ω—ã
VOICE_TIMEOUT_MINUTES = 40
EXPECTED_VOICES_PER_SHIFT = 15
MIN_VOICE_SECONDS = 7
VOICE_COOLDOWN_SECONDS = 120
BREAK_DURATION_MINUTES = 15
BREAK_DELAY_MINUTES = 60

moscow_tz = pytz.timezone("Europe/Moscow")
bot = telebot.TeleBot(BOT_TOKEN, threaded=False, parse_mode="Markdown")
chat_data: Dict[int, dict] = {}
user_history: Dict[int, list] = {}

# ========================================
#      –†–ê–ë–û–¢–ê –° –§–ê–ô–õ–û–ú –°–¢–ê–¢–ò–°–¢–ò–ö–ò
# ========================================

def load_user_stats() -> Dict[int, Dict]:
    stats = {}
    if not os.path.exists(STATS_FILE):
        return stats
    try:
        with open(STATS_FILE, mode='r', newline='', encoding='utf-8') as f:
            reader = csv.reader(f)
            next(reader)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            for row in reader:
                user_id, shifts, voices, breaks, lates = row
                stats[int(user_id)] = {'total_shifts': int(shifts), 'total_voices': int(voices), 'total_breaks': int(breaks), 'total_lates': int(lates)}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    return stats

def save_user_stats(all_stats: Dict[int, Dict]):
    try:
        with open(STATS_FILE, mode='w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['user_id', 'total_shifts', 'total_voices', 'total_breaks', 'total_lates'])
            for user_id, stats in all_stats.items():
                writer.writerow([user_id, stats.get('total_shifts', 0), stats.get('total_voices', 0), stats.get('total_breaks', 0), stats.get('total_lates', 0)])
    except IOError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def update_historical_stats(user_id: int, shift_data: dict):
    all_stats = load_user_stats()
    if user_id not in all_stats:
        all_stats[user_id] = {'total_shifts': 0, 'total_voices': 0, 'total_breaks': 0, 'total_lates': 0}
    all_stats[user_id]['total_shifts'] += 1
    all_stats[user_id]['total_voices'] += shift_data.get('count', 0)
    all_stats[user_id]['total_breaks'] += shift_data.get('breaks_count', 0)
    all_stats[user_id]['total_lates'] += shift_data.get('late_returns', 0)
    save_user_stats(all_stats)

# ========================================
#           –î–ï–ö–û–†–ê–¢–û–†–´ –ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ========================================

def is_admin(user_id, chat_id):
    if user_id == BOSS_ID: return True
    try:
        return user_id in [admin.user.id for admin in bot.get_chat_administrators(chat_id)]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ {chat_id}: {e}")
        return False

def admin_required(func):
    @wraps(func)
    def wrapper(message):
        if not is_admin(message.from_user.id, message.chat.id):
            bot.reply_to(message, "‚õî –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞.")
            return
        return func(message)
    return wrapper

def get_username(user) -> str:
    return f"@{user.username}" if user.username else user.first_name

def init_user_data(user_id, username):
    return {
        'username': username, 'count': 0, 'on_break': False, 'breaks_count': 0,
        'late_returns': 0, 'last_voice_time': None, 'last_break_time': None,
        'pre_return_warning_sent': False, 'reminder_sent_at': None, 'response_times': [],
        'voice_deltas': [], 'voice_durations': [],
        'in_training': False, 'first_voice_time': None,
        'break_start_time': None, 'menu_message_id': None
    }

# ========================================
#           –õ–û–ì–ò–ö–ê INLINE –ú–ï–ù–Æ (–ù–û–í–û–ï)
# ========================================

def get_menu_text(user_data: dict) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –º–µ–Ω—é-—Å–æ–æ–±—â–µ–Ω–∏—è."""
    if user_data.get('on_break'):
        break_end_time = user_data['break_start_time'] + datetime.timedelta(minutes=BREAK_DURATION_MINUTES)
        return f"‚òïÔ∏è *–ù–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ.* –í–µ–¥—É—â–∏–π: {user_data['username']}\n–í–µ—Ä–Ω—É—Ç—å—Å—è –≤: {break_end_time.strftime('%H:%M:%S')}"
    else:
        return f"üé§ *–ù–∞ —Å–º–µ–Ω–µ.* –í–µ–¥—É—â–∏–π: {user_data['username']}\n–ì–°: {user_data['count']} | –ü–µ—Ä–µ—Ä—ã–≤—ã: {user_data['breaks_count']}"

def create_main_inline_keyboard(user_data: dict) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é-—Å–æ–æ–±—â–µ–Ω–∏—è."""
    markup = types.InlineKeyboardMarkup(row_width=2)
    if user_data.get('on_break'):
        markup.add(types.InlineKeyboardButton("‚úÖ –Ø –≤–µ—Ä–Ω—É–ª—Å—è", callback_data="break_return"))
    else:
        markup.add(types.InlineKeyboardButton("‚òïÔ∏è –£–π—Ç–∏ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤", callback_data="break_start"))
    
    markup.add(types.InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats"))
    return markup

def send_or_update_menu(chat_id: int, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–º–µ–Ω—é."""
    if chat_id not in chat_data or user_id not in chat_data[chat_id]['users']:
        return
    
    data = chat_data[chat_id]
    user_data = data['users'][user_id]
    menu_text = get_menu_text(user_data)
    keyboard = create_main_inline_keyboard(user_data)
    
    menu_message_id = user_data.get('menu_message_id')

    try:
        if menu_message_id:
            bot.edit_message_text(chat_id=chat_id, message_id=menu_message_id, text=menu_text, reply_markup=keyboard)
        else:
            msg = bot.send_message(chat_id, menu_text, reply_markup=keyboard)
            user_data['menu_message_id'] = msg.message_id
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –≤ —á–∞—Ç–µ {chat_id}: {e}")
        if 'message to edit not found' in str(e) or 'message not found' in str(e):
             # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
             msg = bot.send_message(chat_id, menu_text, reply_markup=keyboard)
             user_data['menu_message_id'] = msg.message_id

# ========================================
#           –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# ========================================

@bot.message_handler(commands=['start', '—Å—Ç–∞—Ä—Ç'])
def handle_start(message):
    chat_id = message.chat.id
    from_user = message.from_user
    username = get_username(from_user)

    if chat_id not in chat_data:
        chat_data[chat_id] = {'main_id': None, 'users': {}, 'shift_start': datetime.datetime.now(moscow_tz), 'chat_title': get_chat_title(chat_id)}

    users = chat_data[chat_id]['users']
    if from_user.id not in users:
        users[from_user.id] = init_user_data(from_user.id, username)

    if chat_data[chat_id].get('main_id') is not None:
        main_username = chat_data[chat_id].get('main_username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        bot.reply_to(message, f"–°–º–µ–Ω–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞. –¢–µ–∫—É—â–∏–π –≥–ª–∞–≤–Ω—ã–π: {main_username}.")
        return

    chat_data[chat_id]['main_id'] = from_user.id
    chat_data[chat_id]['main_username'] = username
    bot.send_message(chat_id, f"üëë {username}, –≤—ã –∑–∞—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ —Å–º–µ–Ω—É! –ù–∏–∂–µ –≤–∞—à –ø—É–ª—å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
    save_history_event(chat_id, from_user.id, username, "–°—Ç–∞–ª –≥–ª–∞–≤–Ω—ã–º –Ω–∞ —Å–º–µ–Ω–µ")
    send_or_update_menu(chat_id, from_user.id)


@bot.message_handler(commands=['check', '–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π'])
@admin_required
def admin_check_shift(message):
    """(–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤) –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–≤–æ–¥–∫—É –ø–æ —Å–º–µ–Ω–µ."""
    chat_id = message.chat.id
    data = chat_data.get(chat_id)

    if not data or not data.get('main_id'):
        bot.reply_to(message, "–°–º–µ–Ω–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    report_lines = get_report_lines(chat_id, data, full_report=False)
    final_report = "\n".join(report_lines)
    bot.send_message(chat_id, final_report)


@bot.message_handler(content_types=['voice'])
def handle_voice_message(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    username = get_username(message.from_user)
    now = datetime.datetime.now(moscow_tz)

    if chat_id not in chat_data:
        chat_data[chat_id] = {'main_id': None, 'users': {}, 'shift_start': now, 'chat_title': get_chat_title(chat_id)}
    if user_id not in chat_data[chat_id]['users']:
        chat_data[chat_id]['users'][user_id] = init_user_data(user_id, username)
    user = chat_data[chat_id]['users'][user_id]

    if user.get('on_break'):
        handle_user_return(chat_id, user_id)

    voice_duration = message.voice.duration
    save_history_event(chat_id, user_id, username, f"–ü—Ä–∏—Å–ª–∞–ª –ì–° ({voice_duration} —Å–µ–∫)")
    if voice_duration < MIN_VOICE_SECONDS:
        bot.reply_to(message, random.choice(soviet_phrases.get("too_short", ["–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ."])))
        return

    last_voice = user.get('last_voice_time')
    if last_voice and (now - last_voice).total_seconds() < VOICE_COOLDOWN_SECONDS:
        bot.reply_to(message, f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ! –°–ª–µ–¥—É—é—â–µ–µ –ì–° –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ {int(VOICE_COOLDOWN_SECONDS - (now - last_voice).total_seconds())} —Å–µ–∫.")
        return

    user['voice_durations'].append(voice_duration)
    if last_voice: user['voice_deltas'].append((now - last_voice).total_seconds() / 60)
    else: user['first_voice_time'] = now

    user['count'] += 1
    user['last_voice_time'] = now
    
    if "accept" in soviet_phrases:
        bot.reply_to(message, random.choice(soviet_phrases["accept"]))

    if chat_data[chat_id]['main_id'] is None:
        chat_data[chat_id]['main_id'] = user_id
        chat_data[chat_id]['main_username'] = username
        bot.send_message(chat_id, f"üëë {username} —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≥–ª–∞–≤–Ω—ã–º, –∑–∞–ø–∏—Å–∞–≤ –ø–µ—Ä–≤–æ–µ –ì–°! –ù–∏–∂–µ –≤–∞—à –ø—É–ª—å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        send_or_update_menu(chat_id, user_id)
    
    if chat_data[chat_id]['main_id'] == user_id:
        send_or_update_menu(chat_id, user_id)


# ========================================
#           –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö (–ù–û–í–´–ô)
# ========================================

@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    data = chat_data.get(chat_id, {})
    main_id = data.get('main_id')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª –∏–º–µ–Ω–Ω–æ –≥–ª–∞–≤–Ω—ã–π –Ω–∞ —Å–º–µ–Ω–µ
    if user_id != main_id:
        bot.answer_callback_query(call.id, text=random.choice(soviet_phrases.get("not_your_menu", ["–ù–µ –¥–ª—è –≤–∞—Å."])), show_alert=True)
        return
    
    user_data = data.get('users', {}).get(user_id)
    if not user_data:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    # --- –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
    if call.data == 'break_start':
        last_break = user_data.get('last_break_time')
        if last_break and (datetime.datetime.now(moscow_tz) - last_break).total_seconds() / 60 < BREAK_DELAY_MINUTES:
            remaining = int(BREAK_DELAY_MINUTES - (datetime.datetime.now(moscow_tz) - last_break).total_seconds() / 60)
            bot.answer_callback_query(call.id, f"–ï—â–µ —Ä–∞–Ω–æ! –°–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–µ—Ä—ã–≤ —á–µ—Ä–µ–∑ {remaining} –º–∏–Ω.", show_alert=True)
            return

        user_data.update({
            'on_break': True, 'break_start_time': datetime.datetime.now(moscow_tz),
            'last_break_time': datetime.datetime.now(moscow_tz),
            'breaks_count': user_data.get('breaks_count', 0) + 1,
            'pre_return_warning_sent': False
        })
        save_history_event(chat_id, user_id, user_data['username'], f"–£—à–µ–ª –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤ ({user_data['breaks_count']}-–π —Ä–∞–∑)")
        bot.answer_callback_query(call.id, f"–ü–µ—Ä–µ—Ä—ã–≤ –Ω–∞ {BREAK_DURATION_MINUTES} –º–∏–Ω—É—Ç –Ω–∞—á–∞—Ç.")
    
    elif call.data == 'break_return':
        handle_user_return(chat_id, user_id)
        bot.answer_callback_query(call.id, "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!")

    elif call.data == 'my_stats':
        all_stats = load_user_stats()
        stats = all_stats.get(user_id)
        if not stats:
            text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
        else:
            text = (
                f"‚≠ê –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {get_username(call.from_user)} ‚≠ê\n\n"
                f"üëë –°–º–µ–Ω –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats.get('total_shifts', 0)}\n"
                f"üó£Ô∏è –ì–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞–ø–∏—Å–∞–Ω–æ: {stats.get('total_voices', 0)}\n"
                f"‚òïÔ∏è –ü–µ—Ä–µ—Ä—ã–≤–æ–≤ –≤–∑—è—Ç–æ: {stats.get('total_breaks', 0)}\n"
                f"‚è≥ –û–ø–æ–∑–¥–∞–Ω–∏–π —Å –ø–µ—Ä–µ—Ä—ã–≤–∞: {stats.get('total_lates', 0)}"
            )
        bot.answer_callback_query(call.id) # –ü—Ä–æ—Å—Ç–æ —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ "–≥—Ä—É–∑–∏—Ç—å—Å—è"
        bot.send_message(chat_id, text, reply_to_message_id=call.message.message_id)

    # –ü–æ—Å–ª–µ –ª—é–±–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
    send_or_update_menu(chat_id, user_id)

# ========================================
#           –û–¢–ß–ï–¢–´, –ê–ù–ê–õ–ò–¢–ò–ö–ê –ò –ü–õ–ê–ù–ò–†–û–í–©–ò–ö
# ========================================
# (–§—É–Ω–∫—Ü–∏–∏ get_report_lines, generate_analytical_summary, check_users_activity, send_end_of_shift_reports, run_scheduler, –∏ __main__ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏)

def get_report_lines(chat_id, data, full_report=False):
    main_id = data.get('main_id')
    if not main_id or main_id not in data.get('users', {}): return ["–ì–ª–∞–≤–Ω—ã–π –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö."]
    
    user = data['users'][main_id]
    now = datetime.datetime.now(moscow_tz)

    avg_delta = sum(user['voice_deltas']) / len(user['voice_deltas']) if user['voice_deltas'] else 0
    avg_duration = sum(user['voice_durations']) / len(user['voice_durations']) if user['voice_durations'] else 0
    short_voices_perc = (sum(1 for d in user['voice_durations'] if d < 10) / len(user['voice_durations']) * 100) if user['voice_durations'] else 0
    avg_response_time = sum(user['response_times']) / len(user['response_times']) if user['response_times'] else 0
    max_pause = max(user['voice_deltas']) if user['voice_deltas'] else 0
    
    plan_percent = (user['count'] / EXPECTED_VOICES_PER_SHIFT * 100) if EXPECTED_VOICES_PER_SHIFT > 0 else 0

    tag = "#–û—Ç—á–µ—Ç_–°–º–µ–Ω—ã" if full_report else "#–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π_–û—Ç—á–µ—Ç"
    report = [
        f"üìã {tag} ({data.get('shift_start', now).strftime('%d.%m.%Y')})",
        f"üè¢ –ß–∞—Ç: {get_chat_title(chat_id)}",
        f"üé§ –í–µ–¥—É—â–∏–π: {user['username']}",
        "---",
        f"üó£Ô∏è **–ì–æ–ª–æ—Å–æ–≤—ã—Ö:** {user['count']} –∏–∑ {EXPECTED_VOICES_PER_SHIFT} ({plan_percent:.0f}%)",
        f"‚òï **–ü–µ—Ä–µ—Ä—ã–≤–æ–≤:** {user['breaks_count']}",
        f"‚è≥ **–û–ø–æ–∑–¥–∞–Ω–∏–π —Å –ø–µ—Ä–µ—Ä—ã–≤–∞:** {user['late_returns']}",
        "---",
        "**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:**",
        f"üìà –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Ç–º: {avg_delta:.1f} –º–∏–Ω/–ì–°",
        f"üîá –ú–∞–∫—Å. –ø–∞—É–∑–∞: {max_pause:.1f} –º–∏–Ω.",
        f"‚ö°Ô∏è –†–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–∞–ø–æ–º.: {avg_response_time:.1f} –º–∏–Ω." if avg_response_time else "‚ö°Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ –±—ã–ª–æ",
        "---",
        "**–ö–∞—á–µ—Å—Ç–≤–æ (–∫–æ—Å–≤–µ–Ω–Ω–æ):**",
        f"üìè –°—Ä. –¥–ª–∏–Ω–∞ –ì–°: {avg_duration:.1f} —Å–µ–∫.",
        f"ü§è –ö–æ—Ä–æ—Ç–∫–∏—Ö –ì–° (<10—Å): {short_voices_perc:.0f}%"
    ]
    return report

def generate_analytical_summary(user_data):
    summary = ["\n---", "üß† **–ê–Ω–∞–ª–∏–∑ —Å–º–µ–Ω—ã:**"]
    
    if user_data.get('voice_deltas'):
        if max(user_data['voice_deltas']) > VOICE_TIMEOUT_MINUTES * 1.5:
            summary.append("‚Ä¢  –∑–æ–Ω–∞ —Ä–æ—Å—Ç–∞: –±—ã–ª–∏ –¥–ª–∏–Ω–Ω—ã–µ –ø–∞—É–∑—ã –≤ —ç—Ñ–∏—Ä–µ.")
        else:
            summary.append("‚Ä¢ —Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞: —Ö–æ—Ä–æ—à–∏–π, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–∏—Ç–º.")

    if user_data.get('response_times'):
        if sum(user_data['response_times']) / len(user_data['response_times']) < 3:
            summary.append("‚Ä¢ —Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞: –æ—Ç–ª–∏—á–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        else:
            summary.append("‚Ä¢ –∑–æ–Ω–∞ —Ä–æ—Å—Ç–∞: —Å—Ç–æ–∏—Ç –±—ã—Å—Ç—Ä–µ–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
            
    if user_data.get('late_returns', 0) > 0:
        summary.append(f"‚Ä¢ –∑–æ–Ω–∞ —Ä–æ—Å—Ç–∞: –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ {user_data['late_returns']} –æ–ø–æ–∑–¥–∞–Ω–∏–µ(–π).")
    
    return "\n".join(summary) if len(summary) > 2 else "\n–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –∑–∞–º–µ—á–∞–Ω–∏–π –Ω–µ—Ç!"

def send_end_of_shift_reports():
    logging.info("–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤...")
    for chat_id, data in chat_data.items():
        main_id = data.get('main_id')
        if not main_id: continue
        
        main_user_data = data.get('users', {}).get(main_id)
        if not main_user_data: continue
        
        update_historical_stats(main_id, main_user_data)
        
        report_lines = get_report_lines(chat_id, data, full_report=True)
        analytical_summary = generate_analytical_summary(main_user_data)
        final_report = "\n".join(report_lines) + "\n" + analytical_summary
        
        try:
            bot.send_message(chat_id, final_report, parse_mode="Markdown")
            if ADMIN_REPORT_CHAT_ID and chat_id != ADMIN_REPORT_CHAT_ID:
                bot.send_message(ADMIN_REPORT_CHAT_ID, final_report, parse_mode="Markdown")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —á–∞—Ç {chat_id}: {e}")
            
    chat_data.clear()
    user_history.clear()
    logging.info("–î–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã –æ—á–∏—â–µ–Ω—ã, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –Ω–æ–≤–æ–π —Å–º–µ–Ω–µ.")

def run_scheduler():
    schedule.every(1).minutes.do(check_users_activity)
    schedule.every().day.at("23:50", "Europe/Moscow").do(send_end_of_shift_reports)
    
    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == '__main__':
    logging.info("ü§ñ –ö–∞–Ω–æ–Ω–∏—á–Ω–∞—è —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ (—Å inline-–º–µ–Ω—é) –∑–∞–ø—É—â–µ–Ω–∞...")
    threading.Thread(target=run_scheduler, daemon=True).start()
    while True:
        try:
            bot.polling(none_stop=True, interval=0)
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ polling: {e}")
            time.sleep(15)
