# -*- coding: utf-8 -*-
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ v5.1:
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /testsheet –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Google.
- –í—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.
"""

import logging
import os
import telebot
import datetime
import pytz
import time
import schedule
import threading
import random
import csv
import json
from telebot import types
from functools import wraps
from typing import Dict, List

# –ò–º–ø–æ—Ä—Ç gspread –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google –¢–∞–±–ª–∏—Ü–∞–º–∏
try:
    import gspread
except ImportError:
    logging.error("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ gspread –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–µ: pip install gspread google-auth-oauthlib")
    gspread = None

# –ò–º–ø–æ—Ä—Ç —Ñ—Ä–∞–∑
try:
    from phrases import soviet_phrases, BREAK_KEYWORDS, RETURN_CONFIRM_WORDS
except ImportError:
    logging.warning("–§–∞–π–ª 'phrases.py' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
    BREAK_KEYWORDS = ["–ø–µ—Ä–µ—Ä—ã–≤", "–æ—Ç–¥—ã—Ö"]
    RETURN_CONFIRM_WORDS = ["–≤–µ—Ä–Ω—É–ª—Å—è", "–Ω–∞ –º–µ—Å—Ç–µ"]
    soviet_phrases = {"too_short": ["–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ!"], "accept": ["–ü—Ä–∏–Ω—è—Ç–æ."]}

# ========================================
#           –ù–ê–°–¢–†–û–ô–ö–ò –ò –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
# ========================================
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s", handlers=[logging.FileHandler("bot.log", encoding="utf-8"), logging.StreamHandler()])

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

BOSS_ID = 196614680
ADMIN_REPORT_CHAT_ID = -1002645821302 
LAST_REPORT_FILE = 'last_shift_report.txt'

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–º–µ–Ω—ã
VOICE_TIMEOUT_MINUTES = 40
EXPECTED_VOICES_PER_SHIFT = 15
MIN_VOICE_SECONDS = 7
VOICE_COOLDOWN_SECONDS = 120
BREAK_DURATION_MINUTES = 15
BREAK_DELAY_MINUTES = 60

moscow_tz = pytz.timezone("Europe/Moscow")
bot = telebot.TeleBot(BOT_TOKEN, threaded=False, parse_mode="Markdown")
chat_data: Dict[int, dict] = {}
user_history: Dict[int, List[str]] = {}

# ========================================
#      –†–ê–ë–û–¢–ê –° GOOGLE –¢–ê–ë–õ–ò–¶–ê–ú–ò
# ========================================
def get_sheet():
    """–ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç—Å—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–±–æ—á–∏–π –ª–∏—Å—Ç Google –¢–∞–±–ª–∏—Ü—ã –ø–æ –∫–ª—é—á—É."""
    if not gspread: return None
    try:
        creds_json_str = os.getenv("GOOGLE_CREDENTIALS_JSON")
        sheet_key = os.getenv("GOOGLE_SHEET_KEY")
        if not creds_json_str or not sheet_key:
            logging.error("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Google Sheets –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return None
        
        creds_dict = json.loads(creds_json_str)
        gc = gspread.service_account_from_dict(creds_dict)
        spreadsheet = gc.open_by_key(sheet_key)
        return spreadsheet.sheet1
    except gspread.exceptions.SpreadsheetNotFound:
        logging.error(f"–¢–∞–±–ª–∏—Ü–∞ —Å –∫–ª—é—á–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.")
        return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
        return None

def create_sheet_header_if_needed(worksheet):
    """–°–æ–∑–¥–∞–µ—Ç —à–∞–ø–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞—è."""
    try:
        if worksheet.acell('A1').value is None:
            headers = [
                "–î–∞—Ç–∞", "ID –ß–∞—Ç–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ –ß–∞—Ç–∞", "ID –í–µ–¥—É—â–µ–≥–æ", "–¢–µ–≥ –í–µ–¥—É—â–µ–≥–æ",
                "–ì–æ–ª–æ—Å–æ–≤—ã—Ö (—à—Ç)", "–ü–ª–∞–Ω (—à—Ç)", "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (%)", "–ü–µ—Ä–µ—Ä—ã–≤–æ–≤ (—à—Ç)",
                "–û–ø–æ–∑–¥–∞–Ω–∏–π (—à—Ç)", "–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Ç–º (–º–∏–Ω)", "–ú–∞–∫—Å. –ø–∞—É–∑–∞ (–º–∏–Ω)", "–°—Ä. –¥–ª–∏–Ω–∞ –ì–° (—Å–µ–∫)"
            ]
            worksheet.append_row(headers, value_input_option='USER_ENTERED')
            worksheet.format('A1:M1', {'textFormat': {'bold': True}, 'horizontalAlignment': 'CENTER'})
            logging.info("–°–æ–∑–¥–∞–Ω–∞ —à–∞–ø–∫–∞ –≤ Google –¢–∞–±–ª–∏—Ü–µ.")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —à–∞–ø–∫—É –≤ Google –¢–∞–±–ª–∏—Ü–µ: {e}")

def append_shift_to_google_sheet(chat_id, data):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∏—Ç–æ–≥–∞–º–∏ —Å–º–µ–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü—É."""
    worksheet = get_sheet()
    if not worksheet:
        logging.error("–í—ã–≥—Ä—É–∑–∫–∞ –≤ Google Sheets –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞: –ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    create_sheet_header_if_needed(worksheet)
    
    main_id = data.get('main_id')
    user_data = data.get('users', {}).get(main_id)
    if not user_data: return
    
    now = datetime.datetime.now(moscow_tz)
    plan_percent = (user_data['count'] / EXPECTED_VOICES_PER_SHIFT * 100) if EXPECTED_VOICES_PER_SHIFT > 0 else 0
    avg_delta = sum(user_data['voice_deltas']) / len(user_data['voice_deltas']) if user_data['voice_deltas'] else 0
    max_pause = max(user_data['voice_deltas']) if user_data['voice_deltas'] else 0
    avg_duration = sum(user_data['voice_durations']) / len(user_data['voice_durations']) if user_data['voice_durations'] else 0

    row_data = [
        data.get('shift_start', now).strftime('%d.%m.%Y'),
        chat_id, get_chat_title(chat_id),
        main_id, user_data['username'],
        user_data['count'], EXPECTED_VOICES_PER_SHIFT, f"{plan_percent:.0f}%",
        user_data['breaks_count'], user_data['late_returns'],
        f"{avg_delta:.1f}", f"{max_pause:.1f}", f"{avg_duration:.1f}",
    ]

    try:
        worksheet.append_row(row_data, value_input_option='USER_ENTERED')
        logging.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ —Å–º–µ–Ω–µ –≤ —á–∞—Ç–µ {chat_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü—É.")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Google –¢–∞–±–ª–∏—Ü—É: {e}")

# ========================================
#           –î–ï–ö–û–†–ê–¢–û–†–´ –ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ========================================
def is_admin(user_id, chat_id):
    if user_id == BOSS_ID: return True
    if chat_id > 0: return False
    try:
        return user_id in [admin.user.id for admin in bot.get_chat_administrators(chat_id)]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ {chat_id}: {e}")
        return False

def admin_required(func):
    @wraps(func)
    def wrapper(message):
        chat_id_for_check = message.chat.id if message.chat.type != 'private' else ADMIN_REPORT_CHAT_ID
        if not is_admin(message.from_user.id, chat_id_for_check):
            bot.reply_to(message, "‚õî –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
            return
        return func(message)
    return wrapper

def get_username(user) -> str:
    return f"@{user.username}" if user.username else user.first_name

def init_user_data(user_id, username):
    return {
        'username': username, 'count': 0, 'on_break': False, 'breaks_count': 0,
        'late_returns': 0, 'last_voice_time': None, 'last_break_time': None,
        'reminder_sent_at': None, 'response_times': [], 'voice_deltas': [], 'voice_durations': [],
        'break_start_time': None
    }

def handle_user_return(chat_id, user_id):
    user = chat_data.get(chat_id, {}).get('users', {}).get(user_id)
    if not user or not user.get('on_break'): return

    now = datetime.datetime.now(moscow_tz)
    break_duration_minutes = (now - user['break_start_time']).total_seconds() / 60

    user['on_break'] = False
    
    if break_duration_minutes > BREAK_DURATION_MINUTES:
        user['late_returns'] += 1
        bot.send_message(chat_id, f"‚úÖ {user['username']}, —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã –æ–ø–æ–∑–¥–∞–ª–∏ –Ω–∞ {int(break_duration_minutes - BREAK_DURATION_MINUTES)} –º–∏–Ω.")
    else:
        bot.send_message(chat_id, f"üëç {user['username']}, —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ú–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤–æ–≤—Ä–µ–º—è.")

def get_chat_title(chat_id: int) -> str:
    try:
        return bot.get_chat(chat_id).title or str(chat_id)
    except Exception:
        return str(chat_id)

def save_history_event(chat_id, user_id, username, event_description):
    if chat_id not in user_history: user_history[chat_id] = []
    now_str = datetime.datetime.now(moscow_tz).strftime('%Y-%m-%d %H:%M:%S')
    user_history[chat_id].append(f"{now_str} | {username} ({user_id}) | {event_description}")
    logging.info(f"HISTORY [{get_chat_title(chat_id)}]: {username} - {event_description}")

# ========================================
#           –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
# ========================================
@bot.message_handler(commands=['start', '—Å—Ç–∞—Ä—Ç'])
def handle_start(message):
    chat_id = message.chat.id
    if chat_id > 0:
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ.")
        return

    from_user = message.from_user
    username = get_username(from_user)

    if chat_id not in chat_data:
        chat_data[chat_id] = {'main_id': None, 'users': {}, 'shift_start': datetime.datetime.now(moscow_tz)}

    if from_user.id not in chat_data[chat_id]['users']:
        chat_data[chat_id]['users'][from_user.id] = init_user_data(from_user.id, username)

    try:
        target_username = message.text.split()[1]
        if target_username.startswith('@'):
            all_users_in_chat = chat_data[chat_id].get('users', {})
            target_user_info = next((u for u in all_users_in_chat.values() if u['username'].lower() == target_username.lower()), None)
            
            if not target_user_info:
                bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–Ω –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ —á—Ç–æ-–Ω–∏–±—É–¥—å –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
                return
            
            target_user_id = next(uid for uid, u in all_users_in_chat.items() if u['username'].lower() == target_username.lower())
            
            chat_data[chat_id]['main_id'] = target_user_id
            chat_data[chat_id]['main_username'] = target_user_info['username']
            bot.send_message(chat_id, f"üëë –ü–æ –∫–æ–º–∞–Ω–¥–µ –æ—Ç {username}, –Ω–æ–≤—ã–º –≥–ª–∞–≤–Ω—ã–º –Ω–∞ —Å–º–µ–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω {target_user_info['username']}!")
            save_history_event(chat_id, from_user.id, username, f"–ü–µ—Ä–µ–¥–∞–ª —Å–º–µ–Ω—É {target_user_info['username']}")
            return
    except IndexError:
        pass

    if chat_data[chat_id].get('main_id') is not None:
        main_username = chat_data[chat_id].get('main_username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        bot.reply_to(message, f"–°–º–µ–Ω–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞. –¢–µ–∫—É—â–∏–π –≥–ª–∞–≤–Ω—ã–π: {main_username}.")
        return

    chat_data[chat_id]['main_id'] = from_user.id
    chat_data[chat_id]['main_username'] = username
    bot.send_message(chat_id, f"üëë {username}, –≤—ã –∑–∞—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ —Å–º–µ–Ω—É! –£–¥–∞—á–∏!")
    save_history_event(chat_id, from_user.id, username, "–°—Ç–∞–ª –≥–ª–∞–≤–Ω—ã–º –Ω–∞ —Å–º–µ–Ω–µ")


@bot.message_handler(commands=['restart', '—Ä–µ—Å—Ç–∞—Ä—Ç'])
@admin_required
def handle_restart(message):
    chat_id = message.chat.id
    if chat_id in chat_data and chat_data[chat_id].get('main_id') is not None:
        chat_data[chat_id]['main_id'] = None
        chat_data[chat_id]['main_username'] = None
        bot.reply_to(message, "üîÑ –°–º–µ–Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞. –¢–µ–∫—É—â–∏–π –≥–ª–∞–≤–Ω—ã–π —Å–±—Ä–æ—à–µ–Ω.")
        save_history_event(chat_id, message.from_user.id, get_username(message.from_user), "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª —Å–º–µ–Ω—É")
    else:
        bot.reply_to(message, "–ê–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ –∏ —Ç–∞–∫ –Ω–µ –±—ã–ª–æ.")


@bot.message_handler(commands=['check', '–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'])
@admin_required
def admin_check_shift(message):
    if message.chat.type == 'private' and message.from_user.id == BOSS_ID:
        chat_id = ADMIN_REPORT_CHAT_ID
    else:
        chat_id = message.chat.id
        
    data = chat_data.get(chat_id)

    if not data or not data.get('main_id'):
        bot.reply_to(message, f"–í —á–∞—Ç–µ `{get_chat_title(chat_id)}` —Å–º–µ–Ω–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å.")
        return

    user = data.get('users', {}).get(data['main_id'])
    if not user:
        bot.reply_to(message, "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–∫—É—â–µ–º—É –≤–µ–¥—É—â–µ–º—É.")
        return

    plan_percent = (user['count'] / EXPECTED_VOICES_PER_SHIFT * 100) if EXPECTED_VOICES_PER_SHIFT > 0 else 0
    report_text = (
        f"üìã #–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π_–æ—Ç—á–µ—Ç ({datetime.datetime.now(moscow_tz).strftime('%d.%m.%Y')})\n"
        f"üè¢ –ß–∞—Ç: {get_chat_title(chat_id)}\n"
        f"üé§ –í–µ–¥—É—â–∏–π: {user['username']}\n"
        f"üó£Ô∏è –ì–æ–ª–æ—Å–æ–≤—ã—Ö: {user['count']} –∏–∑ {EXPECTED_VOICES_PER_SHIFT} ({plan_percent:.0f}%)\n"
        f"‚òï –ü–µ—Ä–µ—Ä—ã–≤–æ–≤: {user['breaks_count']}\n"
        f"‚è≥ –ó–∞–¥–µ—Ä–∂–µ–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞: {user['late_returns']}"
    )
    bot.reply_to(message, report_text)
    

@bot.message_handler(commands=['–æ—Ç—á–µ—Ç'])
@admin_required
def admin_get_final_report(message):
    chat_id = message.chat.id
    data = chat_data.get(chat_id)

    if not data or not data.get('main_id'):
        bot.reply_to(message, "–°–º–µ–Ω–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å, —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        return

    report_lines = generate_detailed_report(chat_id, data)
    analytical_summary = generate_analytical_summary(data['users'][data['main_id']])
    final_report = "\n".join(report_lines) + "\n" + analytical_summary
    
    bot.send_message(chat_id, final_report)
    if ADMIN_REPORT_CHAT_ID and chat_id != ADMIN_REPORT_CHAT_ID:
        bot.send_message(ADMIN_REPORT_CHAT_ID, final_report)


@bot.message_handler(commands=['–≤—ã–≥—Ä—É–∑–∫–∞'])
@admin_required
def admin_export_history(message):
    chat_id = message.chat.id
    history = user_history.get(chat_id)

    if not history:
        bot.reply_to(message, "–ò—Å—Ç–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –ø—É—Å—Ç–∞.")
        return

    try:
        filename = f"history_{chat_id}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(f"–ò—Å—Ç–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π –¥–ª—è —á–∞—Ç–∞: {get_chat_title(chat_id)}\n" + "="*40 + "\n" + "\n".join(history))
        
        with open(filename, 'rb') as f:
            bot.send_document(message.chat.id, f, caption="–õ–æ–≥ —Å–æ–±—ã—Ç–∏–π —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω—ã.")
        
        os.remove(filename)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏.")


@bot.message_handler(commands=['help'])
def handle_help(message):
    help_text = """
*–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞:*

`/start` ‚Äî –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è –≥–ª–∞–≤–Ω—ã–º –Ω–∞ —Å–º–µ–Ω–µ.
`/start @username` ‚Äî –ù–∞–∑–Ω–∞—á–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–ª–∞–≤–Ω—ã–º –ø–æ –µ–≥–æ —Ç–µ–≥—É.
`/restart` –∏–ª–∏ `/—Ä–µ—Å—Ç–∞—Ä—Ç` ‚Äî –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–º–µ–Ω—É, —Å–±—Ä–æ—Å–∏–≤ —Ç–µ–∫—É—â–µ–≥–æ –≥–ª–∞–≤–Ω–æ–≥–æ.

`/–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π` ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
`/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞` ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∞–Ω–∞–ª–æ–≥ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞).
`/–æ—Ç—á–µ—Ç` ‚Äî –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å–º–µ–Ω–µ –≤ —á–∞—Ç –∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É.

`/–æ–±–µ–¥` –∏–ª–∏ `/–ø–µ—Ä–µ—Ä—ã–≤` ‚Äî –£–π—Ç–∏ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ).
`/–≤—ã–≥—Ä—É–∑–∫–∞` ‚Äî –í—ã–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π —Å–º–µ–Ω—ã –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞.

`/analyze` –∏–ª–∏ `/–≤–µ—Å—å–æ—Ç—á–µ—Ç` ‚Äî (–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤) –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.
`/testsheet` ‚Äî (–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤) –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Google Sheets.
`/help` ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É.

*–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:*
- –î–ª—è —É—Ö–æ–¥–∞ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å: `–ø–µ—Ä–µ—Ä—ã–≤`, `–æ–±–µ–¥`, `–ø–æ–∫—É—Ä–∏—Ç—å`, `–æ—Ç–æ–π–¥—É` –∏ —Ç.–¥.
- –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å –ø–µ—Ä–µ—Ä—ã–≤–∞: `–Ω–∞ –º–µ—Å—Ç–µ`, `–≤–µ—Ä–Ω—É–ª—Å—è`, `–ø—Ä–∏—à–µ–ª`, `—Ç—É—Ç` –∏ —Ç.–¥.
"""
    bot.reply_to(message, help_text)

@bot.message_handler(commands=['testsheet'])
@admin_required
def test_google_sheet(message):
    """(–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤) –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Google Sheets."""
    bot.reply_to(message, "‚öôÔ∏è –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Google Sheets...")
    
    worksheet = get_sheet() 
    
    if worksheet:
        try:
            sheet_title = worksheet.spreadsheet.title
            bot.send_message(message.chat.id, 
                f"‚úÖ *–£–°–ü–ï–•!*\n\n"
                f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Google Sheets —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n"
                f"–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ: *'{sheet_title}'*.\n\n"
                f"–í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
            )
        except Exception as e:
            bot.send_message(message.chat.id, 
                f"‚ùóÔ∏è*–û–®–ò–ë–ö–ê –ù–ê –≠–¢–ê–ü–ï –ß–¢–ï–ù–ò–Ø!*\n\n"
                f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. "
                f"–í–æ–∑–º–æ–∂–Ω–æ, —É —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.\n\n"
                f"–î–µ—Ç–∞–ª–∏: `{e}`"
            )
    else:
        bot.send_message(message.chat.id, 
            f"‚ùå *–ü–†–û–í–ê–õ!*\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥ –±–æ—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n"
            f"**–ß–∞—Å—Ç—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**\n"
            f"1. –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–∞–±–ª–∏—Ü—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π `GOOGLE_SHEET_KEY`.\n"
            f"2. –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–ª—é—á–∞ `GOOGLE_CREDENTIALS_JSON`.\n"
            f"3. –í—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –¥–æ—Å—Ç—É–ø —Å–µ—Ä–≤–∏—Å–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É (`evgenich-logger@...`) –∫ –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ —Å –ø—Ä–∞–≤–∞–º–∏ '–†–µ–¥–∞–∫—Ç–æ—Ä–∞'."
        )

# ========================================
#           –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô
# ========================================
@bot.message_handler(content_types=['voice'])
def handle_voice_message(message):
    chat_id = message.chat.id
    if chat_id > 0: return

    user_id = message.from_user.id
    username = get_username(message.from_user)
    now = datetime.datetime.now(moscow_tz)

    if chat_id not in chat_data:
        chat_data[chat_id] = {'main_id': None, 'users': {}, 'shift_start': now}
    if user_id not in chat_data[chat_id]['users']:
        chat_data[chat_id]['users'][user_id] = init_user_data(user_id, username)
    user = chat_data[chat_id]['users'][user_id]

    if user.get('on_break'):
        handle_user_return(chat_id, user_id)

    voice_duration = message.voice.duration
    if voice_duration < MIN_VOICE_SECONDS:
        bot.reply_to(message, random.choice(soviet_phrases.get("too_short", ["–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ."])))
        return

    last_voice = user.get('last_voice_time')
    if last_voice and (now - last_voice).total_seconds() < VOICE_COOLDOWN_SECONDS:
        bot.reply_to(message, f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ! –°–ª–µ–¥—É—é—â–µ–µ –ì–° –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ {int(VOICE_COOLDOWN_SECONDS - (now - last_voice).total_seconds())} —Å–µ–∫.")
        return

    user['voice_durations'].append(voice_duration)
    if last_voice: user['voice_deltas'].append((now - last_voice).total_seconds() / 60)
    else: user['first_voice_time'] = now

    user['count'] += 1
    user['last_voice_time'] = now
    save_history_event(chat_id, user_id, username, f"–ü—Ä–∏—Å–ª–∞–ª –ì–° ({voice_duration} —Å–µ–∫)")
    
    if "accept" in soviet_phrases:
        bot.reply_to(message, random.choice(soviet_phrases["accept"]))

    if chat_data[chat_id].get('main_id') is None:
        chat_data[chat_id]['main_id'] = user_id
        chat_data[chat_id]['main_username'] = username
        bot.send_message(chat_id, f"üëë {username} —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≥–ª–∞–≤–Ω—ã–º, –∑–∞–ø–∏—Å–∞–≤ –ø–µ—Ä–≤–æ–µ –ì–°!")

@bot.message_handler(commands=['–ø–µ—Ä–µ—Ä—ã–≤', '–æ–±–µ–¥'])
def handle_break_command(message):
    handle_break_request(message)

@bot.message_handler(func=lambda m: m.text and any(word in m.text.lower() for word in BREAK_KEYWORDS))
def handle_break_request(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    if chat_id > 0: return

    if chat_data.get(chat_id, {}).get('main_id') != user_id: return
        
    user = chat_data.get(chat_id, {}).get('users', {}).get(user_id, {})
    if user.get('on_break'):
        bot.reply_to(message, "–í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ.")
        return

    last_break = user.get('last_break_time')
    if last_break and (datetime.datetime.now(moscow_tz) - last_break).total_seconds() / 60 < BREAK_DELAY_MINUTES:
        remaining_time = int(BREAK_DELAY_MINUTES - (datetime.datetime.now(moscow_tz) - last_break).total_seconds() / 60)
        bot.reply_to(message, f"–°–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–µ—Ä—ã–≤ –º–æ–∂–Ω–æ –≤–∑—è—Ç—å —á–µ—Ä–µ–∑ {remaining_time} –º–∏–Ω.")
        return

    user.update({
        'on_break': True, 'break_start_time': datetime.datetime.now(moscow_tz),
        'last_break_time': datetime.datetime.now(moscow_tz),
        'breaks_count': user.get('breaks_count', 0) + 1,
    })
    bot.reply_to(message, f"‚úÖ –ü–µ—Ä–µ—Ä—ã–≤ –Ω–∞ {BREAK_DURATION_MINUTES} –º–∏–Ω—É—Ç –Ω–∞—á–∞—Ç.")
    save_history_event(chat_id, user_id, get_username(message.from_user), "–£—à–µ–ª –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤")
    
@bot.message_handler(func=lambda m: m.text and any(word in m.text.lower() for word in RETURN_CONFIRM_WORDS))
def handle_return_message(message):
    user_id = message.from_user.id
    if message.chat.id > 0: return
    if chat_data.get(message.chat.id, {}).get('main_id') == user_id:
        handle_user_return(message.chat.id, user_id)

# ========================================
#           –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ò –û–¢–ß–ï–¢–´
# ========================================
def check_users_activity():
    now = datetime.datetime.now(moscow_tz)
    for chat_id, data in list(chat_data.items()):
        main_id = data.get('main_id')
        if not main_id or not data.get('users', {}).get(main_id): continue
        user = data['users'][main_id]
        username = user.get('username', '–í–µ–¥—É—â–∏–π')

        if user.get('on_break') and not user.get('pre_return_warning_sent', False):
            if user.get('break_start_time') and (now - user['break_start_time']).total_seconds() / 60 > BREAK_DURATION_MINUTES:
                reminder_text = random.choice(soviet_phrases.get("return_demand", ["–ø–æ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è."]))
                bot.send_message(chat_id, f"‚è∞ {username}, {reminder_text}")
                user['pre_return_warning_sent'] = True
        
        last_voice = user.get('last_voice_time')
        if not user.get('on_break') and last_voice and not user.get('reminder_sent_at'):
            if (now - last_voice).total_seconds() / 60 > VOICE_TIMEOUT_MINUTES:
                reminder_text = random.choice(soviet_phrases.get("voice_reminder", ["–≤—ã –¥–∞–≤–Ω–æ –Ω–µ –≤—ã—Ö–æ–¥–∏–ª–∏ –≤ —ç—Ñ–∏—Ä."]))
                bot.send_message(chat_id, f"üö® {username}, {reminder_text}")
                user['reminder_sent_at'] = now
                save_history_event(chat_id, main_id, username, "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ—Å—Ç–æ–µ")

def generate_detailed_report(chat_id: int, data: dict) -> list:
    main_id = data.get('main_id')
    if not main_id or main_id not in data.get('users', {}): return ["–ì–ª–∞–≤–Ω—ã–π –Ω–µ –±—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω."]
    
    user = data['users'][main_id]
    now = datetime.datetime.now(moscow_tz)

    avg_delta = sum(user['voice_deltas']) / len(user['voice_deltas']) if user['voice_deltas'] else 0
    avg_duration = sum(user['voice_durations']) / len(user['voice_durations']) if user['voice_durations'] else 0
    short_voices_perc = (sum(1 for d in user['voice_durations'] if d < 10) / len(user['voice_durations']) * 100) if user['voice_durations'] else 0
    avg_response_time = sum(user.get('response_times', [])) / len(user.get('response_times', [])) if user.get('response_times') else 0
    max_pause = max(user['voice_deltas']) if user['voice_deltas'] else 0
    plan_percent = (user['count'] / EXPECTED_VOICES_PER_SHIFT * 100) if EXPECTED_VOICES_PER_SHIFT > 0 else 0

    report = [
        f"üìã #–ò—Ç–æ–≥–æ–≤—ã–π_–û—Ç—á–µ—Ç_–°–º–µ–Ω—ã ({data.get('shift_start', now).strftime('%d.%m.%Y')})",
        f"üè¢ –ß–∞—Ç: {get_chat_title(chat_id)}",
        f"üé§ –í–µ–¥—É—â–∏–π: {user['username']}", "---",
        f"üó£Ô∏è **–ì–æ–ª–æ—Å–æ–≤—ã—Ö:** {user['count']} –∏–∑ {EXPECTED_VOICES_PER_SHIFT} ({plan_percent:.0f}%)",
        f"‚òï **–ü–µ—Ä–µ—Ä—ã–≤–æ–≤:** {user['breaks_count']}",
        f"‚è≥ **–û–ø–æ–∑–¥–∞–Ω–∏–π —Å –ø–µ—Ä–µ—Ä—ã–≤–∞:** {user['late_returns']}", "---",
        "**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:**",
        f"üìà –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Ç–º: {avg_delta:.1f} –º–∏–Ω/–ì–°",
        f"üîá –ú–∞–∫—Å. –ø–∞—É–∑–∞: {max_pause:.1f} –º–∏–Ω.",
        f"‚ö°Ô∏è –†–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–∞–ø–æ–º.: {avg_response_time:.1f} –º–∏–Ω." if avg_response_time else "‚ö°Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ –±—ã–ª–æ", "---",
        "**–ö–∞—á–µ—Å—Ç–≤–æ (–∫–æ—Å–≤–µ–Ω–Ω–æ):**",
        f"üìè –°—Ä. –¥–ª–∏–Ω–∞ –ì–°: {avg_duration:.1f} —Å–µ–∫.",
        f"ü§è –ö–æ—Ä–æ—Ç–∫–∏—Ö –ì–° (<10—Å): {short_voices_perc:.0f}%"
    ]
    return report

def generate_analytical_summary(user_data: dict) -> str:
    summary = ["\n---", "üß† **–ê–Ω–∞–ª–∏–∑ —Å–º–µ–Ω—ã:**"]
    
    if user_data.get('voice_deltas') and len(user_data['voice_deltas']) > 0:
        if max(user_data['voice_deltas']) > VOICE_TIMEOUT_MINUTES * 1.5:
            summary.append("‚Ä¢  –∑–æ–Ω–∞ —Ä–æ—Å—Ç–∞: –±—ã–ª–∏ –¥–ª–∏–Ω–Ω—ã–µ –ø–∞—É–∑—ã –≤ —ç—Ñ–∏—Ä–µ.")
        else:
            summary.append("‚Ä¢ —Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞: —Ö–æ—Ä–æ—à–∏–π, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–∏—Ç–º.")

    if user_data.get('response_times'):
        if (sum(user_data['response_times']) / len(user_data['response_times'])) < 3:
            summary.append("‚Ä¢ —Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞: –æ—Ç–ª–∏—á–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        else:
            summary.append("‚Ä¢ –∑–æ–Ω–∞ —Ä–æ—Å—Ç–∞: —Å—Ç–æ–∏—Ç –±—ã—Å—Ç—Ä–µ–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
            
    if user_data.get('late_returns', 0) > 0:
        summary.append(f"‚Ä¢ –∑–æ–Ω–∞ —Ä–æ—Å—Ç–∞: –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ {user_data['late_returns']} –æ–ø–æ–∑–¥–∞–Ω–∏–µ(–π).")
    
    return "\n".join(summary) if len(summary) > 2 else "\n–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –∑–∞–º–µ—á–∞–Ω–∏–π –Ω–µ—Ç!"

def send_end_of_shift_reports():
    logging.info("–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Å–º–µ–Ω–∞–º –≤ 04:01...")
    active_chats_copy = list(chat_data.keys())

    for chat_id in active_chats_copy:
        data = chat_data.get(chat_id)
        if not data or not data.get('main_id') or data['main_id'] not in data.get('users', {}):
            continue
        
        main_user_data = data['users'][data['main_id']]
        if main_user_data.get('count', 0) > 0:
            append_shift_to_google_sheet(chat_id, data)
            
            report_lines = generate_detailed_report(chat_id, data)
            analytical_summary = generate_analytical_summary(main_user_data)
            final_report = "\n".join(report_lines) + "\n" + analytical_summary
            
            try:
                bot.send_message(chat_id, final_report)
                if ADMIN_REPORT_CHAT_ID and chat_id != ADMIN_REPORT_CHAT_ID:
                    bot.send_message(ADMIN_REPORT_CHAT_ID, final_report)
                with open(LAST_REPORT_FILE, 'w', encoding='utf-8') as f:
                    f.write(final_report)
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å/—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —á–∞—Ç–µ {chat_id}: {e}")
    
    chat_data.clear()
    user_history.clear()
    logging.info("–î–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö —Å–º–µ–Ω –æ—á–∏—â–µ–Ω—ã.")

def run_scheduler():
    schedule.every(1).minutes.do(check_users_activity)
    schedule.every().day.at("04:01", "Europe/Moscow").do(send_end_of_shift_reports)
    
    while True:
        schedule.run_pending()
        time.sleep(1)

# ========================================
#           –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ========================================
if __name__ == '__main__':
    logging.info("ü§ñ –ë–æ—Ç (–≤–µ—Ä—Å–∏—è 5.1, Google Sheets –ø–æ ID) –∑–∞–ø—É—â–µ–Ω...")
    threading.Thread(target=run_scheduler, daemon=True).start()
    while True:
        try:
            bot.polling(none_stop=True, interval=0)
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ polling: {e}")
            time.sleep(15)
