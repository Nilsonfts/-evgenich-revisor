# handlers/wizards.py

import logging
import datetime
from telebot import types

from utils import admin_required, save_json_data
from state import user_states, chat_configs, ad_templates
from config import TIMEZONE_MAP, CHAT_CONFIG_FILE, AD_TEMPLATES_FILE

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
AVAILABLE_CONCEPTS = {
    "–†–í–ë": {"name": "–†–í–ë", "description": "–ö–æ–Ω—Ü–µ–ø—Ü–∏—è –†–í–ë - —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –≤–µ—á–µ—Ä –¥–ª—è –¥–≤–æ–∏—Ö"},
    "–ù–ï–ë–ê–†": {"name": "–ù–ï–ë–ê–†", "description": "–ù–ï–ë–ê–† - –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –±–∞—Ä —Å –∂–∏–≤–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π"},
    "–ï–í–ì–ï–ù–ò–ß": {"name": "–ï–í–ì–ï–ù–ò–ß", "description": "–ï–í–ì–ï–ù–ò–ß - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ –∫–∞—Ä–∞–æ–∫–µ"},
    "–°–ü–õ–ï–¢–ù–ò": {"name": "–°–ü–õ–ï–¢–ù–ò", "description": "–°–ü–õ–ï–¢–ù–ò - —É—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –¥–ª—è –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤"},
    "–û–†–ë–ò–¢–ê": {"name": "–û–†–ë–ò–¢–ê", "description": "–û–†–ë–ò–¢–ê - –∫–æ—Å–º–∏—á–µ—Å–∫–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞"}
}

# –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ–∫–ª–∞–º—ã —Å AI-–ø–æ–º–æ—â—å—é
AD_CATEGORIES = {
    "menu": {"name": "üçΩÔ∏è –ú–µ–Ω—é", "keywords": ["–º–µ–Ω—é", "–±–ª—é–¥–æ", "–∫—É—Ö–Ω—è", "–µ–¥–∞", "–Ω–∞–ø–∏—Ç–æ–∫", "–∫–æ–∫—Ç–µ–π–ª—å", "–ø–∏—Ü—Ü–∞", "—Å—É—à–∏"]},
    "events": {"name": "üéâ –°–æ–±—ã—Ç–∏—è", "keywords": ["–≤–µ—á–µ—Ä–∏–Ω–∫–∞", "–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤", "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "–ø—Ä–∞–∑–¥–Ω–∏–∫", "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", "—Å–≤–∞–¥—å–±–∞", "–≤—ã–ø—É—Å–∫–Ω–æ–π"]},
    "promo": {"name": "üéÅ –ê–∫—Ü–∏–∏", "keywords": ["—Å–∫–∏–¥–∫–∞", "–∞–∫—Ü–∏—è", "–ø—Ä–æ–º–æ", "–±–µ—Å–ø–ª–∞—Ç–Ω–æ", "–ø–æ–¥–∞—Ä–æ–∫", "–±–æ–Ω—É—Å", "—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞", "—Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞"]},
    "karaoke": {"name": "üé§ –ö–∞—Ä–∞–æ–∫–µ", "keywords": ["–∫–∞—Ä–∞–æ–∫–µ", "–ø–µ—Å–Ω—è", "–º–∏–∫—Ä–æ—Ñ–æ–Ω", "—Å—Ü–µ–Ω–∞", "–ø–µ–Ω–∏–µ", "–∫–æ–Ω–∫—É—Ä—Å", "–≥–æ–ª–æ—Å", "–º—É–∑—ã–∫–∞"]},
    "booking": {"name": "üìÖ –ë—Ä–æ–Ω—å", "keywords": ["–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Å—Ç–æ–ª–∏–∫", "—Ä–µ–∑–µ—Ä–≤", "–º–µ—Å—Ç–æ", "–∑–∞–∫–∞–∑", "–∑–∞–ª", "–∫–∞–±–∏–Ω–∫–∞", "vip"]},
    "entertainment": {"name": "üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "keywords": ["–∏–≥—Ä–∞", "–±–∏–ª—å—è—Ä–¥", "–¥–∞—Ä—Ç—Å", "–Ω–∞—Å—Ç–æ–ª—å–Ω–∞—è", "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ", "—Ç—É—Ä–Ω–∏—Ä", "championship"]},
    "drinks": {"name": "üç∫ –ù–∞–ø–∏—Ç–∫–∏", "keywords": ["–ø–∏–≤–æ", "–≤–∏–Ω–æ", "–∫–æ–∫—Ç–µ–π–ª—å", "–≤–∏—Å–∫–∏", "–≤–æ–¥–∫–∞", "—à–∞–º–ø–∞–Ω—Å–∫–æ–µ", "–±–∞—Ä", "–∞–ª–∫–æ–≥–æ–ª—å"]},
    "loyalty": {"name": "üíé –õ–æ—è–ª—å–Ω–æ—Å—Ç—å", "keywords": ["–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç", "–ø—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏", "–∫–∞—Ä—Ç–∞", "–Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è", "vip", "—Å—Ç–∞—Ç—É—Å"]},
    "general": {"name": "üì¢ –û–±—â–µ–µ", "keywords": ["—Ä–∞–±–æ—Ç–∞–µ–º", "–æ—Ç–∫—Ä—ã—Ç—ã", "–≥—Ä–∞—Ñ–∏–∫", "–∫–æ–Ω—Ç–∞–∫—Ç—ã", "–∞–¥—Ä–µ—Å", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–Ω–æ–≤–æ—Å—Ç–∏"]}
}

def categorize_ad_text(text: str) -> str:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""
    text_lower = text.lower()
    scores = {}
    
    for category_id, category_data in AD_CATEGORIES.items():
        score = 0
        for keyword in category_data["keywords"]:
            if keyword in text_lower:
                score += 1
        scores[category_id] = score
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    best_category = max(scores, key=scores.get)
    return best_category if scores[best_category] > 0 else "general"

def register_wizard_handlers(bot):

    # ========================================
    #   –ú–ê–°–¢–ï–† –ù–ê–°–¢–†–û–ô–ö–ò –ß–ê–¢–ê (/setup_wizard)
    # ========================================

    @bot.message_handler(commands=['setup_wizard'])
    @admin_required(bot)
    def handle_setup_wizard(message: types.Message):
        """–ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Ç–∞ –≤ 4 —à–∞–≥–∞."""
        chat_id = message.chat.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
        if str(chat_id) not in user_states:
            user_states[str(chat_id)] = {}
        
        user_states[str(chat_id)]["setup_step"] = "city"
        user_states[str(chat_id)]["setup_data"] = {}
        
        text = ("üßô‚Äç‚ôÇÔ∏è **–ú–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞**\n\n"
                "‚úÖ **–®–∞–≥ 1 –∏–∑ 4: –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥**\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –≥–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞–≤–µ–¥–µ–Ω–∏–µ.\n"
                "–ü—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ö–∞–∑–∞–Ω—å\n\n"
                "üí¨ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
        
        msg = bot.send_message(chat_id, text, parse_mode="Markdown")
        bot.register_next_step_handler(msg, process_city_input)

    def process_city_input(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞."""
        chat_id = str(message.chat.id)
        city = message.text.strip()
        
        if len(city) < 2:
            text = "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            msg = bot.send_message(message.chat.id, text)
            bot.register_next_step_handler(msg, process_city_input)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥
        user_states[chat_id]["setup_data"]["city"] = city
        
        text = ("‚úÖ **–®–∞–≥ 2 –∏–∑ 4: –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.**\n"
                "–í–≤–µ–¥–∏—Ç–µ —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç –ú–æ—Å–∫–≤—ã. –ü—Ä–∏–º–µ—Ä: +3 –∏–ª–∏ -1\n\n"
                "üí¨ –í–≤–µ–¥–∏—Ç–µ —Å–º–µ—â–µ–Ω–∏–µ:")
        
        msg = bot.send_message(message.chat.id, text, parse_mode="Markdown")
        bot.register_next_step_handler(msg, process_timezone_input)

    def process_timezone_input(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞."""
        chat_id = str(message.chat.id)
        timezone_input = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç (+3, -1, etc.)
        try:
            if timezone_input.startswith(('+', '-')):
                offset = int(timezone_input)
                if -12 <= offset <= 12:
                    user_states[chat_id]["setup_data"]["timezone"] = offset
                    
                    text = ("‚úÖ **–®–∞–≥ 3 –∏–∑ 4: –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –∑–∞–¥–∞–π—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Å–º–µ–Ω—ã.**\n"
                            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞. –ü—Ä–∏–º–µ—Ä: 19:00 04:00\n\n"
                            "üí¨ –í–≤–µ–¥–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫:")
                    
                    msg = bot.send_message(message.chat.id, text, parse_mode="Markdown")
                    bot.register_next_step_handler(msg, process_schedule_input)
                    return
        except ValueError:
            pass
        
        text = ("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞.\n"
                "–í–≤–µ–¥–∏—Ç–µ —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç –ú–æ—Å–∫–≤—ã. –ü—Ä–∏–º–µ—Ä: +3 –∏–ª–∏ -1\n\n"
                "üí¨ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        
        msg = bot.send_message(message.chat.id, text, parse_mode="Markdown")
        bot.register_next_step_handler(msg, process_timezone_input)

    def process_schedule_input(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–º–µ–Ω—ã."""
        chat_id = str(message.chat.id)
        schedule_input = message.text.strip()
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        try:
            parts = schedule_input.split()
            if len(parts) == 2:
                start_time, end_time = parts
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (HH:MM)
                if ':' in start_time and ':' in end_time:
                    start_hour, start_min = map(int, start_time.split(':'))
                    end_hour, end_min = map(int, end_time.split(':'))
                    
                    if (0 <= start_hour <= 23 and 0 <= start_min <= 59 and 
                        0 <= end_hour <= 23 and 0 <= end_min <= 59):
                        
                        user_states[chat_id]["setup_data"]["schedule"] = {
                            "start": start_time,
                            "end": end_time
                        }
                        
                        text = ("‚úÖ **–®–∞–≥ 4 –∏–∑ 4: –ì—Ä–∞—Ñ–∏–∫ –∑–∞–¥–∞–Ω! –ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ: —É–∫–∞–∂–∏—Ç–µ –ø–ª–∞–Ω (–Ω–æ—Ä–º—É) –ì–° –∑–∞ —Å–º–µ–Ω—É.**\n"
                                "–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 25\n\n"
                                "üí¨ –í–≤–µ–¥–∏—Ç–µ –ø–ª–∞–Ω:")
                        
                        msg = bot.send_message(message.chat.id, text, parse_mode="Markdown")
                        bot.register_next_step_handler(msg, process_plan_input)
                        return
        except ValueError:
            pass
        
        text = ("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞. –ü—Ä–∏–º–µ—Ä: 19:00 04:00\n\n"
                "üí¨ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        
        msg = bot.send_message(message.chat.id, text, parse_mode="Markdown")
        bot.register_next_step_handler(msg, process_schedule_input)

    def process_plan_input(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–ª–∞–Ω–∞ –ì–°."""
        chat_id = str(message.chat.id)
        plan_input = message.text.strip()
        
        try:
            plan = int(plan_input)
            if plan > 0:
                user_states[chat_id]["setup_data"]["plan_voices"] = plan
                
                # –¢–µ–ø–µ—Ä—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ü–µ–ø—Ü–∏—é
                text = ("‚úÖ **–§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥: –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –∑–∞–≤–µ–¥–µ–Ω–∏—è**\n\n"
                        "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏:**\n"
                        "‚Ä¢ –†–í–ë - —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –≤–µ—á–µ—Ä –¥–ª—è –¥–≤–æ–∏—Ö\n"
                        "‚Ä¢ –ï–í–ì–ï–ù–ò–ß - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ –∫–∞—Ä–∞–æ–∫–µ\n"
                        "‚Ä¢ –ù–ï–ë–ê–† - –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –±–∞—Ä\n"
                        "‚Ä¢ –°–ü–õ–ï–¢–ù–ò - —É—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞\n"
                        "‚Ä¢ –û–†–ë–ò–¢–ê - –∫–æ—Å–º–∏—á–µ—Å–∫–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞\n\n"
                        "üí¨ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏:")
                
                msg = bot.send_message(message.chat.id, text, parse_mode="Markdown")
                bot.register_next_step_handler(msg, process_concept_input)
                return
        except ValueError:
            pass
        
        text = ("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.\n"
                "–ü—Ä–∏–º–µ—Ä: 25\n\n"
                "üí¨ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        
        msg = bot.send_message(message.chat.id, text, parse_mode="Markdown")
        bot.register_next_step_handler(msg, process_plan_input)

    def process_concept_input(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
        concept_input = message.text.strip().upper()
        chat_id = str(message.chat.id)
        
        # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
        available_concepts = ["–†–í–ë", "–ï–í–ì–ï–ù–ò–ß", "–ù–ï–ë–ê–†", "–°–ü–õ–ï–¢–ù–ò", "–û–†–ë–ò–¢–ê"]
        
        if concept_input in available_concepts:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            setup_data = user_states[chat_id]["setup_data"]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if chat_id not in chat_configs:
                chat_configs[chat_id] = {}
            
            chat_configs[chat_id].update({
                "concept": concept_input,
                "city": setup_data["city"],
                "timezone": setup_data["timezone"],
                "schedule": setup_data["schedule"],
                "plan_voices": setup_data["plan_voices"],
                "configured_at": datetime.datetime.now().isoformat()
            })
            
            save_json_data(CHAT_CONFIG_FILE, chat_configs)
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if "setup_step" in user_states[chat_id]:
                del user_states[chat_id]["setup_step"]
            if "setup_data" in user_states[chat_id]:
                del user_states[chat_id]["setup_data"]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            schedule = setup_data["schedule"]
            timezone_str = f"+{setup_data['timezone']}" if setup_data['timezone'] >= 0 else str(setup_data['timezone'])
            
            text = (f"üéâ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                    f"üìç **–ì–æ—Ä–æ–¥:** {setup_data['city']}\n"
                    f"üïê **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:** –ú–°–ö{timezone_str}\n"
                    f"üìÖ **–ì—Ä–∞—Ñ–∏–∫ —Å–º–µ–Ω—ã:** {schedule['start']} - {schedule['end']}\n"
                    f"üéØ **–ü–ª–∞–Ω –ì–° –∑–∞ —Å–º–µ–Ω—É:** {setup_data['plan_voices']}\n"
                    f"üè¢ **–ö–æ–Ω—Ü–µ–ø—Ü–∏—è:** {concept_input}\n\n"
                    f"‚úÖ –ß–∞—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            
            bot.send_message(message.chat.id, text, parse_mode="Markdown")
            
            logging.info(f"Chat {chat_id} fully configured: {chat_configs[chat_id]}")
        else:
            text = (f"‚ùå **–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è: {concept_input}**\n\n"
                    "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏:**\n"
                    "‚Ä¢ –†–í–ë\n"
                    "‚Ä¢ –ï–í–ì–ï–ù–ò–ß\n"
                    "‚Ä¢ –ù–ï–ë–ê–†\n"
                    "‚Ä¢ –°–ü–õ–ï–¢–ù–ò\n"
                    "‚Ä¢ –û–†–ë–ò–¢–ê\n\n"
                    "üí¨ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            
            msg = bot.send_message(message.chat.id, text, parse_mode="Markdown")
            bot.register_next_step_handler(msg, process_concept_input)
    
    # ========================================
    #   –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ï–ö–õ–ê–ú–û–ô (/ads)
    # ========================================
    
    @bot.message_handler(commands=['ads'])
    @admin_required(bot)
    def command_ads_new(message: types.Message):
        """–ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–æ–π —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏."""
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É", callback_data="ads_add_new"),
            types.InlineKeyboardButton("üìÅ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="ads_view_categories")
        )
        markup.add(
            types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ä–µ–∫–ª–∞–º—ã", callback_data="ads_search"),
            types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="ads_stats")
        )
        
        text = ("üéØ **–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–æ–π 2.0**\n\n"
                "**–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
                "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤\n"
                "‚Ä¢ –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\n"
                "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
                "‚Ä¢ –ü—Ä–æ—Å—Ç–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        
        bot.send_message(message.chat.id, text, parse_mode="Markdown", reply_markup=markup)
    
    def show_ad_categories_menu(bot, chat_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
        markup = types.InlineKeyboardMarkup(row_width=2)
        
        for category_id, category_data in AD_CATEGORIES.items():
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            count = sum(1 for brand_data in ad_templates.values() 
                       for city_data in brand_data.values() 
                       for ads in city_data.values() 
                       for ad in ads if ad.get("category") == category_id)
            
            markup.add(types.InlineKeyboardButton(
                f"{category_data['name']} ({count})", 
                callback_data=f"ads_category_{category_id}"
            ))
        
        markup.add(types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="ads_back_main"))
        
        bot.send_message(chat_id, "üìÅ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ–∫–ª–∞–º—ã:**\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", 
                        parse_mode="Markdown", reply_markup=markup)
    
    def show_ads_in_category(bot, chat_id: int, category_id: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        category_name = AD_CATEGORIES.get(category_id, {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è")
        ads_in_category = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for brand, brand_data in ad_templates.items():
            for city, city_data in brand_data.items():
                for ad_type, ads_list in city_data.items():
                    for i, ad in enumerate(ads_list):
                        if ad.get("category") == category_id:
                            ads_in_category.append({
                                "brand": brand,
                                "city": city,
                                "type": ad_type,
                                "index": i,
                                "text": ad.get("text", ""),
                                "created": ad.get("created", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                            })
        
        if not ads_in_category:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="ads_view_categories"))
            bot.send_message(chat_id, f"üìÅ **{category_name}**\n\n–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.", 
                           parse_mode="Markdown", reply_markup=markup)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        text = f"üìÅ **{category_name}** ({len(ads_in_category)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π)\n\n"
        markup = types.InlineKeyboardMarkup(row_width=1)
        
        for i, ad in enumerate(ads_in_category[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
            preview = ad["text"][:50] + "..." if len(ad["text"]) > 50 else ad["text"]
            markup.add(types.InlineKeyboardButton(
                f"{ad['brand']}/{ad['city']} - {preview}",
                callback_data=f"ads_view_{ad['brand']}_{ad['city']}_{ad['type']}_{ad['index']}"
            ))
        
        if len(ads_in_category) > 10:
            text += f"*–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10 –∏–∑ {len(ads_in_category)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π*\n\n"
        
        markup.add(types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="ads_view_categories"))
        
        bot.send_message(chat_id, text, parse_mode="Markdown", reply_markup=markup)
    
    def start_add_ad_wizard(bot, chat_id: int, user_id: int):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
        user_states[user_id] = {
            "state": "ads_wizard_awaiting_brand", 
            "chat_id": chat_id,
            "ad_data": {}
        }
        
        text = ("‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è**\n\n"
                "**–®–∞–≥ 1 –∏–∑ 4:** –í–≤–µ–¥–∏—Ç–µ **–±—Ä–µ–Ω–¥** –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n"
                "*–ü—Ä–∏–º–µ—Ä:* `my-brand`\n\n"
                "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        
        msg = bot.send_message(chat_id, text, parse_mode="Markdown")
        bot.register_next_step_handler(msg, process_ad_brand, bot)
    
    def process_ad_brand(message: types.Message, bot):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–µ–Ω–¥–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
        user_id = message.from_user.id
        state = user_states.get(user_id, {})
        if not state or state.get("state") != "ads_wizard_awaiting_brand":
            return
        
        if message.text == '/cancel':
            del user_states[user_id]
            return bot.reply_to(message, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        
        brand = message.text.strip().lower()
        state["ad_data"]["brand"] = brand
        state["state"] = "ads_wizard_awaiting_city"
        
        text = ("‚úÖ **–®–∞–≥ 2 –∏–∑ 4:** –í–≤–µ–¥–∏—Ç–µ **–≥–æ—Ä–æ–¥** –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n"
                "*–ü—Ä–∏–º–µ—Ä:* `moscow`")
        
        msg = bot.reply_to(message, text, parse_mode="Markdown")
        bot.register_next_step_handler(msg, process_ad_city, bot)
    
    def process_ad_city(message: types.Message, bot):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
        user_id = message.from_user.id
        state = user_states.get(user_id, {})
        if not state or state.get("state") != "ads_wizard_awaiting_city":
            return
        
        if message.text == '/cancel':
            del user_states[user_id]
            return bot.reply_to(message, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        
        city = message.text.strip().lower()
        state["ad_data"]["city"] = city
        state["state"] = "ads_wizard_awaiting_type"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        markup = types.InlineKeyboardMarkup(row_width=2)
        ad_types = ["–≤–µ—á–µ—Ä–Ω—è—è", "–¥–Ω–µ–≤–Ω–∞—è", "–∞–∫—Ü–∏—è", "–æ–±—â–∞—è"]
        for ad_type in ad_types:
            markup.add(types.InlineKeyboardButton(
                ad_type.capitalize(), 
                callback_data=f"ads_wizard_type_{ad_type}"
            ))
        
        text = ("‚úÖ **–®–∞–≥ 3 –∏–∑ 4:** –í—ã–±–µ—Ä–∏—Ç–µ **—Ç–∏–ø** –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
        
        bot.reply_to(message, text, parse_mode="Markdown", reply_markup=markup)
    
    def process_ad_text(message: types.Message, bot):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
        user_id = message.from_user.id
        state = user_states.get(user_id, {})
        if not state or state.get("state") != "ads_wizard_awaiting_text":
            return
        
        if message.text == '/cancel':
            del user_states[user_id]
            return bot.reply_to(message, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        
        ad_text = message.text.strip()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –ø–æ–º–æ—â—å—é AI
        category = categorize_ad_text(ad_text)
        category_name = AD_CATEGORIES.get(category, {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        brand = state["ad_data"]["brand"]
        city = state["ad_data"]["city"]
        ad_type = state["ad_data"]["type"]
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if brand not in ad_templates:
            ad_templates[brand] = {}
        if city not in ad_templates[brand]:
            ad_templates[brand][city] = {}
        if ad_type not in ad_templates[brand][city]:
            ad_templates[brand][city][ad_type] = []
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        new_ad = {
            "text": ad_text,
            "category": category,
            "created": datetime.datetime.now().strftime("%d.%m.%Y %H:%M"),
            "created_by": message.from_user.username or message.from_user.first_name
        }
        
        ad_templates[brand][city][ad_type].append(new_ad)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        save_json_data(AD_TEMPLATES_FILE, ad_templates)
        
        final_text = (f"üéâ **–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!**\n\n"
                     f"**–ë—Ä–µ–Ω–¥:** {brand.upper()}\n"
                     f"**–ì–æ—Ä–æ–¥:** {city.capitalize()}\n"
                     f"**–¢–∏–ø:** {ad_type.capitalize()}\n"
                     f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category_name}\n"
                     f"**–ê–≤—Ç–æ—Ä:** {new_ad['created_by']}\n\n"
                     f"**–¢–µ–∫—Å—Ç:**\n{ad_text}")
        
        bot.reply_to(message, final_text, parse_mode="Markdown")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        del user_states[user_id]
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    @bot.callback_query_handler(func=lambda call: call.data.startswith("ads_wizard_type_"))
    def handle_ad_type_callback(call):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
        user_id = call.from_user.id
        state = user_states.get(user_id, {})
        if not state or state.get("state") != "ads_wizard_awaiting_type":
            return
        
        ad_type = call.data.replace("ads_wizard_type_", "")
        state["ad_data"]["type"] = ad_type
        state["state"] = "ads_wizard_awaiting_text"
        
        text = (f"‚úÖ **–¢–∏–ø –≤—ã–±—Ä–∞–Ω:** {ad_type.capitalize()}\n\n"
                "**–®–∞–≥ 4 –∏–∑ 4:** –í–≤–µ–¥–∏—Ç–µ **—Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è**.\n"
                "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è.\n\n"
                "*–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∫–∞–∫ '—Å–∫–∏–¥–∫–∞', '–∫–∞—Ä–∞–æ–∫–µ', '–º–µ–Ω—é' –¥–ª—è —Ç–æ—á–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode="Markdown")
        bot.answer_callback_query(call.id, f"–¢–∏–ø: {ad_type}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        msg = bot.send_message(call.message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(msg, process_ad_text, bot)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
    @bot.callback_query_handler(func=lambda call: call.data.startswith("ads_edit_"))
    def handle_ad_edit_callback(call):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
        try:
            parts = call.data.replace("ads_edit_", "").split("_")
            if len(parts) >= 4:
                brand, city, ad_type, index = parts[0], parts[1], parts[2], int(parts[3])
                start_edit_ad_wizard(bot, call.message.chat.id, call.from_user.id, brand, city, ad_type, index)
                bot.answer_callback_query(call.id, "–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        except Exception as e:
            bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("ads_delete_"))
    def handle_ad_delete_callback(call):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
        try:
            parts = call.data.replace("ads_delete_", "").split("_")
            if len(parts) >= 4:
                brand, city, ad_type, index = parts[0], parts[1], parts[2], int(parts[3])
                delete_ad(bot, call.message.chat.id, brand, city, ad_type, index)
                bot.answer_callback_query(call.id, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
        except Exception as e:
            bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    def start_edit_ad_wizard(bot, chat_id: int, user_id: int, brand: str, city: str, ad_type: str, index: int):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
        try:
            ad = ad_templates[brand][city][ad_type][index]
            
            user_states[user_id] = {
                "state": "ads_edit_awaiting_text",
                "chat_id": chat_id,
                "edit_data": {
                    "brand": brand,
                    "city": city,
                    "type": ad_type,
                    "index": index,
                    "original_text": ad["text"]
                }
            }
            
            text = (f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è**\n\n"
                   f"**–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:**\n{ad['text']}\n\n"
                   f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:")
            
            msg = bot.send_message(chat_id, text, parse_mode="Markdown")
            bot.register_next_step_handler(msg, process_edit_ad_text, bot)
            
        except (KeyError, IndexError):
            bot.send_message(chat_id, "‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    
    def process_edit_ad_text(message: types.Message, bot):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏."""
        user_id = message.from_user.id
        state = user_states.get(user_id, {})
        if not state or state.get("state") != "ads_edit_awaiting_text":
            return
        
        if message.text == '/cancel':
            del user_states[user_id]
            return bot.reply_to(message, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        
        edit_data = state["edit_data"]
        new_text = message.text.strip()
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            brand, city, ad_type, index = edit_data["brand"], edit_data["city"], edit_data["type"], edit_data["index"]
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            new_category = categorize_ad_text(new_text)
            
            ad_templates[brand][city][ad_type][index].update({
                "text": new_text,
                "category": new_category,
                "updated": datetime.datetime.now().strftime("%d.%m.%Y %H:%M"),
                "updated_by": message.from_user.username or message.from_user.first_name
            })
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            save_json_data(AD_TEMPLATES_FILE, ad_templates)
            
            category_name = AD_CATEGORIES.get(new_category, {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
            bot.reply_to(message, 
                        f"‚úÖ **–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!**\n\n"
                        f"**–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:** {category_name}\n"
                        f"**–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:**\n{new_text}", 
                        parse_mode="Markdown")
            
        except Exception as e:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        del user_states[user_id]
    
    def delete_ad(bot, chat_id: int, brand: str, city: str, ad_type: str, index: int):
        """–£–¥–∞–ª—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ."""
        try:
            ad = ad_templates[brand][city][ad_type][index]
            del ad_templates[brand][city][ad_type][index]
            
            # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–ª –ø—É—Å—Ç—ã–º, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            if not ad_templates[brand][city][ad_type]:
                del ad_templates[brand][city][ad_type]
                
            # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ —Å—Ç–∞–ª –ø—É—Å—Ç—ã–º, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            if not ad_templates[brand][city]:
                del ad_templates[brand][city]
                
            # –ï—Å–ª–∏ –±—Ä–µ–Ω–¥ —Å—Ç–∞–ª –ø—É—Å—Ç—ã–º, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            if not ad_templates[brand]:
                del ad_templates[brand]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            save_json_data(AD_TEMPLATES_FILE, ad_templates)
            
            preview = ad["text"][:50] + "..." if len(ad["text"]) > 50 else ad["text"]
            bot.send_message(chat_id, f"üóëÔ∏è **–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ:**\n{preview}", parse_mode="Markdown")
            
        except (KeyError, IndexError):
            bot.send_message(chat_id, "‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.")
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")

    # ========================================
    #   –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–õ–õ–ë–ï–ö–û–í –î–õ–Ø –†–ï–ö–õ–ê–ú–´
    # ========================================
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("ads_"))
    def handle_ads_callbacks(call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∫–æ–ª–ª–±–µ–∫–æ–≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–ª–∞–º—ã."""
        try:
            if call.data == "ads_add_new":
                start_add_ad_wizard(bot, call.message.chat.id, call.from_user.id)
                bot.answer_callback_query(call.id, "–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã")
                
            elif call.data == "ads_view_categories":
                show_ad_categories_menu(bot, call.message.chat.id)
                bot.answer_callback_query(call.id)
                
            elif call.data.startswith("ads_category_"):
                category_id = call.data.replace("ads_category_", "")
                show_ads_in_category(bot, call.message.chat.id, category_id)
                bot.answer_callback_query(call.id)
                
            elif call.data == "ads_search":
                start_ads_search(bot, call.message.chat.id, call.from_user.id)
                bot.answer_callback_query(call.id, "–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫")
                
            elif call.data == "ads_stats":
                show_ads_statistics(bot, call.message.chat.id)
                bot.answer_callback_query(call.id)
                
            elif call.data == "ads_back_main":
                command_ads_new(call.message)
                bot.answer_callback_query(call.id)
                
            elif call.data.startswith("ads_view_"):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                parts = call.data.replace("ads_view_", "").split("_")
                if len(parts) >= 4:
                    brand, city, ad_type, index = parts[0], parts[1], parts[2], int(parts[3])
                    show_single_ad(bot, call.message.chat.id, brand, city, ad_type, index)
                bot.answer_callback_query(call.id)
                
        except Exception as e:
            bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    def start_ads_search(bot, chat_id: int, user_id: int):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫ —Ä–µ–∫–ª–∞–º—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º."""
        user_states[user_id] = {
            "state": "ads_searching", 
            "chat_id": chat_id
        }
        
        text = ("üîç **–ü–æ–∏—Å–∫ —Ä–µ–∫–ª–∞–º—ã**\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º.\n"
                "*–ü—Ä–∏–º–µ—Ä:* `—Å–∫–∏–¥–∫–∞`, `–∫–∞—Ä–∞–æ–∫–µ`, `–º–µ–Ω—é`\n\n"
                "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        
        msg = bot.send_message(chat_id, text, parse_mode="Markdown")
        bot.register_next_step_handler(msg, process_ads_search, bot)
    
    def process_ads_search(message: types.Message, bot):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
        user_id = message.from_user.id
        state = user_states.get(user_id, {})
        if not state or state.get("state") != "ads_searching":
            return
        
        if message.text == '/cancel':
            del user_states[user_id]
            return bot.reply_to(message, "–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.")
        
        search_query = message.text.lower()
        found_ads = []
        
        # –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º
        for brand, brand_data in ad_templates.items():
            for city, city_data in brand_data.items():
                for ad_type, ads_list in city_data.items():
                    for i, ad in enumerate(ads_list):
                        if search_query in ad.get("text", "").lower():
                            found_ads.append({
                                "brand": brand,
                                "city": city,
                                "type": ad_type,
                                "index": i,
                                "text": ad.get("text", ""),
                                "category": ad.get("category", "general")
                            })
        
        if not found_ads:
            bot.reply_to(message, f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É **\"{search_query}\"** –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", parse_mode="Markdown")
        else:
            text = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{search_query}\"**\n\n–ù–∞–π–¥–µ–Ω–æ: {len(found_ads)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n"
            
            markup = types.InlineKeyboardMarkup(row_width=1)
            for i, ad in enumerate(found_ads[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                category_name = AD_CATEGORIES.get(ad["category"], {}).get("name", "")
                preview = ad["text"][:50] + "..." if len(ad["text"]) > 50 else ad["text"]
                markup.add(types.InlineKeyboardButton(
                    f"{category_name} {ad['brand']}/{ad['city']} - {preview}",
                    callback_data=f"ads_view_{ad['brand']}_{ad['city']}_{ad['type']}_{ad['index']}"
                ))
            
            if len(found_ads) > 10:
                text += f"*–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10 –∏–∑ {len(found_ads)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤*"
            
            bot.reply_to(message, text, parse_mode="Markdown", reply_markup=markup)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if user_id in user_states:
            del user_states[user_id]
    
    def show_ads_statistics(bot, chat_id: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–∫–ª–∞–º–µ."""
        total_ads = 0
        categories_stats = {cat_id: 0 for cat_id in AD_CATEGORIES.keys()}
        brands_stats = {}
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        for brand, brand_data in ad_templates.items():
            brand_count = 0
            for city, city_data in brand_data.items():
                for ad_type, ads_list in city_data.items():
                    for ad in ads_list:
                        total_ads += 1
                        brand_count += 1
                        category = ad.get("category", "general")
                        if category in categories_stats:
                            categories_stats[category] += 1
            brands_stats[brand] = brand_count
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∫–ª–∞–º—ã**\n\n**–í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:** {total_ads}\n\n"
        
        text += "**–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:**\n"
        for cat_id, count in categories_stats.items():
            if count > 0:
                cat_name = AD_CATEGORIES[cat_id]["name"]
                text += f"  {cat_name}: {count}\n"
        
        text += "\n**–ü–æ –±—Ä–µ–Ω–¥–∞–º:**\n"
        for brand, count in sorted(brands_stats.items(), key=lambda x: x[1], reverse=True):
            text += f"  {brand.upper()}: {count}\n"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="ads_back_main"))
        
        bot.send_message(chat_id, text, parse_mode="Markdown", reply_markup=markup)
    
    def show_single_ad(bot, chat_id: int, brand: str, city: str, ad_type: str, index: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
        try:
            ad = ad_templates[brand][city][ad_type][index]
            category_name = AD_CATEGORIES.get(ad.get("category", "general"), {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
            text = (f"üìù **–î–µ—Ç–∞–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è**\n\n"
                   f"**–ë—Ä–µ–Ω–¥:** {brand.upper()}\n"
                   f"**–ì–æ—Ä–æ–¥:** {city.capitalize()}\n"
                   f"**–¢–∏–ø:** {ad_type.capitalize()}\n"
                   f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category_name}\n"
                   f"**–°–æ–∑–¥–∞–Ω–æ:** {ad.get('created', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                   f"**–ê–≤—Ç–æ—Ä:** {ad.get('created_by', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
                   f"**–¢–µ–∫—Å—Ç:**\n{ad.get('text', '')}")
            
            markup = types.InlineKeyboardMarkup(row_width=2)
            markup.add(
                types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                                         callback_data=f"ads_edit_{brand}_{city}_{ad_type}_{index}"),
                types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", 
                                         callback_data=f"ads_delete_{brand}_{city}_{ad_type}_{index}")
            )
            markup.add(types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="ads_view_categories"))
            
            bot.send_message(chat_id, text, parse_mode="Markdown", reply_markup=markup)
            
        except (KeyError, IndexError):
            bot.send_message(chat_id, "‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.")
