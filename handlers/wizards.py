# handlers/wizards.py

import logging
import datetime
from telebot import types

from utils import admin_required, save_json_data
from state import user_states, chat_configs, ad_templates
from config import TIMEZONE_MAP, CHAT_CONFIG_FILE, AD_TEMPLATES_FILE

def register_wizard_handlers(bot):

    # ========================================
    #   –ú–ê–°–¢–ï–† –ù–ê–°–¢–†–û–ô–ö–ò –ß–ê–¢–ê (/setup_wizard)
    # ========================================

    @bot.message_handler(commands=['setup_wizard'])
    @admin_required(bot)
    def handle_setup_wizard(message: types.Message):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ—à–∞–≥–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —á–∞—Ç–∞."""
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        user_states[user_id] = {"state": "wizard_awaiting_brand_city", "chat_id": chat_id, "data": {}}
        
        text = ("üßô‚Äç‚ôÇÔ∏è **–ú–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞**\n\n"
                "–Ø –∑–∞–¥–∞–º –≤–∞–º 4 –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. "
                "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –Ω–∞ –ª—é–±–æ–º —à–∞–≥–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.\n\n"
                "**–®–∞–≥ 1 –∏–∑ 4:** –í–≤–µ–¥–∏—Ç–µ **–±—Ä–µ–Ω–¥** –∏ **–≥–æ—Ä–æ–¥** –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞.\n"
                "*–ü—Ä–∏–º–µ—Ä:* `my-brand moscow`")
        msg = bot.send_message(chat_id, text, parse_mode="Markdown")
        bot.register_next_step_handler(msg, process_wizard_brand_city, bot)

    def process_wizard_brand_city(message: types.Message, bot):
        """–®–∞–≥ 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–µ–Ω–¥–∞ –∏ –≥–æ—Ä–æ–¥–∞."""
        user_id = message.from_user.id
        state = user_states.get(user_id, {})
        if not state or state.get("state") != "wizard_awaiting_brand_city": return
        if message.text == '/cancel':
            del user_states[user_id]
            return bot.reply_to(message, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

        try:
            brand, city = message.text.split(maxsplit=1)
            state["data"]["brand"] = brand.lower()
            state["data"]["city"] = city.lower()
            
            state["state"] = "wizard_awaiting_timezone"
            text = ("‚úÖ **–®–∞–≥ 2 –∏–∑ 4:** –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ **—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å**.\n"
                    "–í–≤–µ–¥–∏—Ç–µ —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç –ú–æ—Å–∫–≤—ã. *–ü—Ä–∏–º–µ—Ä:* `+3` –∏–ª–∏ `-1`")
            msg = bot.reply_to(message, text, parse_mode="Markdown")
            bot.register_next_step_handler(msg, process_wizard_timezone, bot)
        except ValueError:
            msg = bot.reply_to(message, "‚ùå **–û—à–∏–±–∫–∞.** –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —Å–ª–æ–≤–∞: –±—Ä–µ–Ω–¥ –∏ –≥–æ—Ä–æ–¥. *–ü—Ä–∏–º–µ—Ä:* `my-brand moscow`", parse_mode="Markdown")
            bot.register_next_step_handler(msg, process_wizard_brand_city, bot)
            
    def process_wizard_timezone(message: types.Message, bot):
        """–®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞."""
        user_id = message.from_user.id
        state = user_states.get(user_id, {})
        if not state or state.get("state") != "wizard_awaiting_timezone": return
        if message.text == '/cancel':
            del user_states[user_id]
            return bot.reply_to(message, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            
        offset = message.text.strip()
        tz_name = TIMEZONE_MAP.get(offset)
        if not tz_name:
            msg = bot.reply_to(message, f"‚ùå **–û—à–∏–±–∫–∞.** –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–º–µ—â–µ–Ω–∏—è. –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {list(TIMEZONE_MAP.keys())}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", parse_mode="Markdown")
            bot.register_next_step_handler(msg, process_wizard_timezone, bot)
            return
            
        state["data"]["timezone"] = tz_name
        
        state["state"] = "wizard_awaiting_timing"
        text = ("‚úÖ **–®–∞–≥ 3 –∏–∑ 4:** –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –∑–∞–¥–∞–π—Ç–µ **–≥—Ä–∞—Ñ–∏–∫ —Å–º–µ–Ω—ã**.\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞. *–ü—Ä–∏–º–µ—Ä:* `19:00 04:00`")
        msg = bot.reply_to(message, text, parse_mode="Markdown")
        bot.register_next_step_handler(msg, process_wizard_timing, bot)

    def process_wizard_timing(message: types.Message, bot):
        """–®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–º–µ–Ω—ã."""
        user_id = message.from_user.id
        state = user_states.get(user_id, {})
        if not state or state.get("state") != "wizard_awaiting_timing": return
        if message.text == '/cancel':
            del user_states[user_id]
            return bot.reply_to(message, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

        try:
            start_time_str, end_time_str = message.text.split()
            datetime.datetime.strptime(start_time_str, '%H:%M')
            datetime.datetime.strptime(end_time_str, '%H:%M')
            state["data"]["start_time"] = start_time_str
            state["data"]["end_time"] = end_time_str
            
            state["state"] = "wizard_awaiting_goal"
            text = ("‚úÖ **–®–∞–≥ 4 –∏–∑ 4:** –ì—Ä–∞—Ñ–∏–∫ –∑–∞–¥–∞–Ω! –ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ: —É–∫–∞–∂–∏—Ç–µ **–ø–ª–∞–Ω (–Ω–æ—Ä–º—É) –ì–°** –∑–∞ —Å–º–µ–Ω—É.\n"
                    "–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ. *–ü—Ä–∏–º–µ—Ä:* `25`")
            msg = bot.reply_to(message, text, parse_mode="Markdown")
            bot.register_next_step_handler(msg, process_wizard_goal, bot)
        except (ValueError, IndexError):
            msg = bot.reply_to(message, "‚ùå **–û—à–∏–±–∫–∞.** –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. *–ü—Ä–∏–º–µ—Ä:* `19:00 04:00`", parse_mode="Markdown")
            bot.register_next_step_handler(msg, process_wizard_timing, bot)

    def process_wizard_goal(message: types.Message, bot):
        """–®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ."""
        user_id = message.from_user.id
        state = user_states.get(user_id, {})
        if not state or state.get("state") != "wizard_awaiting_goal": return
        if message.text == '/cancel':
            del user_states[user_id]
            return bot.reply_to(message, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            
        try:
            goal = int(message.text)
            if goal <= 0: raise ValueError
            state["data"]["default_goal"] = goal
            
            chat_id_to_configure = str(state["chat_id"])
            if chat_id_to_configure not in chat_configs:
                chat_configs[chat_id_to_configure] = {}
            chat_configs[chat_id_to_configure].update(state["data"])
            save_json_data(CHAT_CONFIG_FILE, chat_configs)
            
            final_text = ("üéâ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                          "–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n"
                          f"  - –ë—Ä–µ–Ω–¥: `{state['data']['brand']}`\n"
                          f"  - –ì–æ—Ä–æ–¥: `{state['data']['city']}`\n"
                          f"  - –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: `{state['data']['timezone']}`\n"
                          f"  - –ì—Ä–∞—Ñ–∏–∫: `{state['data']['start_time']}` - `{state['data']['end_time']}`\n"
                          f"  - –ù–æ—Ä–º–∞ –ì–°: `{state['data']['default_goal']}`\n\n"
                          "–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ!")
            bot.reply_to(message, final_text, parse_mode="Markdown")
            
        except (ValueError, IndexError):
            msg = bot.reply_to(message, "‚ùå **–û—à–∏–±–∫–∞.** –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. *–ü—Ä–∏–º–µ—Ä:* `25`", parse_mode="Markdown")
            bot.register_next_step_handler(msg, process_wizard_goal, bot)
        finally:
            if user_id in user_states:
                del user_states[user_id]
    
    # ========================================
    #   –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–ö–õ–ê–ú–û–ô (/ads)
    # ========================================
    
    @bot.message_handler(commands=['ads'])
    @admin_required(bot)
    def command_ads(message: types.Message):
        markup = types.InlineKeyboardMarkup(row_width=2)
        brands = list(ad_templates.keys())
        for brand in brands:
            markup.add(types.InlineKeyboardButton(brand.upper(), callback_data=f"ad_brand_{brand}"))
        markup.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –±—Ä–µ–Ω–¥", callback_data="ad_addbrand_form"))
        bot.send_message(message.chat.id, "üìù –í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–æ–π:", reply_markup=markup)
    
    def show_ad_cities_menu(bot, chat_id: int, brand: str):
        markup = types.InlineKeyboardMarkup(row_width=2)
        cities = list(ad_templates.get(brand, {}).keys())
        for city in cities:
            markup.add(types.InlineKeyboardButton(city.capitalize(), callback_data=f"ad_city_{brand}_{city}"))
        markup.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥", callback_data=f"ad_addcity_form_{brand}"))
        markup.add(types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –±—Ä–µ–Ω–¥–∞–º", callback_data="ad_backtobrand"))
        bot.send_message(chat_id, f"–ë—Ä–µ–Ω–¥: *{brand.upper()}*\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=markup, parse_mode="Markdown")
    
    def show_ad_actions_menu(bot, chat_id: int, brand: str, city: str):
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("üëÅÔ∏è‚Äçüó®Ô∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —à–∞–±–ª–æ–Ω—ã", callback_data=f"ad_view_{brand}_{city}"),
            types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω", callback_data=f"ad_addform_{brand}_{city}"),
            types.InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω", callback_data=f"ad_delform_{brand}_{city}"),
            types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –≥–æ—Ä–æ–¥–∞–º", callback_data=f"ad_backtocity_{brand}")
        )
        bot.send_message(chat_id, f"–ë—Ä–µ–Ω–¥: *{brand.upper()}* / –ì–æ—Ä–æ–¥: *{city.capitalize()}*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup, parse_mode="Markdown")

    def show_templates_for_deletion(bot, chat_id: int, brand: str, city: str):
        templates = ad_templates.get(brand, {}).get(city, {})
        if not templates:
            bot.send_message(chat_id, "–ó–¥–µ—Å—å –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        markup = types.InlineKeyboardMarkup(row_width=1)
        for tpl_key in templates.keys():
            markup.add(types.InlineKeyboardButton(f"‚ùå {tpl_key}", callback_data=f"ad_delete_{brand}_{city}_{tpl_key}"))
        markup.add(types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"ad_city_{brand}_{city}"))
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

    @bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get("state") == "awaiting_ad_template")
    def receive_ad_template_to_add(message: types.Message):
        user_id = message.from_user.id
        state = user_states.get(user_id)
        if not state: return

        if message.text == '/cancel':
            del user_states[user_id]
            return bot.send_message(message.chat.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        try:
            name, text = message.text.split('\n', 1)
            name, text = name.strip(), text.strip()
            if not name or not text: raise ValueError
            
            brand, city = state['brand'], state['city']
            if brand not in ad_templates: ad_templates[brand] = {}
            if city not in ad_templates[brand]: ad_templates[brand][city] = {}
            ad_templates[brand][city][name] = text

            if save_json_data(AD_TEMPLATES_FILE, ad_templates):
                bot.send_message(message.chat.id, f"‚úÖ –®–∞–±–ª–æ–Ω *'{name}'* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è *{brand.upper()}/{city.capitalize()}*.", parse_mode="Markdown")
            else:
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω–æ–≤.")
            
            del user_states[user_id]
        except (ValueError, KeyError):
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n`–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞`\n`–¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞...`", parse_mode="Markdown")
