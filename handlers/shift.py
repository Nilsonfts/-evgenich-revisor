# handlers/shift.py

import random
import datetime
import pytz
import threading
import logging

from telebot import types

from utils import get_username, init_shift_data, init_user_data, handle_user_return, save_history_event
from state import chat_data, pending_transfers
from config import BREAK_KEYWORDS, RETURN_CONFIRM_WORDS, BREAK_DELAY_MINUTES, BREAK_DURATION_MINUTES
from phrases import soviet_phrases
from roles import (
    get_current_day_type, get_roles_for_day_type, get_goals_for_day_type,
    UserRole, ROLE_EMOJIS, ROLE_DESCRIPTIONS, is_weekend_shift
)
from database import db

def register_shift_handlers(bot):

    @bot.message_handler(commands=['start', '—Å—Ç–∞—Ä—Ç'])
    def handle_start(message: types.Message):
        chat_id = message.chat.id
        if chat_id > 0: 
            phrase = random.choice(soviet_phrases.get("system_messages", {}).get('group_only_command', ["–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ."]))
            return bot.reply_to(message, phrase)
            
        from_user = message.from_user
        username = get_username(from_user)
        
        # –ü–∞—Ä—Å–∏–º —Ä–æ–ª—å –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()[1:] if len(message.text.split()) > 1 else []
        requested_role = None
        
        if args:
            role_arg = " ".join(args).lower()
            if "–∫–∞—Ä–∞–æ–∫–µ" in role_arg or "karaoke" in role_arg:
                requested_role = UserRole.KARAOKE_HOST.value
            elif "–º—Å" in role_arg or "mc" in role_arg:
                requested_role = UserRole.MC.value
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        current_day_type = get_current_day_type()
        available_roles = get_roles_for_day_type(current_day_type)
        role_goals = get_goals_for_day_type(current_day_type)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—É—é —Ä–æ–ª—å
        if requested_role and requested_role not in available_roles:
            available_list = ", ".join([f"{ROLE_EMOJIS[r]} {ROLE_DESCRIPTIONS[r]}" for r in available_roles])
            return bot.reply_to(message, 
                f"‚ùå –†–æ–ª—å '{ROLE_DESCRIPTIONS.get(requested_role, requested_role)}' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n"
                f"üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏ –¥–ª—è {current_day_type.value} –¥–Ω—è: {available_list}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if chat_id not in chat_data or not chat_data[chat_id]: 
            init_shift_data(chat_id)
        
        shift = chat_data[chat_id]
        
        # üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê –î–õ–Ø –ü–¢-–°–ë - –î–û–ë–ê–í–õ–Ø–ï–ú –í–¢–û–†–û–ì–û –í–ï–î–£–©–ï–ì–û
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω–µ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ
        if shift.users and from_user.id not in shift.users:
            # –í –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ (–ü–¢-–°–ë) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –≤–µ–¥—É—â–µ–≥–æ
            if is_weekend_shift() and len(shift.users) < 2:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ä–æ–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã
                occupied_roles = set()
                for user_data in shift.users.values():
                    if hasattr(user_data, 'role'):
                        occupied_roles.add(user_data.role)
                
                # –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω—É—é —Ä–æ–ª—å
                available_for_join = [role for role in available_roles if role not in occupied_roles]
                
                if available_for_join:
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—É—é —Ä–æ–ª—å
                    auto_assigned_role = requested_role if requested_role in available_for_join else available_for_join[0]
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π —Ä–æ–ª—å—é
                    shift.users[from_user.id] = init_user_data(from_user.id, username, auto_assigned_role)
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª—å –¥–ª—è —Ä–æ–ª–∏
                    user_goal = role_goals.get(auto_assigned_role, 15)
                    shift.users[from_user.id].goal = user_goal
                    
                    role_emoji = ROLE_EMOJIS.get(auto_assigned_role, "üë§")
                    role_desc = ROLE_DESCRIPTIONS.get(auto_assigned_role, auto_assigned_role)
                    
                    weekend_success_text = [
                        f"üéâ **–í–´–•–û–î–ù–û–ô –î–ï–ù–¨ - –î–û–ë–ê–í–õ–ï–ù –í–¢–û–†–û–ô –í–ï–î–£–©–ò–ô!**",
                        f"",
                        f"{role_emoji} {username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫–∞–∫ **{role_desc}**",
                        f"üéØ –í–∞—à–∞ —Ü–µ–ª—å: {user_goal} –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
                        f"",
                        f"üí´ –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞—é—Ç 2 –≤–µ–¥—É—â–∏—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ!",
                        f"üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"
                    ]
                    
                    bot.send_message(chat_id, "\n".join(weekend_success_text))
                    save_history_event(chat_id, from_user.id, username, f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–º–µ–Ω–µ –≤ –≤—ã—Ö–æ–¥–Ω–æ–π –∫–∞–∫ {role_desc}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                    try:
                        db.save_shift_data(chat_id, shift)
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î: {e}")
                    
                    return
            
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            if shift.users:
                main_user = shift.main_username or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                occupied_list = ", ".join([f"{ROLE_EMOJIS.get(getattr(u, 'role', '–∫–∞—Ä–∞–æ–∫–µ_–≤–µ–¥—É—â–∏–π'), 'üë§')} {getattr(u, 'username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}" 
                                         for u in shift.users.values()])
                return bot.reply_to(message, 
                    f"‚ö†Ô∏è –°–º–µ–Ω–∞ —É–∂–µ –∏–¥–µ—Ç!\n"
                    f"üé≠ –ó–∞–Ω—è—Ç—ã–µ —Ä–æ–ª–∏: {occupied_list}\n"
                    f"{'üí° –í –≤—ã—Ö–æ–¥–Ω—ã–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–≥–æ –≤–µ–¥—É—â–µ–≥–æ!' if is_weekend_shift() and len(shift.users) < 2 else '–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–ø–µ—Ä–µ–¥–∞—Ç—å'}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        if requested_role:
            assigned_role = requested_role
        else:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ä–æ–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã
            occupied_roles = set()
            for user_data in shift.users.values():
                if hasattr(user_data, 'role'):
                    occupied_roles.add(user_data.role)
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å–≤–æ–±–æ–¥–Ω—É—é —Ä–æ–ª—å
            assigned_role = None
            for role in available_roles:
                if role not in occupied_roles:
                    assigned_role = role
                    break
            
            if not assigned_role:
                occupied_list = ", ".join([f"{ROLE_EMOJIS[r]} {ROLE_DESCRIPTIONS[r]}" for r in occupied_roles])
                return bot.reply_to(message, 
                    f"‚ùå –í—Å–µ —Ä–æ–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã.\n"
                    f"üé≠ –ó–∞–Ω—è—Ç—ã–µ —Ä–æ–ª–∏: {occupied_list}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ —Ä–æ–ª—å
        for user_data in shift.users.values():
            if hasattr(user_data, 'role') and user_data.role == assigned_role:
                role_emoji = ROLE_EMOJIS.get(assigned_role, "üë§")
                role_desc = ROLE_DESCRIPTIONS.get(assigned_role, assigned_role)
                return bot.reply_to(message, 
                    f"‚ùå –†–æ–ª—å {role_emoji} {role_desc} —É–∂–µ –∑–∞–Ω—è—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_data.username}")
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é
        if from_user.id not in shift.users:
            shift.users[from_user.id] = init_user_data(from_user.id, username, assigned_role)
        else:
            shift.users[from_user.id].role = assigned_role
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–º–µ–Ω—ã
        if not hasattr(shift, 'active_roles'):
            shift.active_roles = available_roles
        if not hasattr(shift, 'role_goals'):
            shift.role_goals = role_goals
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_goal = role_goals.get(assigned_role, 15)
        shift.users[from_user.id].goal = user_goal
        
        # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º main_id (–±—É–¥–µ—Ç –ø–µ—Ä–≤—ã–π –∑–∞—Å—Ç—É–ø–∏–≤—à–∏–π)
        if shift.main_id is None:
            shift.main_id = from_user.id
            shift.main_username = username
        
        role_emoji = ROLE_EMOJIS.get(assigned_role, "üë§")
        role_desc = ROLE_DESCRIPTIONS.get(assigned_role, assigned_role)
        
        success_text = [
            f"üéâ {username}, –≤—ã –∑–∞—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ —Å–º–µ–Ω—É!",
            f"üé≠ –†–æ–ª—å: {role_emoji} {role_desc}",
            f"üéØ –¶–µ–ª—å: {user_goal} –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
            f"üìÖ –¢–∏–ø –¥–Ω—è: {current_day_type.value}"
        ]
        
        bot.send_message(chat_id, "\n".join(success_text))
        save_history_event(chat_id, from_user.id, username, f"–ó–∞—Å—Ç—É–ø–∏–ª –Ω–∞ —Å–º–µ–Ω—É —Å —Ä–æ–ª—å—é {role_desc}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            db.save_shift_data(chat_id, shift)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–º–µ–Ω—ã –≤ –ë–î: {e}")

    @bot.message_handler(func=lambda m: m.text and any(word in m.text.lower().split() for word in BREAK_KEYWORDS))
    def handle_break_request(message: types.Message):
        chat_id = message.chat.id
        user_id = message.from_user.id
        shift = chat_data.get(chat_id)
        if not shift or shift.main_id != user_id: return
        
        user_data = shift.users.get(user_id)
        if not user_data: return
        
        if user_data.on_break:
            phrase = random.choice(soviet_phrases.get("system_messages", {}).get('break_already_on', ["–í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ."]))
            return bot.reply_to(message, phrase)
            
        now_moscow = datetime.datetime.now(pytz.timezone('Europe/Moscow'))
        
        if user_data.last_break_time:
            last_break_time = datetime.datetime.fromisoformat(user_data.last_break_time)
            if (now_moscow - last_break_time).total_seconds() / 60 < BREAK_DELAY_MINUTES:
                remaining_time = int(BREAK_DELAY_MINUTES - (now_moscow - last_break_time).total_seconds() / 60)
                phrase = random.choice(soviet_phrases.get("system_messages", {}).get('break_cooldown', ["–°–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–µ—Ä—ã–≤ –º–æ–∂–Ω–æ –≤–∑—è—Ç—å —á–µ—Ä–µ–∑ {remaining_time} –º–∏–Ω."]))
                return bot.reply_to(message, phrase.format(remaining_time=remaining_time))
            
        user_data.on_break = True
        user_data.break_start_time = now_moscow.isoformat()
        user_data.last_break_time = now_moscow.isoformat()
        user_data.breaks_count += 1
        user_data.last_break_reminder_time = None
        
        response_phrase = random.choice(soviet_phrases.get('break_acknowledgement', ['–ü–µ—Ä–µ—Ä—ã–≤ –Ω–∞—á–∞—Ç.']))
        bot.reply_to(message, f"{response_phrase} –Ω–∞ {BREAK_DURATION_MINUTES} –º–∏–Ω—É—Ç.")

    @bot.message_handler(func=lambda m: m.text and any(word in m.text.lower().split() for word in RETURN_CONFIRM_WORDS))
    def handle_return_message(message: types.Message):
        chat_id = message.chat.id
        user_id = message.from_user.id
        shift = chat_data.get(chat_id)
        if not shift or shift.main_id != user_id: return
        
        handle_user_return(bot, chat_id, user_id)

    def cancel_transfer(chat_id: int):
        """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–¥–∞—á–µ —Å–º–µ–Ω—ã –ø–æ —Ç–∞–π–º–∞—É—Ç—É."""
        if chat_id in pending_transfers:
            transfer_info = pending_transfers.pop(chat_id)
            try:
                bot.edit_message_reply_markup(chat_id, transfer_info['message_id'], reply_markup=None)
                phrase = random.choice(soviet_phrases.get("system_messages", {}).get('shift_transfer_timeout', ["–í—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Å–º–µ–Ω—ã –≤—ã—à–ª–æ. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–æ."]))
                bot.send_message(chat_id, phrase.format(
                    from_username=transfer_info['from_username'],
                    to_username=transfer_info['to_username']
                ))
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É —Å–º–µ–Ω—ã (—Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ): {e}")

    @bot.message_handler(commands=['–ø–µ—Ä–µ–¥–∞—Ç—å'])
    def handle_shift_transfer_request(message: types.Message):
        chat_id = message.chat.id
        from_user = message.from_user
        shift = chat_data.get(chat_id)
        
        if not shift or shift.main_id != from_user.id:
            return bot.reply_to(message, "–¢–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –≥–ª–∞–≤–Ω—ã–π –Ω–∞ —Å–º–µ–Ω–µ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å –µ–µ.")

        if not message.reply_to_message:
            return bot.reply_to(message, "–ß—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å —Å–º–µ–Ω—É, –æ—Ç–≤–µ—Ç—å—Ç–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –µ–µ –ø–µ—Ä–µ–¥–∞—Ç—å.")

        to_user = message.reply_to_message.from_user
        if to_user.is_bot: return bot.reply_to(message, "–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞—Ç—å —Å–º–µ–Ω—É –±–æ—Ç—É.")
        if to_user.id == from_user.id: return bot.reply_to(message, "–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞—Ç—å —Å–º–µ–Ω—É —Å–∞–º–æ–º—É —Å–µ–±–µ.")
        if chat_id in pending_transfers: return bot.reply_to(message, "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–¥–∞—á–µ —Å–º–µ–Ω—ã. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

        from_username = get_username(from_user)
        to_username = get_username(to_user)

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å —Å–º–µ–Ω—É", callback_data=f"transfer_accept_{to_user.id}"))
        
        phrase_template = random.choice(soviet_phrases.get("system_messages", {}).get('shift_transfer_offer', ["{from_username} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å —Å–º–µ–Ω—É {to_username}."]))
        text = phrase_template.format(from_username=from_username, to_username=to_username)
        
        sent_message = bot.send_message(chat_id, text, reply_markup=markup)
        
        timer = threading.Timer(300, cancel_transfer, args=[bot, chat_id])
        timer.start()
        
        pending_transfers[chat_id] = {
            'from_id': from_user.id, 'from_username': from_username,
            'to_id': to_user.id, 'to_username': to_username,
            'message_id': sent_message.message_id, 'timer': timer
        }
