# handlers/admin.py

import logging
import os
import datetime
import pandas as pd
import random
import time
import pytz
from telebot import types

from utils import admin_required, save_json_data, generate_detailed_report, get_username, get_chat_title
from state import chat_data, user_history, chat_configs, user_states
from config import CHAT_CONFIG_FILE, VOICE_TIMEOUT_MINUTES, BOSS_ID, TIMEZONE_MAP
from g_sheets import get_sheet
from scheduler import send_end_of_shift_report_for_chat
from phrases import soviet_phrases
from database import db  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

def register_admin_handlers(bot):
    @bot.message_handler(commands=['bot_off', '–≤—ã–∫–ª—é—á–∏—Ç—å'])
    @admin_required(bot)
    def handle_bot_disable(message: types.Message):
        """–í—ã–∫–ª—é—á–∞–µ—Ç –±–æ—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞."""
        chat_id = message.chat.id
        admin_id = message.from_user.id
        admin_username = get_username(message.from_user)
        
        # –í—ã–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.set_bot_enabled(chat_id, False, admin_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        db.save_event(chat_id, admin_id, admin_username, "bot_disabled", "–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        
        bot.send_message(chat_id, 
            f"üî¥ **–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_username}**\n\n"
            "–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/bot_on` –∏–ª–∏ `/–≤–∫–ª—é—á–∏—Ç—å`",
            parse_mode="Markdown")
        
        logging.info(f"–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω –≤ —á–∞—Ç–µ {chat_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_username} (ID: {admin_id})")

    @bot.message_handler(commands=['bot_on', '–≤–∫–ª—é—á–∏—Ç—å'])
    @admin_required(bot)
    def handle_bot_enable(message: types.Message):
        """–í–∫–ª—é—á–∞–µ—Ç –±–æ—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞."""
        chat_id = message.chat.id
        admin_id = message.from_user.id
        admin_username = get_username(message.from_user)
        
        # –í–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.set_bot_enabled(chat_id, True, admin_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        db.save_event(chat_id, admin_id, admin_username, "bot_enabled", "–ë–æ—Ç –≤–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        
        bot.send_message(chat_id, 
            f"üü¢ **–ë–æ—Ç –≤–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_username}**\n\n"
            "–ë–æ—Ç —Å–Ω–æ–≤–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è.",
            parse_mode="Markdown")
        
        logging.info(f"–ë–æ—Ç –≤–∫–ª—é—á–µ–Ω –≤ —á–∞—Ç–µ {chat_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_username} (ID: {admin_id})")

    @bot.message_handler(commands=['bot_status'])
    @admin_required(bot)
    def handle_bot_status_check(message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
        chat_id = message.chat.id
        is_enabled = db.is_bot_enabled(chat_id)
        
        status_icon = "üü¢" if is_enabled else "üî¥"
        status_text = "–≤–∫–ª—é—á–µ–Ω" if is_enabled else "–≤—ã–∫–ª—é—á–µ–Ω"
        
        bot.reply_to(message, 
            f"{status_icon} **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:** {status_text}\n\n"
            f"–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n"
            f"‚Ä¢ `/bot_off` –∏–ª–∏ `/–≤—ã–∫–ª—é—á–∏—Ç—å` ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞\n"
            f"‚Ä¢ `/bot_on` –∏–ª–∏ `/–≤–∫–ª—é—á–∏—Ç—å` ‚Äî –≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞\n"
            f"‚Ä¢ `/bot_status` ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
            parse_mode="Markdown")

    @bot.message_handler(commands=['admin'])
    @admin_required(bot)
    def handle_admin_panel(message: types.Message):
        user_id = message.from_user.id
        panel_text = [
            "**‚öúÔ∏è –ü–∞–Ω–µ–ª—å —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚öúÔ∏è**\n",
            "`/status` ‚Äî üìä –°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω—ã",
            "`/rating` ‚Äî üìà –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
            "`/ads` ‚Äî üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏",
            "`/problems` ‚Äî üö® –ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–æ–Ω",
            "`/restart` ‚Äî üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–º–µ–Ω—É",
            "`/report` ‚Äî ‚û°Ô∏è –û—Ç—á–µ—Ç –¥–æ—Å—Ä–æ—á–Ω–æ",
            "`/log` ‚Äî üìú –í—ã–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥ —Å–º–µ–Ω—ã",
            "`/time` ‚Äî ‚è±Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–π–º-–∞—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            "`/setup_wizard` ‚Äî üßô‚Äç‚ôÇÔ∏è –ú–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞",
            "",
            "**ü§ñ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–û–¢–û–ú:**",
            "`/bot_status` ‚Äî –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞",
            "`/bot_off` –∏–ª–∏ `/–≤—ã–∫–ª—é—á–∏—Ç—å` ‚Äî –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞",
            "`/bot_on` –∏–ª–∏ `/–≤–∫–ª—é—á–∏—Ç—å` ‚Äî –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞",
        ]
        if user_id == BOSS_ID:
             panel_text.append("`/broadcast` ‚Äî üì¢ –†–∞—Å—Å—ã–ª–∫–∞ (BOSS)")
        
        panel_text.append("\n*–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –≤–≤–µ–¥–∏—Ç–µ /adminhelp*")
        bot.reply_to(message, "\n".join(panel_text), parse_mode="Markdown")

    @bot.message_handler(commands=['adminhelp'])
    @admin_required(bot)
    def handle_admin_help(message: types.Message):
        help_text = [
            "**üõ†Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n"
            "====================\n"
            "**–ê–ù–ê–õ–ò–¢–ò–ö–ê –ò –û–¢–ß–ï–¢–´:**\n",
            "`/status` ‚Äî üìä –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å *—Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω—ã*: –∫—Ç–æ –Ω–∞ —Å–º–µ–Ω–µ, —Å–∫–æ–ª—å–∫–æ —Å–¥–µ–ª–∞–Ω–æ, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞—É–∑–∞–º –∏ —Ç.–¥.",
            "`/rating` ‚Äî üìà –í—ã–≤–æ–¥–∏—Ç –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –≤—Å–µ—Ö –≤–µ–¥—É—â–∏—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã.",
            "`/problems` ‚Äî üö® –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã –∏ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç —Å–º–µ–Ω—ã —Å –Ω–∏–∑–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é, –æ–ø–æ–∑–¥–∞–Ω–∏—è–º–∏ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∏–º–∏ –ø–∞—É–∑–∞–º–∏.",
            "`/log` ‚Äî üìú –í—ã–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏–µ–π –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –∑–∞ *—Ç–µ–∫—É—â—É—é* —Å–º–µ–Ω—É.",
            "\n**–£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ú–ï–ù–û–ô:**\n",
            "`/restart` ‚Äî üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç *—Ç–µ–∫—É—â—É—é* —Å–º–µ–Ω—É. –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–≤—ã–π `/start` –¥–ª—è –Ω–∞—á–∞–ª–∞.",
            "`/report` ‚Äî ‚û°Ô∏è –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–º–µ–Ω—É –¥–æ—Å—Ä–æ—á–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç.",
            "\n**–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–¢–ï–ù–¢–û–ú –ò –ù–ê–°–¢–†–û–ô–ö–ò:**\n",
            "`/ads` ‚Äî üìù –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏ (–ø—Ä–æ—Å–º–æ—Ç—Ä, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ).",
            "`/time [–º–∏–Ω—É—Ç—ã]` ‚Äî ‚è±Ô∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç, —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –±–æ—Ç –Ω–∞—á–Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–µ–¥—É—â–µ–º—É. *–ü—Ä–∏–º–µ—Ä: `/time 25`*",
            "`/setup_wizard` ‚Äî üßô‚Äç‚ôÇÔ∏è –ó–∞–ø—É—Å–∫–∞–µ—Ç —É–¥–æ–±–Ω—ã–π –ø–æ—à–∞–≥–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä –¥–ª—è –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è).",
        ]
        if message.from_user.id == BOSS_ID:
            help_text.append("`/broadcast` ‚Äî üì¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ —á–∞—Ç—ã, –≥–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è BOSS).")
        
        bot.reply_to(message, "\n".join(help_text), parse_mode="Markdown")

    @bot.message_handler(commands=['time'])
    @admin_required(bot)
    def command_set_timeout(message: types.Message):
        chat_id = message.chat.id
        try:
            args = message.text.split()
            if len(args) != 2:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")
            
            new_timeout = int(args[1])
            if new_timeout <= 0:
                raise ValueError("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.")

            if str(chat_id) not in chat_configs:
                chat_configs[str(chat_id)] = {}
            
            chat_configs[str(chat_id)]['voice_timeout'] = new_timeout
            
            if save_json_data(CHAT_CONFIG_FILE, chat_configs):
                bot.reply_to(message, f"‚úÖ **–£—Å–ø–µ—à–Ω–æ!**\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ *{new_timeout} –º–∏–Ω—É—Ç* –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
                logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∏–∑–º–µ–Ω–∏–ª —Ç–∞–π–º-–∞—É—Ç –¥–ª—è —á–∞—Ç–∞ {chat_id} –Ω–∞ {new_timeout} –º–∏–Ω—É—Ç.")
            else:
                bot.reply_to(message, "‚ùå **–û—à–∏–±–∫–∞!**\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞.")

        except (ValueError, IndexError):
            default_timeout = chat_configs.get(str(chat_id), {}).get('voice_timeout', VOICE_TIMEOUT_MINUTES)
            bot.reply_to(message, f"**–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/time [–º–∏–Ω—É—Ç—ã]`\n*–ü—Ä–∏–º–µ—Ä:* `/time 25`\n\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞: *{default_timeout} –º–∏–Ω—É—Ç*.")


    @bot.message_handler(commands=['status'])
    @admin_required(bot)
    def command_status(message: types.Message):
        chat_id = message.chat.id
        shift = chat_data.get(chat_id)
        if not shift or not shift.main_id:
            phrase = random.choice(soviet_phrases.get("system_messages", {}).get('shift_not_started', ["–°–º–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å."]))
            return bot.send_message(chat_id, phrase)
        
        report_lines = generate_detailed_report(chat_id, shift)
        report_text = "\n".join(report_lines)
        bot.send_message(chat_id, report_text, parse_mode="Markdown")
    
    @bot.message_handler(commands=['rating'])
    @admin_required(bot)
    def command_rating(message: types.Message):
        chat_id = message.chat.id
        if not pd: return bot.send_message(chat_id, "–ú–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö (pandas) –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        bot.send_message(chat_id, "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã...")
        worksheet = get_sheet()
        if not worksheet: return bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google –¢–∞–±–ª–∏—Ü–µ.")
        try:
            df = pd.DataFrame(worksheet.get_all_records())
            if df.empty or '–¢–µ–≥ –í–µ–¥—É—â–µ–≥–æ' not in df.columns: return bot.send_message(chat_id, "–í —Ç–∞–±–ª–∏—Ü–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            numeric_cols = ['–ì–æ–ª–æ—Å–æ–≤—ã—Ö (—à—Ç)', '–û–ø–æ–∑–¥–∞–Ω–∏–π (—à—Ç)']
            for col in numeric_cols: df[col] = pd.to_numeric(df[col], errors='coerce')
            df.dropna(subset=numeric_cols, inplace=True)
            summary = df.groupby('–¢–µ–≥ –í–µ–¥—É—â–µ–≥–æ').agg(
                total_shifts=('–î–∞—Ç–∞', 'count'),
                total_voices=('–ì–æ–ª–æ—Å–æ–≤—ã—Ö (—à—Ç)', 'sum'),
                total_lates=('–û–ø–æ–∑–¥–∞–Ω–∏–π (—à—Ç)', 'sum')
            ).reset_index()
            summary['avg_voices'] = summary['total_voices'] / summary['total_shifts']
            summary['lateness_percent'] = (summary['total_lates'] / summary['total_shifts']) * 100
            summary = summary.sort_values(by='avg_voices', ascending=False).reset_index(drop=True)
            report_lines = ["üìä **–û–±—â–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º**\n_(–ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets)_\n"]
            medals = {0: "ü•á", 1: "ü•à", 2: "ü•â"}
            for i, row in summary.iterrows():
                rank_icon = medals.get(i, f"{i+1}.")
                username = row['–¢–µ–≥ –í–µ–¥—É—â–µ–≥–æ']
                avg_voices = row['avg_voices']
                lateness_percent = row['lateness_percent']
                total_shifts = row['total_shifts']
                
                report_lines.append(f"{rank_icon} {username} ‚Äî –°—Ä. –ì–°: {avg_voices:.1f} | –û–ø–æ–∑–¥–∞–Ω–∏—è: {lateness_percent:.0f}% | –°–º–µ–Ω: {total_shifts}")
            bot.send_message(chat_id, "\n".join(report_lines))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Google Sheets –¥–ª—è /rating: {e}")
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")
        
    @bot.message_handler(commands=['problems'])
    @admin_required(bot)
    def command_problems(message: types.Message):
        chat_id = message.chat.id
        if not pd: return bot.send_message(chat_id, "–ú–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö (pandas) –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        bot.send_message(chat_id, "üö® –ò—â—É –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–æ–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü–µ...")
        worksheet = get_sheet()
        if not worksheet: return bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google –¢–∞–±–ª–∏—Ü–µ.")
        try:
            df = pd.DataFrame(worksheet.get_all_records())
            if df.empty: return bot.send_message(chat_id, "–í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
            
            chat_timeout = chat_configs.get(str(chat_id), {}).get('voice_timeout', VOICE_TIMEOUT_MINUTES)
            
            numeric_cols = ['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (%)', '–û–ø–æ–∑–¥–∞–Ω–∏–π (—à—Ç)', '–ú–∞–∫—Å. –ø–∞—É–∑–∞ (–º–∏–Ω)']
            for col in numeric_cols:
                df[col] = df[col].astype(str).str.replace('%', '', regex=False)
                df[col] = pd.to_numeric(df[col], errors='coerce')
            df.dropna(subset=numeric_cols, inplace=True)
            low_perf = df[df['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (%)'] < 80]
            latecomers = df[df['–û–ø–æ–∑–¥–∞–Ω–∏–π (—à—Ç)'] > 0]
            long_pauses = df[df['–ú–∞–∫—Å. –ø–∞—É–∑–∞ (–º–∏–Ω)'] > (chat_timeout * 1.5)]
            report_lines = ["üö® **–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–æ–Ω**\n"]
            if not low_perf.empty:
                report_lines.append("*üìâ –ù–∏–∑–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ (–º–µ–Ω—å—à–µ 80%):*")
                for _, row in low_perf.sort_values(by='–î–∞—Ç–∞', ascending=False).iterrows():
                    report_lines.append(f" - {row.get('–î–∞—Ç–∞', 'N/A')} {row.get('–¢–µ–≥ –í–µ–¥—É—â–µ–≥–æ', 'N/A')}: *{row['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (%)']:.0f}%*")
            if not latecomers.empty:
                report_lines.append("\n*‚è≥ –û–ø–æ–∑–¥–∞–Ω–∏—è —Å –ø–µ—Ä–µ—Ä—ã–≤–æ–≤:*")
                for _, row in latecomers.sort_values(by='–î–∞—Ç–∞', ascending=False).iterrows():
                    report_lines.append(f" - {row.get('–î–∞—Ç–∞', 'N/A')} {row.get('–¢–µ–≥ –í–µ–¥—É—â–µ–≥–æ', 'N/A')}: *{int(row['–û–ø–æ–∑–¥–∞–Ω–∏–π (—à—Ç)'])}* —Ä–∞–∑(–∞)")
            if not long_pauses.empty:
                report_lines.append(f"\n*‚è±Ô∏è –°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∏–µ –ø–∞—É–∑—ã (–¥–æ–ª—å—à–µ {int(chat_timeout*1.5)} –º–∏–Ω):*")
                for _, row in long_pauses.sort_values(by='–î–∞—Ç–∞', ascending=False).iterrows():
                    report_lines.append(f" - {row.get('–î–∞—Ç–∞', 'N/A')} {row.get('–¢–µ–≥ –í–µ–¥—É—â–µ–≥–æ', 'N/A')}: –º–∞–∫—Å. –ø–∞—É–∑–∞ *{row['–ú–∞–∫—Å. –ø–∞—É–∑–∞ (–º–∏–Ω)']:.0f} –º–∏–Ω*")
            if len(report_lines) == 1:
                bot.send_message(chat_id, "‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–æ–Ω –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")
            else:
                bot.send_message(chat_id, "\n".join(report_lines), parse_mode="Markdown")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–æ–Ω: {e}")
            bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
    
    @bot.message_handler(commands=['report'])
    @admin_required(bot)
    def command_report(message: types.Message):
        """–î–æ—Å—Ä–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
        bot.send_message(message.chat.id, "‚è≥ –§–æ—Ä–º–∏—Ä—É—é —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–æ—Å—Ä–æ—á–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        send_end_of_shift_report_for_chat(bot, message.chat.id)
            
    @bot.message_handler(commands=['log'])
    @admin_required(bot)
    def command_log(message: types.Message):
        chat_id = message.chat.id
        history = user_history.get(chat_id)
        if not history:
            return bot.send_message(chat_id, "–ò—Å—Ç–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω—ã –ø—É—Å—Ç–∞.")
        try:
            filename = f"history_{chat_id}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(f"–ò—Å—Ç–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π –¥–ª—è —á–∞—Ç–∞: {get_chat_title(bot, chat_id)}\n" + "="*40 + "\n" + "\n".join(history))
            with open(filename, 'rb') as f_rb:
                bot.send_document(chat_id, f_rb, caption="–õ–æ–≥ —Å–æ–±—ã—Ç–∏–π —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω—ã.")
            os.remove(filename)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏.")
            
    @bot.message_handler(commands=['broadcast'])
    @admin_required(bot)
    def command_broadcast(message: types.Message):
        if message.from_user.id != BOSS_ID:
            return bot.send_message(message.chat.id, "‚õîÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è BOSS.")
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º —á–∞—Ç–∞–º. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.")
        bot.register_next_step_handler(msg, process_broadcast_text)
        
    def process_broadcast_text(message: types.Message):
        if message.text == '/cancel':
            return bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        if message.from_user.id != BOSS_ID: return
        
        text_to_send = message.text
        if not text_to_send: 
            msg = bot.reply_to(message, "–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel.")
            bot.register_next_step_handler(msg, process_broadcast_text)
            return

        sent_count = 0
        failed_count = 0
        total_chats = len(list(chat_configs.keys()))
        
        if total_chats == 0:
            return bot.send_message(message.chat.id, "–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")

        bot.send_message(message.chat.id, f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –≤ {total_chats} —á–∞—Ç–æ–≤...")
        
        for chat_id_str in chat_configs.keys():
            try:
                bot.send_message(int(chat_id_str), f"‚ùóÔ∏è **–í–∞–∂–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞:**\n\n{text_to_send}", parse_mode="Markdown")
                sent_count += 1
                time.sleep(0.1) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç—ã Telegram
            except Exception as e:
                failed_count += 1
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤ —á–∞—Ç {chat_id_str}: {e}")
        
        bot.send_message(message.chat.id, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count}")

    @bot.message_handler(commands=['debug_config'])
    @admin_required(bot)
    def command_debug_config(message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–∞—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
        chat_id = message.chat.id
        chat_id_str = str(chat_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–∞—Ç–∞
        config = chat_configs.get(chat_id_str, {})
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω–µ
        shift_data = chat_data.get(chat_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–∞—Ö
        moscow_time = datetime.datetime.now(pytz.timezone('Europe/Moscow'))
        
        tz_name = config.get('timezone', 'Europe/Moscow')
        try:
            local_tz = pytz.timezone(tz_name)
            local_time = datetime.datetime.now(local_tz)
        except Exception as e:
            local_time = f"–û—à–∏–±–∫–∞: {e}"
        
        debug_text = [
            "üîç **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–∞—Ç–∞**\n",
            f"**ID —á–∞—Ç–∞:** `{chat_id}`",
            f"**–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è:** `{moscow_time.strftime('%H:%M:%S %d.%m.%Y')}`",
            f"**–õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è:** `{local_time.strftime('%H:%M:%S %d.%m.%Y') if hasattr(local_time, 'strftime') else local_time}`",
            "",
            "**–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:**",
            f"  ‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: `{tz_name}`",
            f"  ‚Ä¢ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: `{config.get('end_time', '04:00 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)')}`",
            f"  ‚Ä¢ –ö–æ–Ω—Ü–µ–ø—Ü–∏—è: `{config.get('concept', '–ù–µ –∑–∞–¥–∞–Ω–∞')}`",
            f"  ‚Ä¢ –¢–∞–π–º-–∞—É—Ç –ì–°: `{config.get('voice_timeout', VOICE_TIMEOUT_MINUTES)} –º–∏–Ω`",
            "",
            "**–¢–µ–∫—É—â–∞—è —Å–º–µ–Ω–∞:**"
        ]
        
        if shift_data and shift_data.main_id:
            main_user = shift_data.users.get(shift_data.main_id)
            username = main_user.username if main_user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            debug_text.extend([
                f"  ‚Ä¢ –°—Ç–∞—Ç—É—Å: `–ê–∫—Ç–∏–≤–Ω–∞`",
                f"  ‚Ä¢ –í–µ–¥—É—â–∏–π: `{username}`",
                f"  ‚Ä¢ –ì–°: `{main_user.count if main_user else 0}/{shift_data.shift_goal}`",
                f"  ‚Ä¢ –ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã: `{shift_data.shift_start_time}`",
                f"  ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç: `{getattr(shift_data, 'last_report_date', '–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è')}`"
            ])
        else:
            debug_text.append("  ‚Ä¢ –°—Ç–∞—Ç—É—Å: `–ù–µ –∞–∫—Ç–∏–≤–Ω–∞`")
        
        bot.send_message(chat_id, "\n".join(debug_text), parse_mode="Markdown")

    @bot.message_handler(commands=['marketing_analytics', '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥'])
    @admin_required(bot)
    def handle_marketing_analytics(message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥."""
        chat_id = message.chat.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        analytics = db.get_marketing_analytics(chat_id, days=7)  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        
        if not analytics:
            bot.send_message(chat_id, 
                "üìä **–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –ê–Ω–∞–ª–∏—Ç–∏–∫–∞**\n\n"
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.\n"
                "–ù–∞—á–Ω–∏—Ç–µ —Å–º–µ–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
                parse_mode="Markdown")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        text = "üìä **–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –ê–Ω–∞–ª–∏—Ç–∏–∫–∞** (7 –¥–Ω–µ–π)\n\n"
        
        text += f"**üìà –û–±—â–∞—è –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n"
        text += f"‚Ä¢ –°–º–µ–Ω –ø—Ä–æ–≤–µ–¥–µ–Ω–æ: {analytics.get('total_shifts', 0)}\n"
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞: {analytics.get('avg_plan_completion', 0):.1f}%\n"
        text += f"‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {analytics.get('total_active_time', 0):.1f} —á–∞—Å–æ–≤\n\n"
        
        text += f"**üéØ –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ö–∞—á–µ—Å—Ç–≤–∞:**\n"
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã: {analytics.get('avg_rhythm', 0):.1f} –º–∏–Ω/–ì–°\n"
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞: {analytics.get('avg_break_time', 0):.1f} –º–∏–Ω\n"
        text += f"‚Ä¢ –û–ø–æ–∑–¥–∞–Ω–∏–π —Å –ø–µ—Ä–µ—Ä—ã–≤–∞: {analytics.get('total_late_returns', 0)}\n\n"
        
        text += f"**üìù –ö–æ–Ω—Ç–µ–Ω—Ç-–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:**\n"
        top_ads = analytics.get('top_ads', [])
        if top_ads:
            for i, (ad, count) in enumerate(top_ads[:5], 1):
                text += f"  {i}. {ad}: {count} —Ä–∞–∑\n"
        else:
            text += "  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É\n"
        
        text += f"\n**üí° –ö–ª—é—á–µ–≤—ã–µ –ò–Ω—Å–∞–π—Ç—ã:**\n"
        
        avg_completion = analytics.get('avg_plan_completion', 0)
        if avg_completion >= 90:
            text += "‚úÖ –û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–ª–∞–Ω.\n"
        elif avg_completion >= 70:
            text += "üëç –•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —Ä–æ—Å—Ç–∞.\n"
        else:
            text += "‚ö†Ô∏è –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∏–∂–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω.\n"
        
        avg_rhythm = analytics.get('avg_rhythm', 0)
        if avg_rhythm <= 3:
            text += "‚ö° –í—ã—Å–æ–∫–∏–π —Ç–µ–º–ø —Ä–∞–±–æ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≥–æ—Å—Ç–µ–π.\n"
        elif avg_rhythm >= 6:
            text += "üêå –°—Ç–æ–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º —Ç–µ–º–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="marketing_detailed"),
            types.InlineKeyboardButton("üìà –¢—Ä–µ–Ω–¥—ã", callback_data="marketing_trends")
        )
        markup.add(
            types.InlineKeyboardButton("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="marketing_recommendations")
        )
        
        bot.send_message(chat_id, text, parse_mode="Markdown", reply_markup=markup)
