# handlers/callbacks.py

import logging
from telebot import types

from utils import is_admin, get_username, init_user_data, save_json_data
from state import chat_data, pending_transfers, ad_templates, user_states
from phrases import soviet_phrases
from config import AD_TEMPLATES_FILE

def register_callback_handlers(bot):

    # –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–¥–µ—Å—å, —Ç.–∫. –æ–Ω —Å–≤—è–∑–∞–Ω —Å –∫–Ω–æ–ø–∫–æ–π, —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–π –≤ shift.py
    @bot.callback_query_handler(func=lambda call: call.data.startswith('transfer_accept_'))
    def handle_shift_transfer_accept(call: types.CallbackQuery):
        chat_id = call.message.chat.id
        user_id = call.from_user.id
        
        if chat_id not in pending_transfers:
            return bot.answer_callback_query(call.id, "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–¥–∞—á–µ —Å–º–µ–Ω—ã —É–∂–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ.", show_alert=True)
        
        transfer_info = pending_transfers[chat_id]
        
        if user_id != transfer_info['to_id']:
            return bot.answer_callback_query(call.id, "–≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –Ω–µ –≤–∞–º.", show_alert=True)
            
        transfer_info['timer'].cancel()
        
        shift = chat_data.get(chat_id)
        if not shift:
             bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
             return

        shift.main_id = transfer_info['to_id']
        shift.main_username = transfer_info['to_username']
        
        if transfer_info['to_id'] not in shift.users:
            shift.users[transfer_info['to_id']] = init_user_data(transfer_info['to_id'], transfer_info['to_username'])

        del pending_transfers[chat_id]
        
        bot.answer_callback_query(call.id, "–°–º–µ–Ω–∞ –ø—Ä–∏–Ω—è—Ç–∞!")
        try: bot.delete_message(chat_id, call.message.message_id)
        except Exception: pass
        
        phrase_template = random.choice(soviet_phrases.get("system_messages", {}).get('shift_transfer_success', ["."]))
        text = phrase_template.format(from_username=transfer_info['from_username'], to_username=transfer_info['to_username'])
        bot.send_message(chat_id, text)
        save_history_event(chat_id, user_id, transfer_info['to_username'], f"–ü—Ä–∏–Ω—è–ª —Å–º–µ–Ω—É –æ—Ç {transfer_info['from_username']}")

    # –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –º–µ–Ω—é /ads –∏–∑ wizards.py
    @bot.callback_query_handler(func=lambda call: call.data.startswith('ad_'))
    def handle_ad_callbacks(call: types.CallbackQuery):
        if not is_admin(bot, call.from_user.id, call.message.chat.id):
            return bot.answer_callback_query(call.id, "‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        
        chat_id = call.message.chat.id
        message_id = call.message.message_id
        
        bot.answer_callback_query(call.id)
        parts = call.data.split('_')
        action = parts[1]

        try: 
            bot.delete_message(chat_id, message_id)
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        from .wizards import show_ad_cities_menu, show_ad_actions_menu, show_templates_for_deletion, command_ads

        if action == "brand":
            brand = parts[2]
            show_ad_cities_menu(bot, chat_id, brand)
        elif action == "city":
            brand, city = parts[2], parts[3]
            show_ad_actions_menu(bot, chat_id, brand, city)
        elif action == "view":
            brand, city = parts[2], parts[3]
            templates = ad_templates.get(brand, {}).get(city, {})
            if not templates: text = "–®–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –ø–æ–∫–∞ –Ω–µ—Ç."
            else:
                text_lines = [f"üìÑ **–®–∞–±–ª–æ–Ω—ã –¥–ª—è {brand.upper()} / {city.capitalize()}**\n"]
                for name, content in templates.items():
                    text_lines.append(f"üîπ *{name}*:\n`{content}`\n")
                text = "\n".join(text_lines)
            bot.send_message(chat_id, text, parse_mode="Markdown")
        elif action == "addform":
            brand, city = parts[2], parts[3]
            user_id = call.from_user.id
            user_states[user_id] = {"state": "awaiting_ad_template", "brand": brand, "city": city}
            bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n`–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞`\n`–¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞...`\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel", parse_mode="Markdown")
        elif action == "delform":
            brand, city = parts[2], parts[3]
            show_templates_for_deletion(bot, chat_id, brand, city)
        elif action == "delete":
            brand, city, tpl_key = parts[2], parts[3], "_".join(parts[4:])
            if tpl_key in ad_templates.get(brand, {}).get(city, {}):
                del ad_templates[brand][city][tpl_key]
                if save_json_data(AD_TEMPLATES_FILE, ad_templates):
                     bot.send_message(chat_id, f"–®–∞–±–ª–æ–Ω '{tpl_key}' —É–¥–∞–ª–µ–Ω.")
                     # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                     show_templates_for_deletion(bot, chat_id, brand, city)
                else:
                    bot.send_message(chat_id, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
        elif action == 'backtobrand':
            command_ads(call.message)
        elif action == 'backtocity':
            brand = parts[2]
            show_ad_cities_menu(bot, chat_id, brand)

    # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–ª–∞–º—ã
    @bot.callback_query_handler(func=lambda call: call.data.startswith('ads_'))
    def handle_ads_callbacks(call: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤."""
        if not is_admin(bot, call.from_user.id, call.message.chat.id):
            return bot.answer_callback_query(call.id, "‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        
        bot.answer_callback_query(call.id)
        chat_id = call.message.chat.id
        action = call.data[4:]  # —É–±–∏—Ä–∞–µ–º "ads_"
        
        import json
        try:
            with open('ad_templates.json', 'r', encoding='utf-8') as f:
                ad_templates = json.load(f)
        except FileNotFoundError:
            bot.send_message(chat_id, "‚ùå –§–∞–π–ª —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return
        
        if action == "view_all":
            # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
            text_lines = ["üìã –í–°–ï –†–ï–ö–õ–ê–ú–ù–´–ï –®–ê–ë–õ–û–ù–´\n"]
            for brand, cities in ad_templates.items():
                text_lines.append(f"üè¢ {brand.upper()}")
                for city, templates in cities.items():
                    text_lines.append(f"  üìç {city.capitalize()}: {len(templates)} —à–∞–±–ª–æ–Ω–æ–≤")
                    for name in templates.keys():
                        text_lines.append(f"    ‚Ä¢ {name}")
                text_lines.append("")
            
            if len(text_lines) <= 2:
                text = "üìù –†–µ–∫–ª–∞–º–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
            else:
                text = "\n".join(text_lines)
            
            bot.send_message(chat_id, text)
            
        elif action == "by_brands":
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤
            markup = types.InlineKeyboardMarkup()
            for brand in ad_templates.keys():
                btn = types.InlineKeyboardButton(
                    f"üè¢ {brand.upper()}", 
                    callback_data=f"ads_brand_{brand}"
                )
                markup.add(btn)
            markup.add(types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="ads_back_main"))
            bot.send_message(chat_id, "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:", reply_markup=markup)
            
        elif action.startswith("brand_"):
            # –ü–æ–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥–∞ –¥–ª—è –±—Ä–µ–Ω–¥–∞
            brand = action[6:]  # —É–±–∏—Ä–∞–µ–º "brand_"
            cities = ad_templates.get(brand, {})
            
            if not cities:
                bot.send_message(chat_id, f"üìç –£ –±—Ä–µ–Ω–¥–∞ {brand.upper()} –ø–æ–∫–∞ –Ω–µ—Ç –≥–æ—Ä–æ–¥–æ–≤")
                return
                
            markup = types.InlineKeyboardMarkup()
            for city, templates in cities.items():
                btn = types.InlineKeyboardButton(
                    f"üìç {city.capitalize()} ({len(templates)})", 
                    callback_data=f"ads_city_{brand}_{city}"
                )
                markup.add(btn)
            markup.add(types.InlineKeyboardButton("¬´ –ö –±—Ä–µ–Ω–¥–∞–º", callback_data="ads_by_brands"))
            
            bot.send_message(chat_id, f"üìç –ì–æ—Ä–æ–¥–∞ –¥–ª—è {brand.upper()}:", reply_markup=markup)
            
        elif action.startswith("city_"):
            # –ü–æ–∫–∞–∑–∞—Ç—å —à–∞–±–ª–æ–Ω—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞
            parts = action[5:].split('_', 1)  # —É–±–∏—Ä–∞–µ–º "city_"
            brand, city = parts[0], parts[1]
            templates = ad_templates.get(brand, {}).get(city, {})
            
            if not templates:
                bot.send_message(chat_id, f"üìù –£ {brand.upper()} –≤ {city.capitalize()} –ø–æ–∫–∞ –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤")
                return
                
            text_lines = [f"üìù –®–∞–±–ª–æ–Ω—ã {brand.upper()} / {city.capitalize()}\n"]
            for name, content in templates.items():
                text_lines.append(f"üîπ {name}")
                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–≤—å—é
                preview = content[:100] + "..." if len(content) > 100 else content
                text_lines.append(f"   {preview}\n")
            
            text = "\n".join(text_lines)
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(f"¬´ –ö –≥–æ—Ä–æ–¥–∞–º {brand.upper()}", callback_data=f"ads_brand_{brand}"))
            
            bot.send_message(chat_id, text, reply_markup=markup)
            
        elif action == "back_main":
            # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
            from .wizards import command_ads_new
            command_ads_new(call.message)

    @bot.callback_query_handler(func=lambda call: True)
    def _debug_all_callbacks(call: types.CallbackQuery):
        """–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–æ–ª–±—ç–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏."""
        try:
            bot.answer_callback_query(call.id, f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫–æ–ª–±—ç–∫: {call.data}", show_alert=False)
        except Exception:
            pass
        logging.warning(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π callback_data -> {call.data} –æ—Ç {get_username(call.from_user)} –≤ —á–∞—Ç–µ {call.message.chat.id}")
