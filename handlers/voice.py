# handlers/voice.py

import logging
import os
import datetime
import pytz
import random
import threading
from telebot import types

from utils import get_username, init_shift_data, init_user_data, save_history_event
from state import chat_data, ad_templates, chat_configs
from config import VOICE_MIN_DURATION_SECONDS, VOICE_COOLDOWN_SECONDS, OPENAI_API_KEY, BOSS_ID
from phrases import soviet_phrases
from models import UserData

try:
    import openai
    client = openai.OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY and openai else None
except ImportError:
    client = None

def analyze_voice_thread(bot, audio_path: str, user_data: UserData, chat_id: int):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞."""
    if not client or not ad_templates:
        if os.path.exists(audio_path): os.remove(audio_path)
        return

    chat_config = chat_configs.get(str(chat_id), {})
    brand, city = chat_config.get("brand"), chat_config.get("city")
    if not brand or not city:
        if os.path.exists(audio_path): os.remove(audio_path)
        return

    templates_for_location = ad_templates.get(brand, {}).get(city)
    if not templates_for_location:
        if os.path.exists(audio_path): os.remove(audio_path)
        return

    try:
        with open(audio_path, "rb") as audio_file:
            transcript = client.audio.transcriptions.create(model="whisper-1", file=audio_file)
        
        recognized_text = transcript.text
        if not recognized_text.strip(): return

        system_prompt = "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç –≤ —Ç–µ–∫—Å—Ç–µ –¥–∏–∫—Ç–æ—Ä–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞. –í –æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –í–°–ï–• –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤, –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç, –≤–µ—Ä–Ω–∏ 'None'."
        ad_list_for_prompt = "\n".join([f"- {name}: '{text}'" for name, text in templates_for_location.items()])
        user_prompt = f"–¢–µ–∫—Å—Ç –¥–∏–∫—Ç–æ—Ä–∞: '{recognized_text}'.\n\n–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤:\n{ad_list_for_prompt}\n\n–ö–∞–∫–∏–µ —à–∞–±–ª–æ–Ω—ã –±—ã–ª–∏ —É–ø–æ–º—è–Ω—É—Ç—ã?"

        completion = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "system", "content": system_prompt}, {"role": "user", "content": user_prompt}],
            temperature=0
        )
        analysis_result_text = completion.choices[0].message.content.strip()

        if analysis_result_text != 'None':
            found_templates = [line.strip() for line in analysis_result_text.splitlines() if line.strip() in templates_for_location]
            if found_templates:
                user_data.recognized_ads.extend(found_templates)
                logging.info(f"GPT ({chat_id}) –æ–ø—Ä–µ–¥–µ–ª–∏–ª —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {found_templates}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ OpenAI ({chat_id}): {e}")
        try:
            if BOSS_ID: 
                from utils import get_chat_title
                bot.send_message(BOSS_ID, f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ—á–∏ OpenAI –≤ —á–∞—Ç–µ {get_chat_title(bot, chat_id)}:\n`{e}`")
        except Exception as send_e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –æ–± –æ—à–∏–±–∫–µ: {send_e}")
    finally:
        if os.path.exists(audio_path):
            os.remove(audio_path)

def register_voice_handlers(bot):

    @bot.message_handler(content_types=['voice'])
    def handle_voice_message(message: types.Message):
        chat_id = message.chat.id
        if chat_id > 0: return # –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö

        user_id = message.from_user.id
        username = get_username(message.from_user)
        now_moscow = datetime.datetime.now(pytz.timezone('Europe/Moscow'))

        if chat_id not in chat_data or not chat_data[chat_id]: 
            init_shift_data(chat_id)
        
        shift = chat_data[chat_id]
        if user_id not in shift.users:
            shift.users[user_id] = init_user_data(user_id, username)

        is_new_main = False
        if shift.main_id is None:
            shift.main_id = user_id
            shift.main_username = username
            is_new_main = True

        if shift.main_id == user_id:
            if is_new_main:
                phrase = random.choice(soviet_phrases.get("system_messages", {}).get('first_voice_new_main', ["üëë {username} —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≥–ª–∞–≤–Ω—ã–º, –∑–∞–ø–∏—Å–∞–≤ –ø–µ—Ä–≤–æ–µ –ì–°!"]))
                bot.send_message(chat_id, phrase.format(username=username))
                save_history_event(chat_id, user_id, username, "–°—Ç–∞–ª –≥–ª–∞–≤–Ω—ã–º (–ø–µ—Ä–≤–æ–µ –ì–°)")

            user_data = shift.users[user_id]
            
            if not is_new_main and user_data.last_voice_time:
                last_voice_time = datetime.datetime.fromisoformat(user_data.last_voice_time)
                time_since_last = (now_moscow - last_voice_time).total_seconds()
                if time_since_last < VOICE_COOLDOWN_SECONDS:
                    remaining = int(VOICE_COOLDOWN_SECONDS - time_since_last)
                    phrase = random.choice(soviet_phrases.get("system_messages", {}).get('voice_cooldown', ["–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ! –ü–∞—É–∑–∞ {remaining} —Å–µ–∫."]))
                    bot.reply_to(message, phrase.format(remaining=remaining), disable_notification=True)
                    return

            if message.voice.duration < VOICE_MIN_DURATION_SECONDS:
                bot.reply_to(message, f"*{random.choice(soviet_phrases.get('too_short', ['–ö–æ—Ä–æ—Ç–∫–æ']))}* ({message.voice.duration} —Å–µ–∫)")
                return

            bot.send_message(chat_id, f"*{random.choice(soviet_phrases.get('accept', ['–ü—Ä–∏–Ω—è—Ç–æ']))}*", reply_to_message_id=message.message_id)

            if user_data.last_voice_time:
                delta_minutes = (now_moscow - datetime.datetime.fromisoformat(user_data.last_voice_time)).total_seconds() / 60
                user_data.voice_deltas.append(delta_minutes)

            user_data.count += 1
            user_data.last_voice_time = now_moscow.isoformat()
            user_data.voice_durations.append(message.voice.duration)
            user_data.last_activity_reminder_time = None

            if client:
                try:
                    file_info = bot.get_file(message.voice.file_id)
                    downloaded_file = bot.download_file(file_info.file_path)
                    
                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
                    temp_dir = "temp_voices"
                    os.makedirs(temp_dir, exist_ok=True)
                    file_path = os.path.join(temp_dir, f"voice_{message.message_id}.ogg")
                    
                    with open(file_path, 'wb') as new_file:
                        new_file.write(downloaded_file)
                    
                    threading.Thread(target=analyze_voice_thread, args=(bot, file_path, user_data, chat_id)).start()
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {e}")
