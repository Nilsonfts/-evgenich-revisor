# handlers/user.py

import random
import datetime
import pytz
import logging
import pandas as pd
from collections import Counter
from telebot import types

from utils import get_username, get_username_with_at, is_admin
from state import chat_data
from g_sheets import get_sheet
from phrases import soviet_phrases

def register_user_handlers(bot):

    @bot.message_handler(commands=['–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π', 'check'])
    def handle_check(message: types.Message):
        chat_id = message.chat.id
        user_id = message.from_user.id
        shift = chat_data.get(chat_id)
        
        if not shift or not shift.main_id:
            phrase = random.choice(soviet_phrases.get("system_messages", {}).get('shift_not_started', ["–°–º–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å."]))
            return bot.reply_to(message, phrase)
            
        if user_id != shift.main_id:
            main_username = shift.main_username
            phrase = random.choice(soviet_phrases.get("system_messages", {}).get('only_for_main_user', ["–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –≥–ª–∞–≤–Ω—ã–π –Ω–∞ —Å–º–µ–Ω–µ: {main_username}."]))
            return bot.reply_to(message, phrase.format(main_username=main_username))
            
        main_user_data = shift.users.get(shift.main_id)
        if not main_user_data:
            return bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω–µ.")

        shift_goal = shift.shift_goal
        plan_percent = (main_user_data.count / shift_goal * 100) if shift_goal > 0 else 0
        report_lines = [
            f"üìã *–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –≤–∞—Å* ({datetime.datetime.now(pytz.timezone('Europe/Moscow')).strftime('%H:%M')})",
            f"üó£Ô∏è **–ì–æ–ª–æ—Å–æ–≤—ã—Ö:** {main_user_data.count} –∏–∑ {shift_goal} ({plan_percent:.0f}%)",
            f"‚òï **–ü–µ—Ä–µ—Ä—ã–≤–æ–≤:** {main_user_data.breaks_count}",
            f"‚è≥ **–û–ø–æ–∑–¥–∞–Ω–∏–π —Å –ø–µ—Ä–µ—Ä—ã–≤–∞:** {main_user_data.late_returns}"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—É–∑–µ, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞
        if main_user_data.on_pause:
            now_moscow = datetime.datetime.now(pytz.timezone('Europe/Moscow'))
            pause_start = datetime.datetime.fromisoformat(main_user_data.pause_start_time)
            elapsed = (now_moscow - pause_start).total_seconds() / 60
            remaining = max(0, 40 - elapsed)
            if remaining > 0:
                report_lines.append(f"‚è∏Ô∏è **–ü–ê–£–ó–ê –ê–ö–¢–ò–í–ù–ê:** –æ—Å—Ç–∞–ª–æ—Å—å {int(remaining)} –º–∏–Ω")
            else:
                # –ü–∞—É–∑–∞ –∏—Å—Ç–µ–∫–ª–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∞–µ–º
                main_user_data.on_pause = False
                main_user_data.pause_end_time = now_moscow.isoformat()
                report_lines.append("‚èØÔ∏è **–ü–∞—É–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞** –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
        
        ad_counts = Counter(main_user_data.recognized_ads)
        if ad_counts:
            report_lines.append("\n**üìù –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:**")
            for ad, count in ad_counts.items():
                report_lines.append(f"‚úîÔ∏è {ad} (x{count})")
        bot.reply_to(message, "\n".join(report_lines), parse_mode="Markdown")

    @bot.message_handler(commands=['—Å–≤–æ–¥–∫–∞'])
    def my_total_stats(message: types.Message):
        if not pd: return bot.reply_to(message, "–ú–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö (pandas) –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        
        user_id = message.from_user.id
        username = get_username_with_at(message.from_user)
        bot.reply_to(message, f"üìä –°–æ–±–∏—Ä–∞—é –≤–∞—à—É –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã, {username}. –ú–∏–Ω—É—Ç–∫—É...")
        
        worksheet = get_sheet()
        if not worksheet: return bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google –¢–∞–±–ª–∏—Ü–µ.")
        
        try:
            df = pd.DataFrame(worksheet.get_all_records())
            if df.empty or 'ID –í–µ–¥—É—â–µ–≥–æ' not in df.columns: return bot.send_message(message.chat.id, "–í —Ç–∞–±–ª–∏—Ü–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            
            df['ID –í–µ–¥—É—â–µ–≥–æ'] = pd.to_numeric(df['ID –í–µ–¥—É—â–µ–≥–æ'], errors='coerce')
            user_df = df[df['ID –í–µ–¥—É—â–µ–≥–æ'] == user_id].copy()
            
            if user_df.empty: return bot.send_message(message.chat.id, f"{username}, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞—à–∏—Ö —Å–º–µ–Ω –≤ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
            
            numeric_cols = ['–ì–æ–ª–æ—Å–æ–≤—ã—Ö (—à—Ç)', '–ü–µ—Ä–µ—Ä—ã–≤–æ–≤ (—à—Ç)', '–û–ø–æ–∑–¥–∞–Ω–∏–π (—à—Ç)']
            for col in numeric_cols: 
                user_df[col] = pd.to_numeric(user_df[col], errors='coerce').fillna(0)

            total_shifts = len(user_df)
            total_voices = user_df['–ì–æ–ª–æ—Å–æ–≤—ã—Ö (—à—Ç)'].sum()
            total_breaks = user_df['–ü–µ—Ä–µ—Ä—ã–≤–æ–≤ (—à—Ç)'].sum()
            total_lates = user_df['–û–ø–æ–∑–¥–∞–Ω–∏–π (—à—Ç)'].sum()
            
            report_text = (
                f"‚≠êÔ∏è –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {username} ‚≠êÔ∏è\n\n"
                f"üëë –í—Å–µ–≥–æ —Å–º–µ–Ω –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_shifts}\n"
                f"üó£Ô∏è –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞–ø–∏—Å–∞–Ω–æ: {int(total_voices)}\n"
                f"‚òïÔ∏è –í—Å–µ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤: {int(total_breaks)}\n"
                f"‚è≥ –í—Å–µ–≥–æ –æ–ø–æ–∑–¥–∞–Ω–∏–π —Å –ø–µ—Ä–µ—Ä—ã–≤–∞: {int(total_lates)}"
            )
            bot.send_message(message.chat.id, report_text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Google Sheets –¥–ª—è /—Å–≤–æ–¥–∫–∞: {e}")
            phrase = random.choice(soviet_phrases.get("system_messages", {}).get('generic_error', ["–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã."]))
            bot.send_message(message.chat.id, phrase)

    @bot.message_handler(commands=['help', '–ø–æ–º–æ—â—å'])
    def handle_help(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏."""
        from help_system import get_help_text
        help_text = get_help_text()
        bot.send_message(message.chat.id, help_text, parse_mode='Markdown')
    
    @bot.message_handler(commands=['helpadmin', '–∞–¥–º–∏–Ω–ø–æ–º–æ—â—å'])
    def handle_admin_help(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."""
        from utils import is_admin
        if not is_admin(bot, message.chat.id, message.from_user.id):
            return bot.reply_to(message, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        
        from help_system import get_admin_help_text
        help_text = get_admin_help_text()
        bot.send_message(message.chat.id, help_text, parse_mode='Markdown')
    
    @bot.message_handler(commands=['—Ä–æ–ª–∏', 'roles'])
    def handle_roles_info(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–ª—è—Ö."""
        from help_system import get_roles_help_text
        roles_text = get_roles_help_text()
        bot.send_message(message.chat.id, roles_text, parse_mode='Markdown')
    
    @bot.message_handler(commands=['commands', '–∫–æ–º–∞–Ω–¥—ã'])
    def handle_all_commands(message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥."""
        from utils import is_user_admin
        from commands_list import get_all_commands_list
        
        is_admin = is_user_admin(message.from_user.id, message.chat.id)
        commands_text = get_all_commands_list(is_admin)
        bot.send_message(message.chat.id, commands_text)
    
    @bot.message_handler(commands=['quick', '–±—ã—Å—Ç—Ä—ã–µ'])
    def handle_quick_commands(message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã."""
        from commands_list import get_quick_commands
        
        quick_text = get_quick_commands()
        bot.send_message(message.chat.id, quick_text)

    @bot.message_handler(commands=['time'])
    def handle_time(message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è."""
        import datetime
        import pytz
        
        moscow_tz = pytz.timezone('Europe/Moscow')
        now = datetime.datetime.now(moscow_tz)
        
        time_text = f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now.strftime('%H:%M:%S')}\nüìÖ –î–∞—Ç–∞: {now.strftime('%d.%m.%Y')}\nüåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: –ú–æ—Å–∫–≤–∞ (MSK)"
        bot.send_message(message.chat.id, time_text)

    @bot.message_handler(commands=['rating'])
    def handle_rating(message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –≤—Å–µ—Ö –≤–µ–¥—É—â–∏—Ö."""
        from database import BotDatabase
        
        try:
            db = BotDatabase()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—É—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            rating_data = db.get_user_rating()
            
            if not rating_data:
                bot.send_message(message.chat.id, "üìä –î–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–∫–∞ –Ω–µ—Ç.")
                return
            
            rating_text = ["üèÜ –†–ï–ô–¢–ò–ù–ì –í–ï–î–£–©–ò–• üèÜ\n"]
            
            for i, (username, total_voices, avg_voices) in enumerate(rating_data[:10], 1):
                emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
                safe_username = username.replace('_', r'\_').replace('*', r'\*').replace('[', r'\[').replace('`', r'\`')
                rating_text.append(f"{emoji} {safe_username}: {total_voices} –≥–æ–ª–æ—Å–æ–≤—ã—Ö (—Å—Ä. {avg_voices})")
            
            bot.send_message(message.chat.id, "\n".join(rating_text))
            
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")

    @bot.message_handler(commands=['status'])
    def handle_status(message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã."""
        from state import chat_data
        import datetime
        
        chat_id = message.chat.id
        
        status_text = ["üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´\n"]
        
        if chat_id in chat_data and chat_data[chat_id]:
            shift = chat_data[chat_id]
            if shift.users:
                status_text.append("‚úÖ –°–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞")
                status_text.append(f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(shift.users)}")
                
                for user_data in shift.users.values():
                    role = getattr(user_data, 'role', '–∫–∞—Ä–∞–æ–∫–µ_–≤–µ–¥—É—â–∏–π')
                    from roles import get_role_emoji, get_role_description
                    emoji = get_role_emoji(role)
                    desc = get_role_description(role)
                    safe_username = user_data.username.replace('_', r'\_').replace('*', r'\*').replace('[', r'\[').replace('`', r'\`')
                    
                    status_line = f"  {emoji} {safe_username}: {user_data.count} –≥–æ–ª–æ—Å–æ–≤—ã—Ö ({desc})"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞—É–∑—ã, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞
                    if user_data.on_pause:
                        now_moscow = datetime.datetime.now(pytz.timezone('Europe/Moscow'))
                        pause_start = datetime.datetime.fromisoformat(user_data.pause_start_time)
                        elapsed = (now_moscow - pause_start).total_seconds() / 60
                        remaining = max(0, 40 - elapsed)
                        if remaining > 0:
                            status_line += f" ‚è∏Ô∏è (–ø–∞—É–∑–∞ {int(remaining)} –º–∏–Ω)"
                        else:
                            # –ü–∞—É–∑–∞ –∏—Å—Ç–µ–∫–ª–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∞–µ–º
                            user_data.on_pause = False
                            user_data.pause_end_time = now_moscow.isoformat()
                    
                    status_text.append(status_line)
            else:
                status_text.append("‚ö™ –°–º–µ–Ω–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
        else:
            status_text.append("‚ö™ –°–º–µ–Ω–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
        
        status_text.append(f"\nüïê –í—Ä–µ–º—è: {datetime.datetime.now().strftime('%H:%M:%S')}")
        
        bot.send_message(message.chat.id, "\n".join(status_text))

    @bot.message_handler(commands=['–ø–∞—É–∑–∞', 'pause'])
    def handle_pause(message: types.Message):
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–∞—É–∑—É –Ω–∞ 40 –º–∏–Ω—É—Ç –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤."""
        chat_id = message.chat.id
        user_id = message.from_user.id
        shift = chat_data.get(chat_id)
        
        if not shift or not shift.main_id:
            phrase = random.choice(soviet_phrases.get("system_messages", {}).get('shift_not_started', ["–°–º–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å."]))
            return bot.reply_to(message, phrase)
            
        if user_id != shift.main_id:
            main_username = shift.main_username
            phrase = random.choice(soviet_phrases.get("system_messages", {}).get('only_for_main_user', ["–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –≥–ª–∞–≤–Ω—ã–π –Ω–∞ —Å–º–µ–Ω–µ: {main_username}."]))
            return bot.reply_to(message, phrase.format(main_username=main_username))
            
        user_data = shift.users.get(shift.main_id)
        if not user_data:
            return bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω–µ.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —É–∂–µ –ø–∞—É–∑–∞
        if user_data.on_pause:
            now_moscow = datetime.datetime.now(pytz.timezone('Europe/Moscow'))
            pause_start = datetime.datetime.fromisoformat(user_data.pause_start_time)
            elapsed = (now_moscow - pause_start).total_seconds() / 60
            remaining = max(0, 40 - elapsed)
            
            if remaining > 0:
                return bot.reply_to(message, f"‚è∏Ô∏è –ü–∞—É–∑–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞! –û—Å—Ç–∞–ª–æ—Å—å: {int(remaining)} –º–∏–Ω—É—Ç.")
            else:
                # –ü–∞—É–∑–∞ –∏—Å—Ç–µ–∫–ª–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∞–µ–º
                user_data.on_pause = False
                user_data.pause_end_time = now_moscow.isoformat()
                bot.reply_to(message, "‚èØÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è –ø–∞—É–∑–∞ –∏—Å—Ç–µ–∫–ª–∞. –ê–∫—Ç–∏–≤–∏—Ä—É—é –Ω–æ–≤—É—é –ø–∞—É–∑—É –Ω–∞ 40 –º–∏–Ω—É—Ç...")
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–∞—É–∑—É
        now_moscow = datetime.datetime.now(pytz.timezone('Europe/Moscow'))
        user_data.on_pause = True
        user_data.pause_start_time = now_moscow.isoformat()
        user_data.pause_end_time = (now_moscow + datetime.timedelta(minutes=40)).isoformat()
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–µ—Ä–µ—Ä—ã–≤
        if user_data.on_break:
            user_data.on_break = False
            
        bot.reply_to(message, 
            f"‚è∏Ô∏è **–ü–ê–£–ó–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê** –Ω–∞ 40 –º–∏–Ω—É—Ç!\n\n"
            f"üö´ –í—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n"
            f"‚è∞ –ü–∞—É–∑–∞ –¥–æ: {(now_moscow + datetime.timedelta(minutes=40)).strftime('%H:%M')}\n"
            f"‚ÑπÔ∏è –î–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: `/—Å—Ç–æ–ø_–ø–∞—É–∑–∞`")

    @bot.message_handler(commands=['—Å—Ç–æ–ø_–ø–∞—É–∑–∞', 'stop_pause'])
    def handle_stop_pause(message: types.Message):
        """–î–æ—Å—Ä–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –ø–∞—É–∑—É."""
        chat_id = message.chat.id
        user_id = message.from_user.id
        shift = chat_data.get(chat_id)
        
        if not shift or not shift.main_id:
            phrase = random.choice(soviet_phrases.get("system_messages", {}).get('shift_not_started', ["–°–º–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å."]))
            return bot.reply_to(message, phrase)
            
        if user_id != shift.main_id:
            main_username = shift.main_username
            phrase = random.choice(soviet_phrases.get("system_messages", {}).get('only_for_main_user', ["–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –≥–ª–∞–≤–Ω—ã–π –Ω–∞ —Å–º–µ–Ω–µ: {main_username}."]))
            return bot.reply_to(message, phrase.format(main_username=main_username))
            
        user_data = shift.users.get(shift.main_id)
        if not user_data:
            return bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω–µ.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–∞—É–∑–∞
        if not user_data.on_pause:
            return bot.reply_to(message, "‚ùå –ü–∞—É–∑–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–∞—É–∑—É
        now_moscow = datetime.datetime.now(pytz.timezone('Europe/Moscow'))
        pause_start = datetime.datetime.fromisoformat(user_data.pause_start_time)
        pause_duration = (now_moscow - pause_start).total_seconds() / 60
        
        user_data.on_pause = False
        user_data.pause_end_time = now_moscow.isoformat()
        
        bot.reply_to(message, 
            f"‚èØÔ∏è **–ü–ê–£–ó–ê –ó–ê–í–ï–†–®–ï–ù–ê** –¥–æ—Å—Ä–æ—á–Ω–æ!\n\n"
            f"‚úÖ –í—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω—ã\n"
            f"üìä –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—É–∑—ã: {int(pause_duration)} –º–∏–Ω—É—Ç\n"
            f"üéØ –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É!")

    @bot.message_handler(commands=['–Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings'])
    def handle_chat_settings(message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞."""
        from state import chat_configs
        import pytz
        
        chat_id = message.chat.id
        config = chat_configs.get(str(chat_id), {})
        
        if not config:
            bot.send_message(chat_id, 
                "‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò –ß–ê–¢–ê**\n\n"
                "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                "üí° –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        brand = config.get('concept', '–ù–µ —É–∫–∞–∑–∞–Ω')  # concept –≤–º–µ—Å—Ç–æ brand
        city = config.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω') 
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ schedule –æ–±—ä–µ–∫—Ç–∞
        schedule = config.get('schedule', {})
        start_time = schedule.get('start', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        end_time = schedule.get('end', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        
        # –ü–æ–ª—É—á–∞–µ–º timezone –∫–∞–∫ —á–∏—Å–ª–æ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        timezone_offset = config.get('timezone', 0)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–º–µ—â–µ–Ω–∏—è
        if timezone_offset == 0:
            tz_name = 'Europe/Moscow'
            tz_display = '–ú–æ—Å–∫–æ–≤—Å–∫–∏–π (–ú–°–ö)'
        elif timezone_offset == 2:
            tz_name = 'Asia/Yekaterinburg'
            tz_display = '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–∏–π (–ú–°–ö+2)'
        elif timezone_offset == 3:
            tz_name = 'Asia/Omsk'
            tz_display = '–û–º—Å–∫–∏–π (–ú–°–ö+3)'
        elif timezone_offset == 4:
            tz_name = 'Asia/Krasnoyarsk'
            tz_display = '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π (–ú–°–ö+4)'
        elif timezone_offset == 5:
            tz_name = 'Asia/Irkutsk'
            tz_display = '–ò—Ä–∫—É—Ç—Å–∫–∏–π (–ú–°–ö+5)'
        else:
            tz_name = 'Europe/Moscow'
            tz_display = f'–ú–°–ö{timezone_offset:+d}'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç –ú–æ—Å–∫–≤—ã
        if timezone_offset == 0:
            offset_text = "–°–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ú–æ—Å–∫–≤–æ–π"
        elif timezone_offset > 0:
            offset_text = f"+{timezone_offset} —á –æ—Ç –ú–æ—Å–∫–≤—ã"
        else:
            offset_text = f"{timezone_offset} —á –æ—Ç –ú–æ—Å–∫–≤—ã"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–º–µ–Ω—ã
        try:
            start_hour, start_minute = map(int, start_time.split(':'))
            end_hour, end_minute = map(int, end_time.split(':'))
            
            start_total_minutes = start_hour * 60 + start_minute
            end_total_minutes = end_hour * 60 + end_minute
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
            if end_total_minutes < start_total_minutes:
                end_total_minutes += 24 * 60
            
            duration_minutes = end_total_minutes - start_total_minutes
            duration_hours = duration_minutes // 60
            duration_mins = duration_minutes % 60
            
            if duration_mins == 0:
                duration_text = f"{duration_hours} —á–∞—Å–æ–≤"
            else:
                duration_text = f"{duration_hours} —á {duration_mins} –º–∏–Ω"
                
        except Exception:
            duration_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        settings_text = [
            "‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò –ß–ê–¢–ê**\n",
            f"üè¢ **–ë—Ä–µ–Ω–¥:** {brand}",
            f"üèôÔ∏è **–ì–æ—Ä–æ–¥:** {city}",
            f"üïê **–í—Ä–µ–º—è —Å–º–µ–Ω—ã:** {start_time} - {end_time}",
            f"‚è±Ô∏è **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {duration_text}",
            f"üåç **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:** {tz_display}",
            f"üîÑ **–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ú–æ—Å–∫–≤—ã:** {offset_text}",
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ —á–∞—Ç–∞
        try:
            local_tz = pytz.timezone(tz_name)
            current_local = datetime.datetime.now(local_tz)
            settings_text.append(f"\nüïê **–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∑–¥–µ—Å—å:** {current_local.strftime('%H:%M:%S')}")
            settings_text.append(f"üìÖ **–î–∞—Ç–∞:** {current_local.strftime('%d.%m.%Y')}")
        except Exception:
            pass
            
        bot.send_message(chat_id, "\n".join(settings_text), parse_mode="Markdown")

    @bot.message_handler(commands=['gameover'])
    def handle_gameover(message: types.Message):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)."""
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞
        shift = chat_data.get(chat_id)
        if not shift or not shift.main_id:
            phrase = random.choice(soviet_phrases.get("system_messages", {}).get('shift_not_started', ["–°–º–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å."]))
            return bot.reply_to(message, phrase)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–µ–¥—É—â–∏–π
        if user_id != shift.main_id:
            main_username = shift.main_username
            phrase = random.choice(soviet_phrases.get("system_messages", {}).get('only_for_main_user', ["–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –≥–ª–∞–≤–Ω—ã–π –Ω–∞ —Å–º–µ–Ω–µ: {main_username}."]))
            return bot.reply_to(message, phrase.format(main_username=main_username))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è —Å–º–µ–Ω—ã —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å
        from state import chat_configs
        config = chat_configs.get(str(chat_id), {})
        tz_name = config.get('timezone', 'Europe/Moscow')
        end_time_str = config.get('end_time', '04:00')
        
        try:
            import pytz
            local_tz = pytz.timezone(tz_name)
            now_local = datetime.datetime.now(local_tz)
            
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã
            end_hour, end_minute = map(int, end_time_str.split(':'))
            end_time = datetime.time(end_hour, end_minute)
            current_time_only = now_local.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–º–µ–Ω–∞ –¥–æ 04:00)
            if end_time.hour < 12:  # –°–º–µ–Ω–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —É—Ç—Ä–æ–º
                shift_ended = (
                    current_time_only >= end_time or 
                    current_time_only >= datetime.time(20, 0)  # –ò–ª–∏ —É–∂–µ –ø–æ–∑–¥–Ω–∏–π –≤–µ—á–µ—Ä
                )
            else:  # –°–º–µ–Ω–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤–µ—á–µ—Ä–æ–º
                shift_ended = current_time_only >= end_time
            
            if not shift_ended:
                return bot.reply_to(message, 
                    f"‚è≥ **–°–ú–ï–ù–ê –ï–©–ï –ù–ï –ó–ê–ö–û–ù–ß–ò–õ–ê–°–¨**\n\n"
                    f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now_local.strftime('%H:%M')}\n"
                    f"‚è∞ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã: {end_time_str}\n"
                    f"üö´ –ö–æ–º–∞–Ω–¥–∞ /gameover –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n\n"
                    f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–º–µ–Ω—ã –¥–ª—è /gameover –≤ —á–∞—Ç–µ {chat_id}: {e}")
            return bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–º–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–º–µ–Ω—É
        from scheduler import send_end_of_shift_report_for_chat
        
        bot.reply_to(message, 
            f"üèÅ **–°–ú–ï–ù–ê –ó–ê–í–ï–†–®–ê–ï–¢–°–Ø –î–û–°–†–û–ß–ù–û**\n\n" 
            f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ /gameover –ø—Ä–∏–Ω—è—Ç–∞!\n"
            f"üìä –§–æ—Ä–º–∏—Ä—É—é —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...\n"
            f"‚è±Ô∏è –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
        
        try:
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã
            send_end_of_shift_report_for_chat(bot, chat_id)
            logging.info(f"–°–º–µ–Ω–∞ –≤ —á–∞—Ç–µ {chat_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–æ–π /gameover –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /gameover –≤ —á–∞—Ç–µ {chat_id}: {e}")
            bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–º–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
