# handlers/user.py

import random
import datetime
import pytz
import logging
import pandas as pd
from collections import Counter
from telebot import types

from utils import get_username, get_username_with_at, is_admin
from state import chat_data
from g_sheets import get_sheet
from phrases import soviet_phrases

def register_user_handlers(bot):

    @bot.message_handler(commands=['–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π', 'check'])
    def handle_check(message: types.Message):
        chat_id = message.chat.id
        user_id = message.from_user.id
        shift = chat_data.get(chat_id)
        
        if not shift or not shift.main_id:
            phrase = random.choice(soviet_phrases.get("system_messages", {}).get('shift_not_started', ["–°–º–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å."]))
            return bot.reply_to(message, phrase)
            
        if user_id != shift.main_id:
            main_username = shift.main_username
            phrase = random.choice(soviet_phrases.get("system_messages", {}).get('only_for_main_user', ["–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –≥–ª–∞–≤–Ω—ã–π –Ω–∞ —Å–º–µ–Ω–µ: {main_username}."]))
            return bot.reply_to(message, phrase.format(main_username=main_username))
            
        main_user_data = shift.users.get(shift.main_id)
        if not main_user_data:
            return bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω–µ.")

        shift_goal = shift.shift_goal
        plan_percent = (main_user_data.count / shift_goal * 100) if shift_goal > 0 else 0
        report_lines = [
            f"üìã *–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –≤–∞—Å* ({datetime.datetime.now(pytz.timezone('Europe/Moscow')).strftime('%H:%M')})",
            f"üó£Ô∏è **–ì–æ–ª–æ—Å–æ–≤—ã—Ö:** {main_user_data.count} –∏–∑ {shift_goal} ({plan_percent:.0f}%)",
            f"‚òï **–ü–µ—Ä–µ—Ä—ã–≤–æ–≤:** {main_user_data.breaks_count}",
            f"‚è≥ **–û–ø–æ–∑–¥–∞–Ω–∏–π —Å –ø–µ—Ä–µ—Ä—ã–≤–∞:** {main_user_data.late_returns}"
        ]
        ad_counts = Counter(main_user_data.recognized_ads)
        if ad_counts:
            report_lines.append("\n**üìù –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:**")
            for ad, count in ad_counts.items():
                report_lines.append(f"‚úîÔ∏è {ad} (x{count})")
        bot.reply_to(message, "\n".join(report_lines), parse_mode="Markdown")

    @bot.message_handler(commands=['—Å–≤–æ–¥–∫–∞'])
    def my_total_stats(message: types.Message):
        if not pd: return bot.reply_to(message, "–ú–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö (pandas) –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        
        user_id = message.from_user.id
        username = get_username_with_at(message.from_user)
        bot.reply_to(message, f"üìä –°–æ–±–∏—Ä–∞—é –≤–∞—à—É –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã, {username}. –ú–∏–Ω—É—Ç–∫—É...")
        
        worksheet = get_sheet()
        if not worksheet: return bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google –¢–∞–±–ª–∏—Ü–µ.")
        
        try:
            df = pd.DataFrame(worksheet.get_all_records())
            if df.empty or 'ID –í–µ–¥—É—â–µ–≥–æ' not in df.columns: return bot.send_message(message.chat.id, "–í —Ç–∞–±–ª–∏—Ü–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            
            df['ID –í–µ–¥—É—â–µ–≥–æ'] = pd.to_numeric(df['ID –í–µ–¥—É—â–µ–≥–æ'], errors='coerce')
            user_df = df[df['ID –í–µ–¥—É—â–µ–≥–æ'] == user_id].copy()
            
            if user_df.empty: return bot.send_message(message.chat.id, f"{username}, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞—à–∏—Ö —Å–º–µ–Ω –≤ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
            
            numeric_cols = ['–ì–æ–ª–æ—Å–æ–≤—ã—Ö (—à—Ç)', '–ü–µ—Ä–µ—Ä—ã–≤–æ–≤ (—à—Ç)', '–û–ø–æ–∑–¥–∞–Ω–∏–π (—à—Ç)']
            for col in numeric_cols: 
                user_df[col] = pd.to_numeric(user_df[col], errors='coerce').fillna(0)

            total_shifts = len(user_df)
            total_voices = user_df['–ì–æ–ª–æ—Å–æ–≤—ã—Ö (—à—Ç)'].sum()
            total_breaks = user_df['–ü–µ—Ä–µ—Ä—ã–≤–æ–≤ (—à—Ç)'].sum()
            total_lates = user_df['–û–ø–æ–∑–¥–∞–Ω–∏–π (—à—Ç)'].sum()
            
            report_text = (
                f"‚≠êÔ∏è –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {username} ‚≠êÔ∏è\n\n"
                f"üëë –í—Å–µ–≥–æ —Å–º–µ–Ω –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_shifts}\n"
                f"üó£Ô∏è –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞–ø–∏—Å–∞–Ω–æ: {int(total_voices)}\n"
                f"‚òïÔ∏è –í—Å–µ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤: {int(total_breaks)}\n"
                f"‚è≥ –í—Å–µ–≥–æ –æ–ø–æ–∑–¥–∞–Ω–∏–π —Å –ø–µ—Ä–µ—Ä—ã–≤–∞: {int(total_lates)}"
            )
            bot.send_message(message.chat.id, report_text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Google Sheets –¥–ª—è /—Å–≤–æ–¥–∫–∞: {e}")
            phrase = random.choice(soviet_phrases.get("system_messages", {}).get('generic_error', ["–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã."]))
            bot.send_message(message.chat.id, phrase)

    @bot.message_handler(commands=['help', '–ø–æ–º–æ—â—å'])
    def handle_help(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏."""
        from help_system import get_help_text
        help_text = get_help_text()
        bot.send_message(message.chat.id, help_text, parse_mode='Markdown')
    
    @bot.message_handler(commands=['helpadmin', '–∞–¥–º–∏–Ω–ø–æ–º–æ—â—å'])
    def handle_admin_help(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."""
        from utils import is_admin
        if not is_admin(bot, message.chat.id, message.from_user.id):
            return bot.reply_to(message, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        
        from help_system import get_admin_help_text
        help_text = get_admin_help_text()
        bot.send_message(message.chat.id, help_text, parse_mode='Markdown')
    
    @bot.message_handler(commands=['—Ä–æ–ª–∏', 'roles'])
    def handle_roles_info(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–ª—è—Ö."""
        from help_system import get_roles_help_text
        roles_text = get_roles_help_text()
        bot.send_message(message.chat.id, roles_text, parse_mode='Markdown')
    
    @bot.message_handler(commands=['commands', '–∫–æ–º–∞–Ω–¥—ã'])
    def handle_all_commands(message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥."""
        from utils import is_user_admin
        from commands_list import get_all_commands_list
        
        is_admin = is_user_admin(message.from_user.id, message.chat.id)
        commands_text = get_all_commands_list(is_admin)
        bot.send_message(message.chat.id, commands_text)
    
    @bot.message_handler(commands=['quick', '–±—ã—Å—Ç—Ä—ã–µ'])
    def handle_quick_commands(message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã."""
        from commands_list import get_quick_commands
        
        quick_text = get_quick_commands()
        bot.send_message(message.chat.id, quick_text)

    @bot.message_handler(commands=['time'])
    def handle_time(message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è."""
        import datetime
        import pytz
        
        moscow_tz = pytz.timezone('Europe/Moscow')
        now = datetime.datetime.now(moscow_tz)
        
        time_text = f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now.strftime('%H:%M:%S')}\nüìÖ –î–∞—Ç–∞: {now.strftime('%d.%m.%Y')}\nüåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: –ú–æ—Å–∫–≤–∞ (MSK)"
        bot.send_message(message.chat.id, time_text)

    @bot.message_handler(commands=['rating'])
    def handle_rating(message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –≤—Å–µ—Ö –≤–µ–¥—É—â–∏—Ö."""
        from database import BotDatabase
        from config import DATABASE_PATH
        
        try:
            db = BotDatabase(DATABASE_PATH)
            rating_data = db.get_user_rating()
            
            if not rating_data:
                bot.send_message(message.chat.id, "üìä –î–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–∫–∞ –Ω–µ—Ç.")
                return
            
            rating_text = ["üèÜ –†–ï–ô–¢–ò–ù–ì –í–ï–î–£–©–ò–• üèÜ\n"]
            
            for i, (username, total_voices, avg_voices) in enumerate(rating_data[:10], 1):
                emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
                safe_username = username.replace('_', r'\_').replace('*', r'\*').replace('[', r'\[').replace('`', r'\`')
                rating_text.append(f"{emoji} {safe_username}: {total_voices} –≥–æ–ª–æ—Å–æ–≤—ã—Ö (—Å—Ä. {avg_voices})")
            
            bot.send_message(message.chat.id, "\n".join(rating_text))
            
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")

    @bot.message_handler(commands=['status'])
    def handle_status(message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã."""
        from state import chat_data
        import datetime
        
        chat_id = message.chat.id
        
        status_text = ["üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´\n"]
        
        if chat_id in chat_data and chat_data[chat_id]:
            shift = chat_data[chat_id]
            if shift.users:
                status_text.append("‚úÖ –°–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞")
                status_text.append(f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(shift.users)}")
                
                for user_data in shift.users.values():
                    role = getattr(user_data, 'role', '–∫–∞—Ä–∞–æ–∫–µ_–≤–µ–¥—É—â–∏–π')
                    from roles import get_role_emoji, get_role_description
                    emoji = get_role_emoji(role)
                    desc = get_role_description(role)
                    safe_username = user_data.username.replace('_', r'\_').replace('*', r'\*').replace('[', r'\[').replace('`', r'\`')
                    status_text.append(f"  {emoji} {safe_username}: {user_data.count} –≥–æ–ª–æ—Å–æ–≤—ã—Ö ({desc})")
            else:
                status_text.append("‚ö™ –°–º–µ–Ω–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
        else:
            status_text.append("‚ö™ –°–º–µ–Ω–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
        
        status_text.append(f"\nüïê –í—Ä–µ–º—è: {datetime.datetime.now().strftime('%H:%M:%S')}")
        
        bot.send_message(message.chat.id, "\n".join(status_text))
