# handlers/user.py

import random
import datetime
import pandas as pd
from collections import Counter
from telebot import types

from utils import get_username
from state import chat_data
from g_sheets import get_sheet
from phrases import soviet_phrases

def register_user_handlers(bot):

    @bot.message_handler(commands=['–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π', 'check'])
    def handle_check(message: types.Message):
        chat_id = message.chat.id
        user_id = message.from_user.id
        shift = chat_data.get(chat_id)
        
        if not shift or not shift.main_id:
            phrase = random.choice(soviet_phrases.get("system_messages", {}).get('shift_not_started', ["–°–º–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å."]))
            return bot.reply_to(message, phrase)
            
        if user_id != shift.main_id:
            main_username = shift.main_username
            phrase = random.choice(soviet_phrases.get("system_messages", {}).get('only_for_main_user', ["–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –≥–ª–∞–≤–Ω—ã–π –Ω–∞ —Å–º–µ–Ω–µ: {main_username}."]))
            return bot.reply_to(message, phrase.format(main_username=main_username))
            
        main_user_data = shift.users.get(shift.main_id)
        if not main_user_data:
            return bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω–µ.")

        shift_goal = shift.shift_goal
        plan_percent = (main_user_data.count / shift_goal * 100) if shift_goal > 0 else 0
        report_lines = [
            f"üìã *–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –≤–∞—Å* ({datetime.datetime.now(pytz.timezone('Europe/Moscow')).strftime('%H:%M')})",
            f"üó£Ô∏è **–ì–æ–ª–æ—Å–æ–≤—ã—Ö:** {main_user_data.count} –∏–∑ {shift_goal} ({plan_percent:.0f}%)",
            f"‚òï **–ü–µ—Ä–µ—Ä—ã–≤–æ–≤:** {main_user_data.breaks_count}",
            f"‚è≥ **–û–ø–æ–∑–¥–∞–Ω–∏–π —Å –ø–µ—Ä–µ—Ä—ã–≤–∞:** {main_user_data.late_returns}"
        ]
        ad_counts = Counter(main_user_data.recognized_ads)
        if ad_counts:
            report_lines.append("\n**üìù –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:**")
            for ad, count in ad_counts.items():
                report_lines.append(f"‚úîÔ∏è {ad} (x{count})")
        bot.reply_to(message, "\n".join(report_lines), parse_mode="Markdown")

    @bot.message_handler(commands=['—Å–≤–æ–¥–∫–∞'])
    def my_total_stats(message: types.Message):
        if not pd: return bot.reply_to(message, "–ú–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö (pandas) –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        
        user_id = message.from_user.id
        username = get_username(message.from_user)
        bot.reply_to(message, f"üìä –°–æ–±–∏—Ä–∞—é –≤–∞—à—É –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã, {username}. –ú–∏–Ω—É—Ç–∫—É...")
        
        worksheet = get_sheet()
        if not worksheet: return bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google –¢–∞–±–ª–∏—Ü–µ.")
        
        try:
            df = pd.DataFrame(worksheet.get_all_records())
            if df.empty or 'ID –í–µ–¥—É—â–µ–≥–æ' not in df.columns: return bot.send_message(message.chat.id, "–í —Ç–∞–±–ª–∏—Ü–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            
            df['ID –í–µ–¥—É—â–µ–≥–æ'] = pd.to_numeric(df['ID –í–µ–¥—É—â–µ–≥–æ'], errors='coerce')
            user_df = df[df['ID –í–µ–¥—É—â–µ–≥–æ'] == user_id].copy()
            
            if user_df.empty: return bot.send_message(message.chat.id, f"{username}, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞—à–∏—Ö —Å–º–µ–Ω –≤ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
            
            numeric_cols = ['–ì–æ–ª–æ—Å–æ–≤—ã—Ö (—à—Ç)', '–ü–µ—Ä–µ—Ä—ã–≤–æ–≤ (—à—Ç)', '–û–ø–æ–∑–¥–∞–Ω–∏–π (—à—Ç)']
            for col in numeric_cols: 
                user_df[col] = pd.to_numeric(user_df[col], errors='coerce').fillna(0)

            total_shifts = len(user_df)
            total_voices = user_df['–ì–æ–ª–æ—Å–æ–≤—ã—Ö (—à—Ç)'].sum()
            total_breaks = user_df['–ü–µ—Ä–µ—Ä—ã–≤–æ–≤ (—à—Ç)'].sum()
            total_lates = user_df['–û–ø–æ–∑–¥–∞–Ω–∏–π (—à—Ç)'].sum()
            
            report_text = (
                f"‚≠êÔ∏è **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {username}** ‚≠êÔ∏è\n\n"
                f"üëë **–í—Å–µ–≥–æ —Å–º–µ–Ω –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ:** {total_shifts}\n"
                f"üó£Ô∏è **–í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞–ø–∏—Å–∞–Ω–æ:** {int(total_voices)}\n"
                f"‚òïÔ∏è **–í—Å–µ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤:** {int(total_breaks)}\n"
                f"‚è≥ **–í—Å–µ–≥–æ –æ–ø–æ–∑–¥–∞–Ω–∏–π —Å –ø–µ—Ä–µ—Ä—ã–≤–∞:** {int(total_lates)}"
            )
            bot.send_message(message.chat.id, report_text, parse_mode="Markdown")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Google Sheets –¥–ª—è /—Å–≤–æ–¥–∫–∞: {e}")
            phrase = random.choice(soviet_phrases.get("system_messages", {}).get('generic_error', ["–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã."]))
            bot.send_message(message.chat.id, phrase)

    @bot.message_handler(commands=['help'])
    def handle_help(message: types.Message):
        help_text_lines = [
            "üìò **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–µ–¥—É—â–µ–≥–æ:**\n",
            "`/start` –∏–ª–∏ `/—Å—Ç–∞—Ä—Ç`",
            "–ó–∞–Ω—è—Ç—å —Å–º–µ–Ω—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å–≤–æ–±–æ–¥–Ω–∞.\n",
            "`/–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π` –∏–ª–∏ `/check`",
            "–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –ª–∏—á–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω–µ.\n",
            "`/—Å–≤–æ–¥–∫–∞`",
            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è.\n",
            "`/–ø–µ—Ä–µ–¥–∞—Ç—å`",
            "–ü–µ—Ä–µ–¥–∞—Ç—å —Å–º–µ–Ω—É –¥—Ä—É–≥–æ–º—É (–Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ).\n",
            "‚òïÔ∏è –î–ª—è –ø–µ—Ä–µ—Ä—ã–≤–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç `–ø–µ—Ä–µ—Ä—ã–≤`, `–æ–±–µ–¥` –∏–ª–∏ `–æ—Ç–¥—ã—Ö`.",
            "‚úÖ –î–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è ‚Äî `–≤–µ—Ä–Ω—É–ª—Å—è`, `–Ω–∞ –º–µ—Å—Ç–µ`."
        ]
        bot.reply_to(message, "\n".join(help_text_lines), parse_mode="Markdown")
