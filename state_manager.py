# state_manager.py
import json
import logging
import os
import shutil
import copy
from dataclasses import asdict

from state import data_lock
from database import db  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

CHAT_DATA_FILE = 'data/chat_data.json'
USER_HISTORY_FILE = 'data/user_history.json'

# –î–û–ë–ê–í–õ–ï–ù–û: –ö–ª–∞—Å—Å-–∫–æ–¥–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è dataclasses –≤ JSON
class EnhancedJSONEncoder(json.JSONEncoder):
    def default(self, o):
        if hasattr(o, '__dataclass_fields__'):
            return asdict(o)
        return super().default(o)

def save_state(bot, chat_data: dict, user_history: dict):
    """
    –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ JSON-—Ñ–∞–π–ª—ã –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """
    logging.info("–ù–∞—á–∏–Ω–∞—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞...")
    
    os.makedirs(os.path.dirname(CHAT_DATA_FILE), exist_ok=True)
    
    with data_lock:
        chat_data_copy = copy.deepcopy(chat_data)
        user_history_copy = copy.deepcopy(user_history)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        for chat_id, shift_data in chat_data_copy.items():
            if shift_data and hasattr(shift_data, 'main_id'):
                db.save_shift_data(chat_id, shift_data)
        logging.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª—ã (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    states_to_save = {
        'chat_data': (chat_data_copy, CHAT_DATA_FILE),
        'user_history': (user_history_copy, USER_HISTORY_FILE)
    }
    
    for state_name, (data_to_save, filepath) in states_to_save.items():
        backup_filepath = filepath + ".bak"
        try:
            if os.path.exists(filepath):
                shutil.copyfile(filepath, backup_filepath)

            temp_filepath = filepath + ".tmp"
            with open(temp_filepath, 'w', encoding='utf-8') as f:
                # –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–¥–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø—Ä—è–º—É—é –∑–¥–µ—Å—å
                json.dump(data_to_save, f, indent=4, ensure_ascii=False, cls=EnhancedJSONEncoder)
            
            os.replace(temp_filepath, filepath)

            if os.path.exists(backup_filepath):
                os.remove(backup_filepath)

        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filepath}: {e}", exc_info=True)
            if os.path.exists(backup_filepath):
                logging.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ {filepath} –∏–∑ –±—ç–∫–∞–ø–∞...")
                try:
                    shutil.move(backup_filepath, filepath)
                except Exception as restore_e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—ç–∫–∞–ø –¥–ª—è {filepath}: {restore_e}")
                    from config import BOSS_ID
                    if BOSS_ID:
                        try:
                            bot.send_message(BOSS_ID, f"üö® **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!**\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ `{state_name}`. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –¥–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ!")
                        except Exception as send_e:
                            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ BOSS_ID: {send_e}")

def load_state() -> tuple[dict, dict]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ JSON-—Ñ–∞–π–ª–æ–≤, —Å –ø–æ–ø—ã—Ç–∫–æ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –±—ç–∫–∞–ø–∞.
    """
    logging.info("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞...")
    
    def _load_single_file(filepath):
        backup_filepath = filepath + ".bak"
        if not os.path.exists(filepath) and os.path.exists(backup_filepath):
            logging.warning(f"–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞.")
            shutil.copyfile(backup_filepath, filepath)

        if os.path.exists(filepath):
            try:
                with open(filepath, 'r', encoding='utf-8') as f:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ —Ñ–∞–π–ª
                    content = f.read()
                    if not content:
                        logging.warning(f"–§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è {filepath} –ø—É—Å—Ç–æ–π.")
                        return {}
                    data = json.loads(content)
                    return {int(k): v for k, v in data.items()}
            except (json.JSONDecodeError, TypeError) as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {filepath}: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é.")
                return {}
        return {}

    loaded_chat_data = _load_single_file(CHAT_DATA_FILE)
    loaded_user_history = _load_single_file(USER_HISTORY_FILE)
            
    return loaded_chat_data, loaded_user_history
