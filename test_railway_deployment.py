#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Railway –¥–µ–ø–ª–æ—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import os
import sys
import json
import datetime
import pytz
from unittest.mock import Mock

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_railway_environment():
    """–¢–µ—Å—Ç Railway –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    print("üîß –¢–ï–°–¢ RAILWAY –û–ö–†–£–ñ–ï–ù–ò–Ø")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ['BOT_TOKEN']
    missing_vars = []
    
    for var in required_vars:
        if not os.environ.get(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {missing_vars}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –≤ Railway Dashboard")
    else:
        print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º PORT –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (Railway —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    port = os.environ.get('PORT', '8080')
    print(f"üåê –ü–æ—Ä—Ç –¥–ª—è health check: {port}")
    
    # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –¥–ª—è Railway
    try:
        from flask import Flask
        print("‚úÖ Flask –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError:
        print("‚ùå Flask –Ω–µ –Ω–∞–π–¥–µ–Ω - –¥–æ–±–∞–≤—å—Ç–µ –≤ requirements.txt")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥—É–ª–∏
    try:
        import telebot
        import pytz
        import schedule
        print("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    
    return True

def test_scheduler_fixes():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
    print("\nüîß –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        from config import TIMEZONE_MAP
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º TIMEZONE_MAP
        if isinstance(list(TIMEZONE_MAP.values())[0], str):
            print("‚ùå TIMEZONE_MAP —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–æ pytz –æ–±—ä–µ–∫—Ç–æ–≤")
            return False
        else:
            print("‚úÖ TIMEZONE_MAP —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ pytz –æ–±—ä–µ–∫—Ç—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
        import pytz
        import datetime
        
        moscow_tz = pytz.timezone('Europe/Moscow')
        now = datetime.datetime.now(moscow_tz)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏ (–æ—Å–Ω–æ–≤–Ω–∞—è –Ω–∞—à–∞ —Ñ–∏–∫—Å–∞)
        target_hour = 7
        target_minute = 0
        
        # –õ–æ–≥–∏–∫–∞ –∏–∑ –Ω–∞—à–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è - –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
        current_time = now.time()
        target_time_start = datetime.time(target_hour, max(0, target_minute - 2))  # 6:58 –∏–ª–∏ 7:00
        target_time_end = datetime.time(target_hour, min(59, target_minute + 2))    # 7:02
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
        is_in_range = target_time_start <= current_time <= target_time_end
        print(f"‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç (—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
        return False

def test_health_check():
    """–¢–µ—Å—Ç health check endpoint."""
    print("\nüîß –¢–ï–°–¢ HEALTH CHECK")
    
    try:
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Flask app –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ main
        from flask import Flask
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        test_app = Flask(__name__)
        
        @test_app.route('/health')
        def health():
            return {"status": "healthy", "timestamp": "test"}
        
        with test_app.test_client() as client:
            response = client.get('/health')
            data = response.get_json()
            
            if response.status_code == 200 and data.get('status') == 'healthy':
                print("‚úÖ Health check –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return True
            else:
                print("‚ùå Health check –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ health check: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö RAILWAY –î–ï–ü–õ–û–Æ\n")
    
    tests = [
        test_railway_environment,
        test_scheduler_fixes,
        test_health_check
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç {test.__name__} —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {e}")
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –ì–û–¢–û–í –ö –î–ï–ü–õ–û–Æ –ù–ê RAILWAY")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_TOKEN –≤ Railway Dashboard")
        print("2. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫ Railway")
        print("3. –î–µ–ø–ª–æ–π –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ health check: https://your-app.railway.app/health")
        return True
    else:
        print("‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ - –ü–†–û–í–ï–†–¨–¢–ï –û–®–ò–ë–ö–ò –í–´–®–ï")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
