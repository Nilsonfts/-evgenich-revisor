#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã.
"""

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
        import config
        print("‚úÖ config.py - OK")
        
        import state
        print("‚úÖ state.py - OK")
        
        import utils
        print("‚úÖ utils.py - OK")
        
        import models
        print("‚úÖ models.py - OK")
        
        import database
        print("‚úÖ database.py - OK")
        
        # –•—ç–Ω–¥–ª–µ—Ä—ã
        from handlers import admin, user, shift, voice, wizards, callbacks
        print("‚úÖ handlers - OK")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        from models import UserData, ShiftData
        user_data = UserData(123, "test_user", "–∫–∞—Ä–∞–æ–∫–µ_–≤–µ–¥—É—â–∏–π")
        shift_data = ShiftData()
        print("‚úÖ –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö - OK")
        
        # –¢–µ—Å—Ç AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–µ–∫–ª–∞–º—ã
        from handlers.wizards import categorize_ad_text, AD_CATEGORIES
        category = categorize_ad_text("–£ –Ω–∞—Å —Å–∫–∏–¥–∫–∞ –Ω–∞ –∫–∞—Ä–∞–æ–∫–µ!")
        print(f"‚úÖ AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è: '{category}' - OK")
        
        print("\nüéâ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_concepts():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏."""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π...")
    try:
        from handlers.wizards import AVAILABLE_CONCEPTS
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π: {len(AVAILABLE_CONCEPTS)}")
        for concept_id, concept_data in AVAILABLE_CONCEPTS.items():
            print(f"  ‚Ä¢ {concept_data['name']}: {concept_data['description']}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π: {e}")
        return False

def test_ad_categories():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ–∫–ª–∞–º—ã."""
    print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–µ–∫–ª–∞–º—ã...")
    try:
        from handlers.wizards import AD_CATEGORIES, categorize_ad_text
        
        test_texts = [
            ("–£ –Ω–∞—Å —Å–∫–∏–¥–∫–∞ 50% –Ω–∞ –≤—Å–µ –±–ª—é–¥–∞!", "promo"),
            ("–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–µ—Ç—å –∫–∞—Ä–∞–æ–∫–µ —Å–µ–≥–æ–¥–Ω—è!", "karaoke"),
            ("–ù–æ–≤–æ–µ –º–µ–Ω—é —É–∂–µ –≤ –∑–∞–≤–µ–¥–µ–Ω–∏–∏", "menu"),
            ("–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ —Å—Ç–æ–ª–∏–∫ –Ω–∞ –≤–µ—á–µ—Ä", "booking"),
            ("–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –¥–æ 4 —É—Ç—Ä–∞", "general")
        ]
        
        for text, expected in test_texts:
            result = categorize_ad_text(text)
            status = "‚úÖ" if result == expected else "‚ö†Ô∏è"
            print(f"  {status} '{text}' ‚Üí {result}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    print("üß™ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    success = True
    success &= test_imports()
    success &= test_concepts() 
    success &= test_ad_categories()
    
    print("\n" + "=" * 50)
    if success:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
    else:
        print("‚ùå –ï–°–¢–¨ –û–®–ò–ë–ö–ò –í –°–ò–°–¢–ï–ú–ï")
        print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
