#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
"""
import datetime
import pytz
import json
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_timezone_configuration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤...")
    
    try:
        from config import TIMEZONE_MAP
        print(f"‚úÖ TIMEZONE_MAP –∑–∞–≥—Ä—É–∂–µ–Ω: {len(TIMEZONE_MAP)} —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –ü–µ—Ä–º—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–±—ã–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å 7 —É—Ç—Ä–∞)
        if "+2" in TIMEZONE_MAP:
            perm_tz = TIMEZONE_MAP["+2"]
            print(f"‚úÖ –ü–µ—Ä–º—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (+2): {perm_tz}")
            
            # –°–æ–∑–¥–∞–¥–∏–º –≤—Ä–µ–º—è 7:00 –ø–æ –ü–µ—Ä–º–∏
            moscow_tz = pytz.timezone('Europe/Moscow')
            now_moscow = datetime.datetime.now(moscow_tz)
            perm_time = now_moscow.astimezone(perm_tz)
            print(f"üìÖ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ: {now_moscow.strftime('%H:%M:%S')}")
            print(f"üìÖ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ü–µ—Ä–º–∏: {perm_time.strftime('%H:%M:%S')}")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º –ª–æ–≥–∏–∫—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ 7:00
            test_time = datetime.time(7, 0)
            current_time = perm_time.time()
            
            # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ (–¥–∏–∞–ø–∞–∑–æ–Ω)
            is_end_time_range = (
                test_time <= current_time <= 
                datetime.time((test_time.hour + 1) % 24, test_time.minute)
            )
            
            print(f"üï∞Ô∏è –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã: {test_time}")
            print(f"üï∞Ô∏è –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ü–µ—Ä–º—å): {current_time}")
            print(f"‚úÖ –ü–æ–ø–∞–¥–∞–µ—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è (7:00-8:00): {is_end_time_range}")
            
        else:
            print("‚ùå –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å +2 (–ü–µ—Ä–º—å) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ TIMEZONE_MAP")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤: {e}")
        return False
    
    return True

def test_time_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã...")
    
    try:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        test_cases = [
            ("06:59", False),  # –î–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            ("07:00", True),   # –¢–æ—á–Ω–æ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
            ("07:30", True),   # –í –ø—Ä–µ–¥–µ–ª–∞—Ö —á–∞—Å–∞ –ø–æ—Å–ª–µ
            ("07:59", True),   # –ü–æ—á—Ç–∏ —á–∞—Å –ø–æ—Å–ª–µ
            ("08:00", False),  # –ß–∞—Å –ø—Ä–æ—à–µ–ª
            ("08:01", False),  # –í—Ä–µ–º—è –ø—Ä–æ—à–ª–æ
        ]
        
        end_time = datetime.time(7, 0)
        
        for time_str, expected in test_cases:
            hour, minute = map(int, time_str.split(':'))
            current_time = datetime.time(hour, minute)
            
            # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            is_in_range = (
                end_time <= current_time < 
                datetime.time((end_time.hour + 1) % 24, end_time.minute)
            )
            
            status = "‚úÖ" if is_in_range == expected else "‚ùå"
            print(f"{status} {time_str}: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected}, –ø–æ–ª—É—á–µ–Ω–æ {is_in_range}")
        
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–æ–≥–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return False

def test_chat_configs():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —á–∞—Ç–æ–≤."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —á–∞—Ç–æ–≤...")
    
    try:
        if os.path.exists('chat_configs.json'):
            with open('chat_configs.json', 'r', encoding='utf-8') as f:
                chat_configs = json.load(f)
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(chat_configs)} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —á–∞—Ç–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
            for chat_id, config in chat_configs.items():
                required_fields = ['end_time', 'timezone_offset', 'city']
                missing_fields = [field for field in required_fields if field not in config]
                
                if missing_fields:
                    print(f"‚ö†Ô∏è –ß–∞—Ç {chat_id} ({config.get('city', 'N/A')}): –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è {missing_fields}")
                else:
                    print(f"‚úÖ –ß–∞—Ç {chat_id} ({config.get('city', 'N/A')}): –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            
            return True
        else:
            print("‚ùå –§–∞–π–ª chat_configs.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —á–∞—Ç–æ–≤: {e}")
        return False

def test_scheduler_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
    
    try:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é check_for_shift_end
        from config import TIMEZONE_MAP
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_chat_config = {
            'end_time': '07:00',
            'timezone_offset': '+2',
            'city': '–ü–µ—Ä–º—å'
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        timezone_offset = test_chat_config.get('timezone_offset', '+0')
        if timezone_offset in TIMEZONE_MAP:
            target_tz = TIMEZONE_MAP[timezone_offset]
            current_time = datetime.datetime.now(target_tz)
            
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
            end_time_str = test_chat_config.get('end_time', '07:00')
            end_hour, end_minute = map(int, end_time_str.split(':'))
            end_time = datetime.time(end_hour, end_minute)
            
            current_time_only = current_time.time()
            
            # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            is_end_time = (
                end_time <= current_time_only < 
                datetime.time((end_time.hour + 1) % 24, end_time.minute)
            )
            
            print(f"üèôÔ∏è –ì–æ—Ä–æ–¥: {test_chat_config['city']}")
            print(f"üï∞Ô∏è –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_time}")
            print(f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone_offset} ({target_tz})")
            print(f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time.strftime('%H:%M:%S')}")
            print(f"‚úÖ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã: {is_end_time}")
            
            return True
        else:
            print(f"‚ùå –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å {timezone_offset} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞\n")
    
    tests = [
        test_timezone_configuration,
        test_time_logic,
        test_chat_configs,
        test_scheduler_logic
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞.")
    
    return passed == total

if __name__ == "__main__":
    main()
