# scheduler.py (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ò –°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)
import schedule
import time
import logging
import datetime
import pytz
import random

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ
from state import chat_data, user_history, chat_configs
from config import (
    VOICE_TIMEOUT_MINUTES, BREAK_DURATION_MINUTES, GOOGLE_SHEET_LINK_TEXT,
    GOOGLE_SHEET_LINK_URL, ADMIN_REPORT_CHAT_ID, soviet_phrases, EXPECTED_VOICES_PER_SHIFT
)
from utils import get_chat_title, generate_detailed_report, init_shift_data
from g_sheets import append_shift_to_google_sheet
from state_manager import save_state

def generate_analytical_summary(user_data: dict, shift_goal: int) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ —Ä–∞–±–æ—Ç–µ –≤–µ–¥—É—â–µ–≥–æ."""
    plan_percent = (user_data.get('count', 0) / shift_goal * 100) if shift_goal > 0 else 0
    lates = user_data.get('late_returns', 0)
    
    # –ë–µ—Ä–µ–º —Ç–∞–π–º–∞—É—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ —á–∞—Ç–∞ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    chat_timeout = chat_configs.get(str(user_data.get('chat_id')), {}).get('voice_timeout', VOICE_TIMEOUT_MINUTES)
    has_long_pauses = any(delta > chat_timeout * 1.5 for delta in user_data.get('voice_deltas', []))

    if plan_percent < 50:
        return f"‚ùóÔ∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ ({plan_percent:.0f}%). –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–∞—è –±–µ—Å–µ–¥–∞."
    if plan_percent < 80 and lates > 0:
        return f"‚ùóÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü–ª–∞–Ω –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω ({plan_percent:.0f}%) –∏ –µ—Å—Ç—å –æ–ø–æ–∑–¥–∞–Ω–∏—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–∑—è—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å."
    if plan_percent < 90:
        return f"‚ö†Ô∏è –ü–ª–∞–Ω –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω ({plan_percent:.0f}%). –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã—è—Å–Ω–∏—Ç—å –ø—Ä–∏—á–∏–Ω—ã."
    if lates > 0:
        return f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–æ–π. –ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ {lates} –æ–ø–æ–∑–¥–∞–Ω–∏–µ(–π). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –±–µ—Å–µ–¥—É."
    if has_long_pauses:
        return f"‚úÖ –•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞, –Ω–æ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏–µ. –ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω, –æ–¥–Ω–∞–∫–æ –±—ã–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –ø–∞—É–∑—ã. –°—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ä–∏—Ç–º–∏—á–Ω–æ—Å—Ç—å."
    
    return "‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ. –ú–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –≤ –ø—Ä–∏–º–µ—Ä."

def send_end_of_shift_report_for_chat(bot, chat_id: int):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å–º–µ–Ω–µ, –∑–∞—Ç–µ–º —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ."""
    logging.info(f"–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã –¥–ª—è —á–∞—Ç–∞ {chat_id}...")
    data = chat_data.get(chat_id)
    if not data or not data.get('main_id'):
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É –≤ —á–∞—Ç–µ {chat_id}, –Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã –Ω–µ—Ç.")
        return

    main_user_data = data.get('users', {}).get(data.get('main_id'))
    if not main_user_data:
        logging.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–µ–¥—É—â–µ–º—É –≤ —á–∞—Ç–µ {chat_id}")
        return

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º chat_id –≤ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        main_user_data['chat_id'] = chat_id
        shift_goal = data.get('shift_goal', EXPECTED_VOICES_PER_SHIFT)
        analytical_conclusion = generate_analytical_summary(main_user_data, shift_goal)
        
        # –®–∞–≥ 1: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
        append_shift_to_google_sheet(bot, chat_id, data, analytical_conclusion)
        
        # –®–∞–≥ 2: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞
        report_lines = generate_detailed_report(chat_id, data)
        final_report_text = "\n".join(report_lines)
        final_report_with_recommendation = final_report_text + f"\n\n---\nüß† **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:**\n_{analytical_conclusion}_"
        
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –æ–¥–∏–Ω —Ä–∞–∑
        link_markdown = f"[{GOOGLE_SHEET_LINK_TEXT}]({GOOGLE_SHEET_LINK_URL})" if GOOGLE_SHEET_LINK_URL else ""

        # –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –∏ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        main_report_text = f"üèÅ –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n{final_report_with_recommendation}\n\n{link_markdown}"
        bot.send_message(chat_id, main_report_text, parse_mode="Markdown", disable_web_page_preview=True)

        # –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ —á–∞—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
        if ADMIN_REPORT_CHAT_ID and str(chat_id) != str(ADMIN_REPORT_CHAT_ID):
            admin_report_header = f"üìç *–û—Ç—á–µ—Ç –∏–∑ —á–∞—Ç–∞: {get_chat_title(bot, chat_id)}*\n"
            admin_report = f"{admin_report_header}{final_report_with_recommendation}\n\n{link_markdown}"
            # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
            bot.send_message(ADMIN_REPORT_CHAT_ID, admin_report, parse_mode="Markdown", disable_web_page_preview=True)
    
        logging.info(f"–î–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã –¥–ª—è —á–∞—Ç–∞ {chat_id} –±—É–¥—É—Ç —Å–±—Ä–æ—à–µ–Ω—ã.")
        init_shift_data(chat_id) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–±—Ä–æ—Å–∞
        
        chat_data[chat_id]['last_report_date'] = datetime.date.today().isoformat()
        
    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}", exc_info=True)
        bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞. –î–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")


def check_user_activity(bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    now_moscow = datetime.datetime.now(pytz.timezone('Europe/Moscow'))
    for chat_id, data in list(chat_data.items()):
        if not data.get('main_id'):
            continue

        main_id = data['main_id']
        user_data = data.get('users', {}).get(main_id)
        if not user_data:
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö, –∫—Ç–æ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ
        if user_data.get('on_break'):
            break_start_time_str = user_data.get('break_start_time')
            if break_start_time_str:
                break_start_time = datetime.datetime.fromisoformat(break_start_time_str)
                if (now_moscow - break_start_time).total_seconds() / 60 > BREAK_DURATION_MINUTES:
                    last_reminder_str = user_data.get('last_break_reminder_time')
                    if not last_reminder_str or (now_moscow - datetime.datetime.fromisoformat(last_reminder_str)).total_seconds() > 120:
                        try:
                            phrase = random.choice(soviet_phrases.get('return_demand_hard', ['–ü–æ—Ä–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–±–æ—Ç–µ!']))
                            bot.send_message(chat_id, f"@{user_data['username']}, {phrase}")
                            user_data['last_break_reminder_time'] = now_moscow.isoformat()
                        except Exception as e:
                            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–µ—Ä–µ—Ä—ã–≤–µ –≤ —á–∞—Ç {chat_id}: {e}")
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤ —ç—Ñ–∏—Ä–µ
        last_voice_time_str = user_data.get('last_voice_time')
        if last_voice_time_str:
            last_voice_time = datetime.datetime.fromisoformat(last_voice_time_str)
            inactive_minutes = (now_moscow - last_voice_time).total_seconds() / 60
            
            chat_timeout = chat_configs.get(str(chat_id), {}).get('voice_timeout', VOICE_TIMEOUT_MINUTES)

            if inactive_minutes > chat_timeout:
                last_reminder_str = user_data.get('last_activity_reminder_time')
                
                should_remind = not last_reminder_str or \
                                (now_moscow - datetime.datetime.fromisoformat(last_reminder_str)).total_seconds() > 180

                if should_remind:
                    try:
                        phrase = random.choice(soviet_phrases.get('pace_reminder', ['–í—ã –¥–∞–≤–Ω–æ –Ω–µ –≤—ã—Ö–æ–¥–∏–ª–∏ –≤ —ç—Ñ–∏—Ä.']))
                        bot.send_message(chat_id, f"@{user_data['username']}, {phrase} (—Ç–∏—à–∏–Ω–∞ —É–∂–µ {int(inactive_minutes)} –º–∏–Ω.)")
                        user_data['last_activity_reminder_time'] = now_moscow.isoformat()
                    except Exception as e:
                        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ì–° –≤ —á–∞—Ç {chat_id}: {e}")

def check_for_shift_end(bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ª–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã –¥–ª—è –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ —á–∞—Ç–∞."""
    for chat_id, config in list(chat_configs.items()):
        tz_name = config.get('timezone', 'Europe/Moscow')
        end_time_str = config.get('end_time')
        if not end_time_str:
            continue
        
        try:
            local_tz = pytz.timezone(tz_name)
            now_local = datetime.datetime.now(local_tz)
            
            if now_local.strftime('%H:%M') == end_time_str:
                if chat_data.get(chat_id, {}).get('main_id'):
                    last_report_date_str = chat_data[chat_id].get('last_report_date')
                    
                    if not last_report_date_str or last_report_date_str != now_local.date().isoformat():
                        logging.info(f"–ù–∞—Å—Ç—É–ø–∏–ª–æ –≤—Ä–µ–º—è ({end_time_str}) –¥–ª—è –æ—Ç—á–µ—Ç–∞ –≤ —á–∞—Ç–µ {chat_id} (–¢–ó: {tz_name}).")
                        send_end_of_shift_report_for_chat(bot, chat_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ check_for_shift_end –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}", exc_info=True)

def run_scheduler(bot):
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    schedule.every(1).minutes.do(check_for_shift_end, bot=bot)
    schedule.every(1).minutes.do(check_user_activity, bot=bot)
    schedule.every(5).minutes.do(save_state, chat_data=chat_data, user_history=user_history)
    
    logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω. –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ.")
    while True:
        try:
            schedule.run_pending()
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        time.sleep(1)
