# scheduler.py
import schedule
import time
import logging
import datetime
import pytz
import random

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∏–∑ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from state import chat_data, user_history, chat_configs
from config import (
    VOICE_TIMEOUT_MINUTES, BREAK_DURATION_MINUTES, GOOGLE_SHEET_LINK_TEXT,
    GOOGLE_SHEET_LINK_URL, ADMIN_REPORT_CHAT_ID, soviet_phrases, EXPECTED_VOICES_PER_SHIFT
)
from utils import get_chat_title, generate_detailed_report
from g_sheets import append_shift_to_google_sheet

def generate_analytical_summary(user_data: dict, shift_goal: int) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ —Ä–∞–±–æ—Ç–µ –≤–µ–¥—É—â–µ–≥–æ."""
    plan_percent = (user_data.get('count', 0) / shift_goal * 100) if shift_goal > 0 else 0
    lates = user_data.get('late_returns', 0)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –ø–∞—É–∑—ã –¥–æ–ª—å—à–µ –ø–æ–ª—É—Ç–æ—Ä–Ω–æ–≥–æ —Ç–∞–π–º–∞—É—Ç–∞
    has_long_pauses = any(delta > VOICE_TIMEOUT_MINUTES * 1.5 for delta in user_data.get('voice_deltas', []))

    if plan_percent < 50:
        return f"‚ùóÔ∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ ({plan_percent:.0f}%). –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–∞—è –±–µ—Å–µ–¥–∞."
    if plan_percent < 80 and lates > 0:
        return f"‚ùóÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü–ª–∞–Ω –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω ({plan_percent:.0f}%) –∏ –µ—Å—Ç—å –æ–ø–æ–∑–¥–∞–Ω–∏—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–∑—è—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å."
    if plan_percent < 90:
        return f"‚ö†Ô∏è –ü–ª–∞–Ω –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω ({plan_percent:.0f}%). –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã—è—Å–Ω–∏—Ç—å –ø—Ä–∏—á–∏–Ω—ã."
    if lates > 0:
        return f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–æ–π. –ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ {lates} –æ–ø–æ–∑–¥–∞–Ω–∏–µ(–π). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –±–µ—Å–µ–¥—É."
    if has_long_pauses:
        return f"‚úÖ –•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞, –Ω–æ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏–µ. –ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω, –æ–¥–Ω–∞–∫–æ –±—ã–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –ø–∞—É–∑—ã. –°—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ä–∏—Ç–º–∏—á–Ω–æ—Å—Ç—å."
    
    return "‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ. –ú–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –≤ –ø—Ä–∏–º–µ—Ä."

def send_end_of_shift_report_for_chat(bot, chat_id: int):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å–º–µ–Ω–µ, –∑–∞—Ç–µ–º –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ."""
    logging.info(f"–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã –¥–ª—è —á–∞—Ç–∞ {chat_id}...")
    data = chat_data.get(chat_id)
    if not data or not data.get('main_id'):
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É –≤ —á–∞—Ç–µ {chat_id}, –Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã –Ω–µ—Ç.")
        return

    main_user_data = data.get('users', {}).get(data.get('main_id'))
    if not main_user_data:
        logging.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–µ–¥—É—â–µ–º—É –≤ —á–∞—Ç–µ {chat_id}")
        return

    shift_goal = data.get('shift_goal', EXPECTED_VOICES_PER_SHIFT)
    analytical_conclusion = generate_analytical_summary(main_user_data, shift_goal)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google –¢–∞–±–ª–∏—Ü—É
    append_shift_to_google_sheet(bot, chat_id, data, analytical_conclusion)
    
    report_lines = generate_detailed_report(chat_id, data)
    final_report_text = "\n".join(report_lines)
    
    final_report_with_recommendation = final_report_text + f"\n\n---\nüß† **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:**\n_{analytical_conclusion}_"
    
    try:
        bot.send_message(chat_id, final_report_with_recommendation)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç {chat_id}: {e}")

    if ADMIN_REPORT_CHAT_ID and chat_id != ADMIN_REPORT_CHAT_ID:
        try:
            link_markdown = f"[{GOOGLE_SHEET_LINK_TEXT}]({GOOGLE_SHEET_LINK_URL})" if GOOGLE_SHEET_LINK_URL else ""
            admin_report_header = f"üìç *–û—Ç—á–µ—Ç –∏–∑ —á–∞—Ç–∞: {get_chat_title(bot, chat_id)}*\n"
            admin_report = f"{admin_report_header}{final_report_with_recommendation}\n\n{link_markdown}"
            bot.send_message(ADMIN_REPORT_CHAT_ID, admin_report)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —á–∞—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞: {e}")
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞
    if chat_id in user_history:
        del user_history[chat_id]
    if chat_id in chat_data:
        del chat_data[chat_id]
    logging.info(f"–î–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã –¥–ª—è —á–∞—Ç–∞ {chat_id} –æ—á–∏—â–µ–Ω—ã.")

def check_user_activity(bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    now_moscow = datetime.datetime.now(pytz.timezone('Europe/Moscow'))
    for chat_id, data in list(chat_data.items()):
        if not data.get('main_id'):
            continue

        main_id = data['main_id']
        user_data = data.get('users', {}).get(main_id)
        if not user_data:
            continue

        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞—Ç—è–Ω—É–≤—à–µ–º—Å—è –ø–µ—Ä–µ—Ä—ã–≤–µ
        if user_data.get('on_break'):
            break_start_time = user_data.get('break_start_time')
            if break_start_time and (now_moscow - break_start_time).total_seconds() / 60 > BREAK_DURATION_MINUTES:
                last_reminder = user_data.get('last_break_reminder_time')
                if not last_reminder or (now_moscow - last_reminder).total_seconds() > 120: # –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–µ —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ 2 –º–∏–Ω—É—Ç—ã
                    try:
                        bot.send_message(chat_id, f"@{user_data['username']}, {random.choice(soviet_phrases.get('return_demand', ['–ü–æ—Ä–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–±–æ—Ç–µ!']))}")
                        user_data['last_break_reminder_time'] = now_moscow
                    except Exception as e:
                        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–µ—Ä–µ—Ä—ã–≤–µ –≤ —á–∞—Ç {chat_id}: {e}")
            continue

        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–æ–ª–≥–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ì–°
        last_voice_time = user_data.get('last_voice_time')
        if last_voice_time:
            inactive_minutes = (now_moscow - last_voice_time).total_seconds() / 60
            if inactive_minutes > VOICE_TIMEOUT_MINUTES and not user_data.get('voice_timeout_reminder_sent'):
                try:
                    bot.send_message(chat_id, f"@{user_data['username']}, {random.choice(soviet_phrases.get('voice_reminder', ['–í—ã –¥–∞–≤–Ω–æ –Ω–µ –≤—ã—Ö–æ–¥–∏–ª–∏ –≤ —ç—Ñ–∏—Ä.']))}")
                    user_data['voice_timeout_reminder_sent'] = True
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ì–° –≤ —á–∞—Ç {chat_id}: {e}")

def check_for_shift_end(bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ª–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã –¥–ª—è –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ —á–∞—Ç–∞."""
    for chat_id, config in list(chat_configs.items()):
        tz_name = config.get('timezone', 'Europe/Moscow')
        end_time_str = config.get('end_time')
        if not end_time_str:
            continue
        
        try:
            local_tz = pytz.timezone(tz_name)
            now_local = datetime.datetime.now(local_tz)
            end_time_obj = datetime.datetime.strptime(end_time_str, '%H:%M').time()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ü–∞ —Å–º–µ–Ω—ã
            report_time_obj = (datetime.datetime.combine(now_local.date(), end_time_obj) + datetime.timedelta(minutes=1)).time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞
            if chat_data.get(chat_id, {}).get('main_id'):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏ –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è
                if now_local.time().strftime('%H:%M') == report_time_obj.strftime('%H:%M'):
                    last_report_date = chat_data[chat_id].get('last_report_date')
                    if last_report_date != now_local.date():
                        logging.info(f"–ù–∞—Å—Ç—É–ø–∏–ª–æ –≤—Ä–µ–º—è ({report_time_obj.strftime('%H:%M')}) –¥–ª—è –æ—Ç—á–µ—Ç–∞ –≤ —á–∞—Ç–µ {chat_id} (–¢–ó: {tz_name}).")
                        send_end_of_shift_report_for_chat(bot, chat_id)
                        # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                        if chat_id in chat_data:
                            chat_data[chat_id]['last_report_date'] = now_local.date()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ check_for_shift_end –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")


def run_scheduler(bot):
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    schedule.every(1).minutes.do(check_for_shift_end, bot=bot)
    schedule.every(1).minutes.do(check_user_activity, bot=bot)
    
    logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω.")
    while True:
        try:
            schedule.run_pending()
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        time.sleep(1)
