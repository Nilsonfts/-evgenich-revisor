# scheduler.py
import schedule
import time
import logging
import datetime
import pytz
import random

from state import chat_data, user_history, chat_configs, data_lock
from config import (
    VOICE_TIMEOUT_MINUTES, BREAK_DURATION_MINUTES, GOOGLE_SHEET_LINK_TEXT,
    GOOGLE_SHEET_LINK_URL, ADMIN_REPORT_CHAT_ID, soviet_phrases, EXPECTED_VOICES_PER_SHIFT
)
from utils import get_chat_title, generate_detailed_report, init_shift_data
from g_sheets import append_shift_to_google_sheet
from state_manager import save_state
from models import UserData
from database import db  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

def format_username(username: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç username –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º @ —Å–∏–º–≤–æ–ª–æ–º."""
    if not username:
        return username
    # –ï—Å–ª–∏ —É–∂–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º @
    return username if username.startswith('@') else f"@{username}"

# --- –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def generate_analytical_summary(user_data: UserData, shift_goal: int, chat_id: int) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ —Ä–∞–±–æ—Ç–µ –≤–µ–¥—É—â–µ–≥–æ."""
    if shift_goal > 0:
        plan_percent = (user_data.count / shift_goal * 100)
    else:
        plan_percent = 100 # –ï—Å–ª–∏ –ø–ª–∞–Ω 0, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º

    lates = user_data.late_returns
    chat_timeout = chat_configs.get(str(chat_id), {}).get('voice_timeout', VOICE_TIMEOUT_MINUTES)
    has_long_pauses = any(delta > chat_timeout * 1.5 for delta in user_data.voice_deltas)

    if plan_percent < 50:
        return f"‚ùóÔ∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ ({plan_percent:.0f}%). –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–∞—è –±–µ—Å–µ–¥–∞."
    if plan_percent < 80 and lates > 0:
        return f"‚ùóÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü–ª–∞–Ω –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω ({plan_percent:.0f}%) –∏ –µ—Å—Ç—å –æ–ø–æ–∑–¥–∞–Ω–∏—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–∑—è—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å."
    if plan_percent < 90:
        return f"‚ö†Ô∏è –ü–ª–∞–Ω –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω ({plan_percent:.0f}%). –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã—è—Å–Ω–∏—Ç—å –ø—Ä–∏—á–∏–Ω—ã."
    if lates > 0:
        return f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–æ–π. –ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ {lates} –æ–ø–æ–∑–¥–∞–Ω–∏–µ(–π). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –±–µ—Å–µ–¥—É."
    if has_long_pauses:
        return f"‚úÖ –•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞, –Ω–æ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏–µ. –ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω, –æ–¥–Ω–∞–∫–æ –±—ã–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –ø–∞—É–∑—ã. –°—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ä–∏—Ç–º–∏—á–Ω–æ—Å—Ç—å."
    
    return "‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ. –ú–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –≤ –ø—Ä–∏–º–µ—Ä."

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ---

def send_end_of_shift_report_for_chat(bot, chat_id: int):
    """–ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç, –∑–∞—Ç–µ–º —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ."""
    logging.info(f"–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã –¥–ª—è —á–∞—Ç–∞ {chat_id}...")
    
    with data_lock:
        shift_data = chat_data.get(chat_id)
        if not shift_data or not shift_data.main_id:
            logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É –≤ —á–∞—Ç–µ {chat_id}, –Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã –Ω–µ—Ç.")
            return

        main_user_data = shift_data.users.get(shift_data.main_id)
        if not main_user_data:
            logging.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–µ–¥—É—â–µ–º—É –≤ —á–∞—Ç–µ {chat_id}")
            return
            
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤–Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        shift_data_copy = shift_data
        
    # –í—Å–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç —Å –∫–æ–ø–∏–µ–π –¥–∞–Ω–Ω—ã—Ö
    try:
        shift_goal = shift_data_copy.shift_goal
        analytical_conclusion = generate_analytical_summary(main_user_data, shift_goal, chat_id)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logging.info(f"–ù–∞—á–∏–Ω–∞—é —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}. –í–µ–¥—É—â–∏–π: {main_user_data.username}, –ì–°: {main_user_data.count}/{shift_goal}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google –¢–∞–±–ª–∏—Ü—ã
        try:
            append_shift_to_google_sheet(bot, chat_id, shift_data_copy, analytical_conclusion)
            logging.info(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü—ã –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        except Exception as sheets_error:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Google –¢–∞–±–ª–∏—Ü—ã –¥–ª—è —á–∞—Ç–∞ {chat_id}: {sheets_error}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ—Ç—á–µ—Ç –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        
        report_lines = generate_detailed_report(chat_id, shift_data_copy)
        if not report_lines:
            raise ValueError("generate_detailed_report –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
            
        final_report_text = "\n".join(report_lines)
        final_report_with_recommendation = final_report_text + f"\n\n---\nüß† **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:**\n_{analytical_conclusion}_"
        
        link_markdown = f"[{GOOGLE_SHEET_LINK_TEXT}]({GOOGLE_SHEET_LINK_URL})" if GOOGLE_SHEET_LINK_URL else ""
        main_report_text = f"üèÅ –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n{final_report_with_recommendation}\n\n{link_markdown}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç
        try:
            bot.send_message(chat_id, main_report_text, parse_mode="Markdown", disable_web_page_preview=True)
            logging.info(f"–û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
        except Exception as main_send_error:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —á–∞—Ç {chat_id}: {main_send_error}")
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            try:
                simple_report = f"üèÅ –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–í–µ–¥—É—â–∏–π: {main_user_data.username}\n–ì–æ–ª–æ—Å–æ–≤—ã—Ö: {main_user_data.count}/{shift_goal}"
                bot.send_message(chat_id, simple_report)
                logging.info(f"–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
            except Exception as simple_send_error:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —á–∞—Ç {chat_id}: {simple_send_error}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if ADMIN_REPORT_CHAT_ID and str(chat_id) != str(ADMIN_REPORT_CHAT_ID):
            try:
                admin_report_header = f"üìç *–û—Ç—á–µ—Ç –∏–∑ —á–∞—Ç–∞: {get_chat_title(bot, chat_id)}*\n"
                admin_report = f"{admin_report_header}{final_report_with_recommendation}\n\n{link_markdown}"
                bot.send_message(ADMIN_REPORT_CHAT_ID, admin_report, parse_mode="Markdown", disable_web_page_preview=True)
                logging.info(f"–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            except Exception as admin_send_error:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —á–∞—Ç–∞ {chat_id}: {admin_send_error}")
    
        logging.info(f"–î–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã –¥–ª—è —á–∞—Ç–∞ {chat_id} –±—É–¥—É—Ç —Å–±—Ä–æ—à–µ–Ω—ã.")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞ –î–û —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω—ã
        with data_lock:
            today_date = datetime.datetime.now(pytz.timezone('Europe/Moscow')).date().isoformat()
            if chat_id in chat_data:
                chat_data[chat_id].last_report_date = today_date
                logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {today_date}")
            
            # –¢–µ–ø–µ—Ä—å —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞
            last_report_date = chat_data[chat_id].last_report_date if chat_id in chat_data else today_date
            init_shift_data(chat_id)
            if chat_id in chat_data:
                chat_data[chat_id].last_report_date = last_report_date
        
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}", exc_info=True)
        try:
            bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞. –î–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        except Exception as report_err:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —á–∞—Ç {chat_id}: {report_err}")


def check_user_activity(bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    now_moscow = datetime.datetime.now(pytz.timezone('Europe/Moscow'))
    
    with data_lock:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è
        active_shifts = list(chat_data.items())

    for chat_id, shift_data in active_shifts:
        if not shift_data.main_id or not (user_data := shift_data.users.get(shift_data.main_id)):
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö, –∫—Ç–æ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ
        if user_data.on_break and user_data.break_start_time:
            break_start_time = datetime.datetime.fromisoformat(user_data.break_start_time)
            if (now_moscow - break_start_time).total_seconds() / 60 > BREAK_DURATION_MINUTES:
                last_reminder_str = user_data.last_break_reminder_time
                if not last_reminder_str or (now_moscow - datetime.datetime.fromisoformat(last_reminder_str)).total_seconds() > 120:
                    try:
                        phrase = random.choice(soviet_phrases.get('return_demand_hard', ['–ü–æ—Ä–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–±–æ—Ç–µ!']))
                        bot.send_message(chat_id, f"{format_username(user_data.username)}, {phrase}")
                        with data_lock:
                            user_data.last_break_reminder_time = now_moscow.isoformat()
                    except Exception as e:
                        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–µ—Ä–µ—Ä—ã–≤–µ –≤ —á–∞—Ç {chat_id}: {e}")
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤ —ç—Ñ–∏—Ä–µ
        if user_data.last_voice_time:
            last_voice_time = datetime.datetime.fromisoformat(user_data.last_voice_time)
            inactive_minutes = (now_moscow - last_voice_time).total_seconds() / 60
            
            chat_timeout = chat_configs.get(str(chat_id), {}).get('voice_timeout', VOICE_TIMEOUT_MINUTES)

            if inactive_minutes > chat_timeout:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–∞—É–∑–∞ - –µ—Å–ª–∏ –¥–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                if user_data.on_pause:
                    pause_start = datetime.datetime.fromisoformat(user_data.pause_start_time)
                    elapsed = (now_moscow - pause_start).total_seconds() / 60
                    remaining = max(0, 40 - elapsed)
                    
                    if remaining <= 0:
                        # –ü–∞—É–∑–∞ –∏—Å—Ç–µ–∫–ª–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∞–µ–º
                        user_data.on_pause = False
                        user_data.pause_end_time = now_moscow.isoformat()
                        try:
                            bot.send_message(chat_id, "‚èØÔ∏è –ü–∞—É–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏! –°—á–µ—Ç—á–∏–∫–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
                        except Exception as e:
                            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–∞—É–∑—ã –≤ —á–∞—Ç {chat_id}: {e}")
                    else:
                        # –ü–∞—É–∑–∞ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                        continue
                
                last_reminder_str = user_data.last_activity_reminder_time
                should_remind = not last_reminder_str or (now_moscow - datetime.datetime.fromisoformat(last_reminder_str)).total_seconds() > 180

                if should_remind:
                    try:
                        phrase = random.choice(soviet_phrases.get('pace_reminder', ['–í—ã –¥–∞–≤–Ω–æ –Ω–µ –≤—ã—Ö–æ–¥–∏–ª–∏ –≤ —ç—Ñ–∏—Ä.']))
                        bot.send_message(chat_id, f"{format_username(user_data.username)}, {phrase} (—Ç–∏—à–∏–Ω–∞ —É–∂–µ {int(inactive_minutes)} –º–∏–Ω.)")
                        with data_lock:
                             user_data.last_activity_reminder_time = now_moscow.isoformat()
                    except Exception as e:
                        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ì–° –≤ —á–∞—Ç {chat_id}: {e}")

def check_for_shift_end(bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ª–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã –¥–ª—è –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ —á–∞—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
    configs_copy = list(chat_configs.items())
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ–Ω—ã, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    all_chats_to_check = set()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    for chat_id_str, config in configs_copy:
        all_chats_to_check.add(chat_id_str)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç—ã —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–º–µ–Ω–∞–º–∏ (–¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –≤—Ä–µ–º—è 04:00)
    for chat_id in chat_data.keys():
        all_chats_to_check.add(str(chat_id))

    for chat_id_str in all_chats_to_check:
        config = chat_configs.get(chat_id_str, {})
        tz_name = config.get('timezone', 'Europe/Moscow')
        end_time_str = config.get('end_time', '04:00')  # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –≤—Ä–µ–º—è 04:00
        
        try:
            local_tz = pytz.timezone(tz_name)
            now_local = datetime.datetime.now(local_tz)
            current_time = now_local.strftime('%H:%M')
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–∏–∞–ø–∞–∑–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ —á–∞—Å–∞ –ø–æ—Å–ª–µ)
            end_hour, end_minute = map(int, end_time_str.split(':'))
            end_time = datetime.time(end_hour, end_minute)
            current_time_only = now_local.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã
            time_matches = (
                end_time <= current_time_only < 
                datetime.time((end_time.hour + 1) % 24, end_time.minute)
            )
            
            if time_matches:
                with data_lock:
                    current_shift = chat_data.get(int(chat_id_str))
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã –æ—Ç—á–µ—Ç–∞
                    today_date = now_local.date().isoformat()
                    should_send_report = (current_shift and 
                                        current_shift.main_id and 
                                        (not hasattr(current_shift, 'last_report_date') or 
                                         not current_shift.last_report_date or 
                                         current_shift.last_report_date != today_date))
                    
                    if should_send_report:
                        chat_id_to_report = int(chat_id_str)
                        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç—á–µ—Ç –¥–ª—è —á–∞—Ç–∞ {chat_id_to_report}: –≤—Ä–µ–º—è {current_time}, —Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è {end_time_str}, –¢–ó: {tz_name}")
                    else:
                        chat_id_to_report = None
                        if current_shift and current_shift.main_id:
                            logging.info(f"–û—Ç—á–µ—Ç –¥–ª—è —á–∞—Ç–∞ {chat_id_str} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–µ–≥–æ–¥–Ω—è ({today_date})")
                
                if chat_id_to_report:
                    send_end_of_shift_report_for_chat(bot, chat_id_to_report)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ check_for_shift_end –¥–ª—è —á–∞—Ç–∞ {chat_id_str}: {e}", exc_info=True)

def database_cleanup_task():
    """–ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã."""
    try:
        logging.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        db.cleanup_old_data(days_old=30)  # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
        logging.info("–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

def schedule_database_cleanup():
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –æ—á–∏—Å—Ç–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ 03:00."""
    schedule.every().day.at("03:00").do(database_cleanup_task)
    logging.info("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ 03:00")

def run_scheduler(bot):
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    schedule.every(1).minutes.do(check_for_shift_end, bot=bot)
    schedule.every(1).minutes.do(check_user_activity, bot=bot)
    # –ò–ó–ú–ï–ù–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º bot –≤ —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ–Ω–∞ –º–æ–≥–ª–∞ —É–≤–µ–¥–æ–º–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ
    schedule.every(5).minutes.do(save_state, bot=bot, chat_data=chat_data, user_history=user_history)
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    schedule_database_cleanup()
    
    logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω. –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ.")
    while True:
        try:
            schedule.run_pending()
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}", exc_info=True)
        time.sleep(1)
