# admin_panel.py
"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
"""

import logging
from telebot import types
from typing import Optional

from utils import is_admin, get_username
from config import BOSS_ID
from database import db
from roles import (
    get_current_day_type, get_roles_for_day_type, get_goals_for_day_type,
    DayType, UserRole, ROLE_EMOJIS, ROLE_DESCRIPTIONS, DAY_TYPE_MAPPING
)

class AdminPanel:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é"""
    
    @staticmethod
    def create_main_menu(user_id: int, chat_id: int) -> types.InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        markup = types.InlineKeyboardMarkup(row_width=2)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        markup.add(
            types.InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã", callback_data="admin_status"),
            types.InlineKeyboardButton("üìà –†–µ–π—Ç–∏–Ω–≥", callback_data="admin_rating")
        )
        
        markup.add(
            types.InlineKeyboardButton("üé≠ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏", callback_data="admin_roles"),
            types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
        )
        
        markup.add(
            types.InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–º–µ–Ω—ã", callback_data="admin_restart"),
            types.InlineKeyboardButton("üìù –î–æ—Å—Ä–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="admin_report")
        )
        
        markup.add(
            types.InlineKeyboardButton("üö® –ü—Ä–æ–±–ª–µ–º—ã", callback_data="admin_problems"),
            types.InlineKeyboardButton("üìú –õ–æ–≥ —Å–º–µ–Ω—ã", callback_data="admin_log")
        )
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º
        bot_status = "üü¢" if db.is_bot_enabled(chat_id) else "üî¥"
        markup.add(
            types.InlineKeyboardButton(f"{bot_status} –ë–æ—Ç –≤–∫–ª/–≤—ã–∫–ª", callback_data="admin_toggle_bot")
        )
        
        # –§—É–Ω–∫—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è BOSS
        if user_id == BOSS_ID:
            markup.add(
                types.InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
            )
        
        markup.add(
            types.InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close")
        )
        
        return markup
    
    @staticmethod
    def create_roles_menu(chat_id: int) -> types.InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏"""
        markup = types.InlineKeyboardMarkup(row_width=1)
        
        current_day_type = get_current_day_type()
        current_roles = get_roles_for_day_type(current_day_type)
        
        markup.add(
            types.InlineKeyboardButton(
                f"üìÖ –°–µ–≥–æ–¥–Ω—è: {current_day_type.value} –¥–µ–Ω—å", 
                callback_data="admin_day_info"
            )
        )
        
        markup.add(types.InlineKeyboardButton("", callback_data="separator"))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–ª–∏
        for role in current_roles:
            emoji = ROLE_EMOJIS.get(role, "üë§")
            description = ROLE_DESCRIPTIONS.get(role, role)
            markup.add(
                types.InlineKeyboardButton(
                    f"{emoji} {description}", 
                    callback_data=f"admin_role_info_{role}"
                )
            )
        
        markup.add(types.InlineKeyboardButton("", callback_data="separator"))
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        markup.add(
            types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_schedule_config"),
            types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–æ–ª—è–º", callback_data="admin_roles_stats")
        )
        
        markup.add(
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main")
        )
        
        return markup
    
    @staticmethod
    def create_schedule_config_menu() -> types.InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        markup = types.InlineKeyboardMarkup(row_width=1)
        
        markup.add(
            types.InlineKeyboardButton("üìÖ –ë—É–¥–Ω–∏–µ –¥–Ω–∏ (–≤—Å-—á—Ç)", callback_data="admin_config_weekday"),
            types.InlineKeyboardButton("üéâ –í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ (–ø—Ç-—Å–±)", callback_data="admin_config_weekend")
        )
        
        markup.add(
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ä–æ–ª—è–º", callback_data="admin_roles")
        )
        
        return markup
    
    @staticmethod
    def create_day_config_menu(day_type: DayType) -> types.InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–∏–ø–∞ –¥–Ω—è"""
        markup = types.InlineKeyboardMarkup(row_width=1)
        
        current_roles = get_roles_for_day_type(day_type)
        
        markup.add(
            types.InlineKeyboardButton(
                f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞: {day_type.value} –¥–µ–Ω—å", 
                callback_data="separator"
            )
        )
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ —Ä–æ–ª–µ–π
        for role_enum in UserRole:
            role = role_enum.value
            emoji = ROLE_EMOJIS.get(role, "üë§")
            status = "‚úÖ" if role in current_roles else "‚ùå"
            markup.add(
                types.InlineKeyboardButton(
                    f"{status} {emoji} {ROLE_DESCRIPTIONS[role]}", 
                    callback_data=f"admin_toggle_role_{day_type.value}_{role}"
                )
            )
        
        markup.add(
            types.InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"admin_save_config_{day_type.value}"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_schedule_config")
        )
        
        return markup
    
    @staticmethod
    def create_bot_control_menu(chat_id: int) -> types.InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º"""
        markup = types.InlineKeyboardMarkup(row_width=1)
        
        is_enabled = db.is_bot_enabled(chat_id)
        
        if is_enabled:
            markup.add(
                types.InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", callback_data="admin_bot_disable")
            )
        else:
            markup.add(
                types.InlineKeyboardButton("üü¢ –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", callback_data="admin_bot_enable")
            )
        
        markup.add(
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_main")
        )
        
        return markup

def register_admin_panel_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    
    @bot.message_handler(commands=['admin'])
    def handle_admin_command(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not is_admin(bot, user_id, chat_id):
            bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        username = get_username(message.from_user)
        
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        markup = AdminPanel.create_main_menu(user_id, chat_id)
        
        admin_text = [
            "‚öúÔ∏è **–ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê** ‚öúÔ∏è",
            f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {username}",
            f"üè† –ß–∞—Ç ID: {chat_id}",
            "",
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        ]
        
        bot.send_message(
            chat_id, 
            "\n".join(admin_text), 
            reply_markup=markup, 
            parse_mode="Markdown"
        )
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith('admin_'))
    def handle_admin_callbacks(call: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not is_admin(bot, user_id, chat_id):
            bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        try:
            if call.data == "admin_main":
                markup = AdminPanel.create_main_menu(user_id, chat_id)
                bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=markup)
                
            elif call.data == "admin_roles":
                markup = AdminPanel.create_roles_menu(chat_id)
                bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=markup)
                
            elif call.data == "admin_schedule_config":
                markup = AdminPanel.create_schedule_config_menu()
                bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=markup)
                
            elif call.data == "admin_config_weekday":
                markup = AdminPanel.create_day_config_menu(DayType.WEEKDAY)
                bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=markup)
                
            elif call.data == "admin_config_weekend":
                markup = AdminPanel.create_day_config_menu(DayType.WEEKEND)
                bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=markup)
                
            elif call.data == "admin_toggle_bot":
                markup = AdminPanel.create_bot_control_menu(chat_id)
                bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=markup)
                
            elif call.data == "admin_bot_enable":
                admin_username = get_username(call.from_user)
                db.set_bot_enabled(chat_id, True, user_id)
                bot.answer_callback_query(call.id, "üü¢ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω!")
                markup = AdminPanel.create_main_menu(user_id, chat_id)
                bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=markup)
                
            elif call.data == "admin_bot_disable":
                admin_username = get_username(call.from_user)
                db.set_bot_enabled(chat_id, False, user_id)
                bot.answer_callback_query(call.id, "üî¥ –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω!")
                markup = AdminPanel.create_main_menu(user_id, chat_id)
                bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=markup)
                
            elif call.data == "admin_close":
                bot.delete_message(chat_id, call.message.message_id)
                bot.answer_callback_query(call.id, "–ü–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞")
                
            elif call.data == "separator":
                bot.answer_callback_query(call.id)  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
                
            else:
                # –ó–¥–µ—Å—å –±—É–¥—É—Ç –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                bot.answer_callback_query(call.id, "üîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
